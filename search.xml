<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>详解Next Auth：自定义邮箱密码登录注册、Github、Notion授权 &amp; Convex集成</title>
      <link href="/2024/06/12/%E8%AF%A6%E8%A7%A3Next%20Auth%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E7%AE%B1%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E3%80%81Github%E3%80%81Notion%E6%8E%88%E6%9D%83%20&amp;%20Convex%E9%9B%86%E6%88%90/"/>
      <url>/2024/06/12/%E8%AF%A6%E8%A7%A3Next%20Auth%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E7%AE%B1%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E3%80%81Github%E3%80%81Notion%E6%8E%88%E6%9D%83%20&amp;%20Convex%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>最近用NextJS框架做全栈项目做的很顺手，现在想给项目加上<strong>登录、注册、鉴权拦截、分角色路由控制</strong>等功能，并接入Github、Notion等第三方登录。<br>可以使用NextJS官方提供的Auth框架实现。</p><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>阅读本篇，你将学会：<br>1、登录、注册等逻辑，和如何接入第三方（以Github、Notion为例）<br>2、建立用户、角色等数据模型，存储用户数据<br>3、公开、私有路由守卫</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>NextJs（前端框架）  v14.2.3</li><li>React（前端框架）  18</li><li>NextAuth（鉴权框架） v5.0.0-beta.18</li><li>Convex （后端接口 + ORM）</li></ul><h2 id="背景知识学习"><a href="#背景知识学习" class="headerlink" title="背景知识学习"></a>背景知识学习</h2><p>在开始实现之前，需要知道NextJS中服务端组件和客户端组件的概念。<br>NextJS中使用”use client“和”use server“标识服务端和客户端组件，客户端运行在浏览器中，服务端运行在服务器端。<strong>不标识时，默认为服务端组件。</strong><br>服务端组件用于异步请求等，负责与服务端交互、请求数据等，客户端组件主要用于和用户交互。React的钩子也有明确的区分，比如useEffect等钩子只能在客户端组件中使用。</p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="代码框架搭建"><a href="#代码框架搭建" class="headerlink" title="代码框架搭建"></a>代码框架搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest  </span><br></pre></td></tr></table></figure><p>使用<strong>NextAuth（v5版本）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install next-auth@beta  </span><br></pre></td></tr></table></figure><p>开始之前，需要在环境变量文件<code>.env.local</code>中配置变量</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTH_SECRET=**********************</span><br></pre></td></tr></table></figure><h1 id="Credentials"><a href="#Credentials" class="headerlink" title="Credentials"></a>Credentials</h1><p>我们首先实现一个简单的账号密码注册、登录、登出。<br>参考： <a href="https://authjs.dev/getting-started/authentication/credentials#credentials-provider">Credentials</a></p><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h2><p>在项目根目录下，新建<code>auth.js</code>文件，并写入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NextAuth</span> <span class="keyword">from</span> <span class="string">&quot;next-auth&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Credentials</span> <span class="keyword">from</span> <span class="string">&quot;next-auth/providers/credentials&quot;</span></span><br><span class="line"><span class="comment">// Your own logic for dealing with plaintext password strings; be careful!</span></span><br><span class="line"><span class="keyword">import</span> &#123; saltAndHashPassword &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/password&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; handlers, signIn, signOut, auth &#125; = <span class="title class_">NextAuth</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title class_">Credentials</span>(&#123;</span><br><span class="line">      <span class="attr">authorize</span>: <span class="keyword">async</span> (credentials) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> user = <span class="literal">null</span></span><br><span class="line"> </span><br><span class="line">       <span class="comment">// logic to salt and hash password</span></span><br><span class="line">        <span class="keyword">const</span> pwHash = <span class="title function_">saltAndHashPassword</span>(credentials.<span class="property">password</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// logic to verify if user exists</span></span><br><span class="line">        user = <span class="keyword">await</span> <span class="title function_">getUserFromDb</span>(credentials.<span class="property">email</span>, pwHash)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">          <span class="comment">// No user found, so this is their first attempt to login</span></span><br><span class="line">          <span class="comment">// meaning this is also the place you could do registration</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;User not found.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// return user object with the their profile data</span></span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在根目录下，新建文件<code>middleware.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NextAuth</span> <span class="keyword">from</span> <span class="string">&#x27;next-auth&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line"><span class="variable constant_">DEFAULT_LOGIN_REDIRECT</span>,</span><br><span class="line">apiAuthPrefix,</span><br><span class="line">authRoutes,</span><br><span class="line">publicRoutes,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@/routes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; auth &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">auth</span>(<span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; nextUrl &#125; = req;</span><br><span class="line"><span class="comment">// console.log(&quot;NEXT URL&quot; + nextUrl.pathname)</span></span><br><span class="line"><span class="keyword">const</span> isLoggedIn = !!req.<span class="property">auth</span>;</span><br><span class="line"><span class="keyword">const</span> isApiAuthRoute = nextUrl.<span class="property">pathname</span>.<span class="title function_">startsWith</span>(apiAuthPrefix);</span><br><span class="line"><span class="keyword">const</span> isPublicRoutes = publicRoutes.<span class="title function_">includes</span>(nextUrl.<span class="property">pathname</span>);</span><br><span class="line"><span class="keyword">const</span> isAuthRoute = authRoutes.<span class="title function_">includes</span>(nextUrl.<span class="property">pathname</span>);</span><br><span class="line"><span class="keyword">if</span> (isApiAuthRoute) &#123;</span><br><span class="line"><span class="comment">// DO NOTHING!</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isAuthRoute) &#123;</span><br><span class="line"><span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Response</span>.<span class="title function_">redirect</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="variable constant_">DEFAULT_LOGIN_REDIRECT</span>, nextUrl))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isLoggedIn &amp;&amp; !isPublicRoutes) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Response</span>.<span class="title function_">redirect</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;/auth/login&quot;</span>, nextUrl))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// invoke the middle ware!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">matcher</span>: [<span class="string">&quot;/((?!.+\\.[\\w]+$|_next).*)&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;/(api|trpc)(.*)&quot;</span>],</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>routes.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Public Routes</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> publicRoutes = [</span><br><span class="line"><span class="string">&quot;/&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// redirect logged in users to /settings</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> authRoutes = [</span><br><span class="line"><span class="string">&quot;/auth/login&quot;</span>,</span><br><span class="line"><span class="string">&quot;/auth/register&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiAuthPrefix = <span class="string">&quot;/api/auth&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DEFAULT_LOGIN_REDIRECT</span> = <span class="string">&quot;/dashboard&quot;</span></span><br></pre></td></tr></table></figure><p><code>middleware.ts</code>为保留文件名，其中<code>config</code>变量定义了触发中间件方法的匹配规则。该文件中，定义了<code>auth</code>方法的过滤器。<br>在<code>route.ts</code>中定义公开路径、用于鉴权的路径、鉴权接口前缀及默认重定向地址。<br>在过滤方法中，返回null说明无需执行权限检查。对于公开路径及鉴权接口，无需登录即可访问。登录后，再访问注册和登录页面，会自动重定向到<code>DEFAULT_LOGIN_REDIRECT</code>定义的<code>/dashboard</code>路由中。<br>配置NextAuth路由：<br><code>api/auth/[...nextauth]/route.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; handlers &#125; <span class="keyword">from</span> <span class="string">&quot;@/auth&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; <span class="variable constant_">GET</span>, <span class="variable constant_">POST</span> &#125; = handlers</span><br></pre></td></tr></table></figure><h2 id="2-注册页面"><a href="#2-注册页面" class="headerlink" title="2.注册页面"></a>2.注册页面</h2><p>实现形如下图的注册页面，核心为可提交的表单，包含name、email、password等字段。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d13f0c305c004e24bea0da279ee4ce37~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=388&h=561&s=25327&e=png&b=ffffff" alt="image.png"></p><p>使用zod进行字段的合法性校验。在<code>schemas/index.ts</code>中，定义注册使用的schema：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> z <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">RegisterSchema</span> = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">    <span class="attr">email</span>: z.<span class="title function_">string</span>().<span class="title function_">email</span>(&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;Email is Required.&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">password</span>: z.<span class="title function_">string</span>().<span class="title function_">min</span>(<span class="number">6</span>,&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;Minimum 6 characters required&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">name</span>: z.<span class="title function_">string</span>().<span class="title function_">min</span>(<span class="number">1</span>,&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;Name is Required&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注册页面代码（部分）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useTransition &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; cn &#125; <span class="keyword">from</span> <span class="string">&quot;@/lib/utils&quot;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> z <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; zodResolver &#125; <span class="keyword">from</span> <span class="string">&quot;@hookform/resolvers/zod&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; register &#125; <span class="keyword">from</span> <span class="string">&quot;@/actions/register&quot;</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RegisterFormProps</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">RegisterForm</span>(<span class="params">&#123; className, ...props &#125;: RegisterFormProps</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isPending, startTransition] = <span class="title function_">useTransition</span>();</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = useState&lt;<span class="built_in">string</span> | <span class="literal">undefined</span>&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [success, setSuccess] = useState&lt;<span class="built_in">string</span> | <span class="literal">undefined</span>&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> form = useForm&lt;z.<span class="property">infer</span>&lt;<span class="keyword">typeof</span> <span class="title class_">RegisterSchema</span>&gt;&gt;(&#123;</span><br><span class="line">    <span class="attr">resolver</span>: <span class="title function_">zodResolver</span>(<span class="title class_">RegisterSchema</span>),</span><br><span class="line">    <span class="attr">defaultValues</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">onSubmit</span>(<span class="params">values: z.infer&lt;<span class="keyword">typeof</span> RegisterSchema&gt;</span>) &#123;</span><br><span class="line">    <span class="title function_">setError</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="title function_">setSuccess</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="title function_">startTransition</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">register</span>(values).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setError</span>(data.<span class="property">error</span>)</span><br><span class="line">        <span class="title function_">setSuccess</span>(data.<span class="property">success</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;cn(</span>&quot;<span class="attr">grid</span> <span class="attr">gap-6</span>&quot;, <span class="attr">className</span>)&#125; &#123;<span class="attr">...props</span>&#125;&gt;</span>  </span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;form.handleSubmit(onSubmit)&#125;</span> <span class="attr">className</span>=<span class="string">&quot;space-y-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          // form field inputs</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">className</span>=<span class="string">&quot;w-full&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;isPending&#125;</span>&gt;</span>Create an account<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>actions/register.ts</code> 处理注册用户入库：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use server&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> z <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RegisterSchema</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/schemas&quot;</span>;</span><br><span class="line"><span class="keyword">import</span>  bcrypt  <span class="keyword">from</span> <span class="string">&quot;bcryptjs&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">&quot;@/convex/_generated/api&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchMutation, fetchQuery &#125; <span class="keyword">from</span> <span class="string">&quot;convex/nextjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getUserByEmail &#125; <span class="keyword">from</span> <span class="string">&quot;@/data/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">register</span> = <span class="keyword">async</span> (<span class="params">values: z.infer&lt;<span class="keyword">typeof</span> RegisterSchema&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> validatedFields = <span class="title class_">RegisterSchema</span>.<span class="title function_">safeParse</span>(values);</span><br><span class="line">    <span class="keyword">if</span> (!validatedFields.<span class="property">success</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">error</span>: <span class="string">&quot;Invalid fields!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; email, password, name &#125; = validatedFields.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">const</span> hasedPassword = <span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(password, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">const</span> existingUser = <span class="keyword">await</span> <span class="title function_">getUserByEmail</span>(email)</span><br><span class="line">    <span class="keyword">if</span> (existingUser) &#123;</span><br><span class="line">        <span class="string">``</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">error</span>: <span class="string">&quot;Email already in use!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">fetchMutation</span>(api.<span class="property">user</span>.<span class="property">create</span>, &#123;</span><br><span class="line">        name,</span><br><span class="line">        email,</span><br><span class="line">        <span class="attr">password</span>: hasedPassword</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// TODO : Send verification token email</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// error: &quot;Invalid fields!&quot;,</span></span><br><span class="line">        <span class="attr">success</span>: <span class="string">&quot;User Created&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户在注册页面填写名称、邮箱、密码后，点击submit按钮，客户端组件调用了服务组件方法，先查询邮箱是否被占用，未被占用，将明文密码使用<code>bcryptjs</code>加密后，存入数据库中。</p><h2 id="3-用户登录"><a href="#3-用户登录" class="headerlink" title="3.用户登录"></a>3.用户登录</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1a207eee5b14f279f6e7c469af4c482~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=430&h=519&s=23590&e=png&b=ffffff" alt="image.png"><br>同样使用zod进行登录表单的字段的合法性校验。在<code>schemas/index.ts</code>中，定义登录使用的schema：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> z <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">LoginSchema</span> = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">    <span class="attr">email</span>: z.<span class="title function_">string</span>().<span class="title function_">email</span>(),</span><br><span class="line">    <span class="attr">password</span>: z.<span class="title function_">string</span>().<span class="title function_">min</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：不应限制用户填入密码规则。虽然注册时限定了用户填写的密码至少6位，但系统的密码规则有可能变更。</p></blockquote><p>登录页面代码（部分）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useTransition &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; cn &#125; <span class="keyword">from</span> <span class="string">&quot;@/lib/utils&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useForm &#125; <span class="keyword">from</span> <span class="string">&quot;react-hook-form&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LoginSchema</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/schemas&quot;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> z <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; zodResolver &#125; <span class="keyword">from</span> <span class="string">&quot;@hookform/resolvers/zod&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; login &#125; <span class="keyword">from</span> <span class="string">&quot;@/actions/login&quot;</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">LoginFormProps</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="title class_">HTMLAttributes</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">LoginForm</span>(<span class="params">&#123; className, ...props &#125;: LoginFormProps</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isPending, startTransition] = <span class="title function_">useTransition</span>();</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = useState&lt;<span class="built_in">string</span> | <span class="literal">undefined</span>&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [success, setSuccess] = useState&lt;<span class="built_in">string</span> | <span class="literal">undefined</span>&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> form = useForm&lt;z.<span class="property">infer</span>&lt;<span class="keyword">typeof</span> <span class="title class_">LoginSchema</span>&gt;&gt;(&#123;</span><br><span class="line">    <span class="attr">resolver</span>: <span class="title function_">zodResolver</span>(<span class="title class_">LoginSchema</span>),</span><br><span class="line">    <span class="attr">defaultValues</span>: &#123;</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">onSubmit</span>(<span class="params">values: z.infer&lt;<span class="keyword">typeof</span> LoginSchema&gt;</span>) &#123;</span><br><span class="line">    <span class="title function_">setError</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="title function_">setSuccess</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="title function_">startTransition</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">login</span>(values).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data &amp;&amp; data.<span class="property">error</span>) &#123;</span><br><span class="line">          <span class="title function_">setError</span>(data.<span class="property">error</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;cn(</span>&quot;<span class="attr">grid</span> <span class="attr">gap-6</span>&quot;, <span class="attr">className</span>)&#125; &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;form.handleSubmit(onSubmit)&#125;</span> <span class="attr">className</span>=<span class="string">&quot;space-y-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">className</span>=<span class="string">&quot;w-full&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;isPending&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>actions/login.ts</code> 登录操作：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use server&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; signIn &#125; <span class="keyword">from</span> <span class="string">&quot;@/auth&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> z <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LoginSchema</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/schemas&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">DEFAULT_LOGIN_REDIRECT</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/routes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthError</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next-auth&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params">values: z.infer&lt;<span class="keyword">typeof</span> LoginSchema&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> validatedFields = <span class="title class_">LoginSchema</span>.<span class="title function_">safeParse</span>(values);</span><br><span class="line">    <span class="keyword">if</span> (!validatedFields.<span class="property">success</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">error</span>: <span class="string">&quot;Invalid fields!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; email, password &#125; = validatedFields.<span class="property">data</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;EMAIL!&quot;</span> + email + <span class="string">&quot;PASSWORD!&quot;</span> + password)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">signIn</span>(<span class="string">&quot;credentials&quot;</span>, &#123;</span><br><span class="line">            email, password,</span><br><span class="line">            <span class="comment">// redirect: true,</span></span><br><span class="line">            <span class="attr">redirectTo</span>: <span class="variable constant_">DEFAULT_LOGIN_REDIRECT</span></span><br><span class="line">        &#125;,)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">AuthError</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (error.<span class="property">type</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;CredentialsSignin&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">error</span>: <span class="string">&quot;Invalid Credentials!&quot;</span> &#125;</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">error</span>: <span class="string">&quot;Something went wrong!&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，该操作从<code>@/auth</code>中导入了SignIn方法，第一个参数指定了Provider，实际的授权在Provider定义的<code>authorize</code>方法中完成：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bcrypt <span class="keyword">from</span> <span class="string">&quot;bcryptjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NextAuth</span>, &#123; <span class="keyword">type</span> <span class="title class_">DefaultSession</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next-auth&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Credentials</span> <span class="keyword">from</span> <span class="string">&quot;next-auth/providers/credentials&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LoginSchema</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./schemas&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; auth, handlers, signIn, signOut &#125; = <span class="title class_">NextAuth</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [</span><br><span class="line">        <span class="title class_">Credentials</span>(&#123;</span><br><span class="line">            <span class="keyword">async</span> <span class="title function_">authorize</span>(<span class="params">credentials</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> validatedFields = <span class="title class_">LoginSchema</span>.<span class="title function_">safeParse</span>(credentials);</span><br><span class="line">                <span class="keyword">if</span> (validatedFields.<span class="property">success</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> &#123; email, password &#125; = validatedFields.<span class="property">data</span>;</span><br><span class="line">                    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">getUserByEmailFromDB</span>(email);</span><br><span class="line">                    <span class="keyword">if</span> (!user || !user.<span class="property">password</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">const</span> passwordsMatch = <span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(password, user.<span class="property">password</span>);</span><br><span class="line">                    <span class="keyword">if</span> (passwordsMatch) &#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;</span><br><span class="line">                            ...user,</span><br><span class="line">                            <span class="attr">id</span>: user.<span class="property">_id</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;),]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，由于密码在注册时使用了<code>bcryptjs</code>加密，所以比较时也要使用<code>bcryptjs</code>提供的match方法。至此，使用邮箱和密码登录注册的简单逻辑已完成。</p><h1 id="Github-Provider"><a href="#Github-Provider" class="headerlink" title="Github Provider"></a>Github Provider</h1><h2 id="1-新建Github-Oauth-App"><a href="#1-新建Github-Oauth-App" class="headerlink" title="1. 新建Github Oauth App"></a>1. 新建Github Oauth App</h2><p>在<code>https://github.com/settings/developers</code>下，新建Oauth Apps</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fe1d1952c894a0887147f2c2a1cfffb~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1518&h=993&s=139826&e=png&b=ffffff" alt="image.png"></p><blockquote><p>Callback url很重要，一定是你的站点host+port，后面配置为Next Auth默认回跳地址<code>/api/auth/callback/github</code>。（我当前配置为开发用，生产时需要改为线上地址。）</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6f6072a4ba2443cb684b1939776a5d4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=670&h=467&s=58414&e=png&b=ffffff" alt="image.png"><br>配置完成后，将Client ID 和Client Secret粘贴到配置文件中。<br><code>.env.local</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GITHUB_CLIENT_ID=****</span><br><span class="line">GITHUB_CLIENT_SECRET=****</span><br></pre></td></tr></table></figure><h2 id="2-配置Github-Provider"><a href="#2-配置Github-Provider" class="headerlink" title="2. 配置Github Provider"></a>2. 配置Github Provider</h2><p>在<code>auth.ts</code>的Providers数组中，加入：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">GitHub</span>(&#123;</span><br><span class="line">  <span class="attr">clientId</span>: process.<span class="property">env</span>.<span class="property">GITHUB_CLIENT_ID</span>,</span><br><span class="line">  <span class="attr">clientSecret</span>: process.<span class="property">env</span>.<span class="property">GITHUB_CLIENT_SECRET</span>,</span><br><span class="line">  <span class="attr">allowDangerousEmailAccountLinking</span>: <span class="literal">true</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p><code>allowDangerousEmailAccountLinking</code>是允许使用同一邮箱的Github、Notion账号互联。若不配置该属性，使用同一邮箱注册的Notion和Github（或其他第三方）登录将被拦截。当使用的Providers来自于不可靠的OAuth App厂商，须谨慎使用该属性。</p><h2 id="3-页面触发Github登录"><a href="#3-页面触发Github登录" class="headerlink" title="3.页面触发Github登录"></a>3.页面触发Github登录</h2><p><code>social.tsx</code><br>从<code>@/auth.ts</code>中导入登录方法，并在点击按钮时触发即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FaGithub</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/fa&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SiNotion</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-icons/si&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/components/ui/button&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; signIn &#125; <span class="keyword">from</span> <span class="string">&quot;next-auth/react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">DEFAULT_LOGIN_REDIRECT</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/routes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Social</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onClick</span> = (<span class="params">provider: <span class="string">&quot;github&quot;</span> | <span class="string">&quot;notion&quot;</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">signIn</span>(provider, &#123;</span><br><span class="line">            <span class="attr">callbackUrl</span>: <span class="variable constant_">DEFAULT_LOGIN_REDIRECT</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center w-full gap-x-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">size</span>=<span class="string">&quot;lg&quot;</span> <span class="attr">className</span>=<span class="string">&quot;w-full&quot;</span> <span class="attr">variant</span>=<span class="string">&quot;outline&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onClick(&quot;github&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">FaGithub</span> <span class="attr">className</span>=<span class="string">&quot;h-5 w-5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">FaGithub</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">size</span>=<span class="string">&quot;lg&quot;</span> <span class="attr">className</span>=<span class="string">&quot;w-full&quot;</span> <span class="attr">variant</span>=<span class="string">&quot;outline&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onClick(&quot;notion&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">SiNotion</span> <span class="attr">className</span>=<span class="string">&quot;h-5 w-5&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首次点击时，会跳转到Github询问是否授权。之后会直接点击后跳转鉴权并登录。</p><h1 id="Notion-Provider"><a href="#Notion-Provider" class="headerlink" title="Notion Provider"></a>Notion Provider</h1><p>Notion登录的配置方法与Github非常类似。</p><h2 id="1-配置Public-Ingegration"><a href="#1-配置Public-Ingegration" class="headerlink" title="1. 配置Public Ingegration"></a>1. 配置Public Ingegration</h2><p>前往<a href="https://www.notion.so/my-integrations">https://www.notion.so/my-integrations</a> ，新建一个Integration，并设置为公有</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddb316800dbd49e8adf78d60df2ea3e3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1127&h=648&s=103126&e=png&b=fefdfb" alt="image.png"><br>需将回调地址配置为<code>/api/auth/callback/notion</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fbdfd00f8094b7bb6f2d522f73c15b1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=601&h=620&s=71973&e=png&b=fdfcfa" alt="image.png"></p><p>生成并复制Secrets：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00b68d512f5246f381d18b667779e902~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=988&h=407&s=40786&e=png&b=fefdfb" alt="image.png"></p><p>将Client ID和Secret复制到配置文件中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AUTH_NOTION_ID=<span class="string">&quot;&quot;</span></span><br><span class="line">AUTH_NOTION_SECRET=<span class="string">&quot;&quot;</span></span><br><span class="line">AUTH_NOTION_REDIRECT_URI=<span class="string">&quot;http://localhost:3001/api/auth/callback/notion&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-配置Notion-Provider"><a href="#2-配置Notion-Provider" class="headerlink" title="2. 配置Notion Provider"></a>2. 配置Notion Provider</h2><p>在<code>auth.ts</code>的Providers数组中，加入：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Notion</span>(&#123;</span><br><span class="line">     <span class="attr">clientId</span>: process.<span class="property">env</span>.<span class="property">AUTH_NOTION_ID</span>,</span><br><span class="line">     <span class="attr">clientSecret</span>: process.<span class="property">env</span>.<span class="property">AUTH_NOTION_SECRET</span>,</span><br><span class="line">     <span class="attr">redirectUri</span>: process.<span class="property">env</span>.<span class="property">AUTH_NOTION_REDIRECT_URI</span>,</span><br><span class="line">     <span class="attr">allowDangerousEmailAccountLinking</span>: <span class="literal">true</span></span><br><span class="line">   &#125;),</span><br></pre></td></tr></table></figure><p>需传入redirectUri（该uri必须配置到上一步的Ingegration中）</p><h2 id="使用Notion登录"><a href="#使用Notion登录" class="headerlink" title="使用Notion登录"></a>使用Notion登录</h2><p>登录的触发方法与Github相同，不赘述。点击登录时，会多出一步，可以选择授权访问的page范围。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9b1c6b82d9f4dbe9ab8c1f64750fe8b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=663&h=733&s=70654&e=png&b=fdfcfc" alt="image.png"></p><h1 id="Convex-Adapter"><a href="#Convex-Adapter" class="headerlink" title="Convex Adapter"></a>Convex Adapter</h1><p>参考文档：</p><ol><li><a href="https://authjs.dev/guides/creating-a-database-adapter">Auth.js | Creating A Database Adapter</a></li><li><a href="https://stack.convex.dev/nextauth-adapter">https://stack.convex.dev/nextauth-adapter</a></li></ol><p>本应用使用了Convex作为后台API提供，所以需要实现Convex Adapter。按<a href="https://stack.convex.dev/nextauth-adapter">https://stack.convex.dev/nextauth-adapter</a> 步骤操作即可。</p><p><code>auth.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NextAuth</span> <span class="keyword">from</span> <span class="string">&quot;next-auth&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ConvexAdapter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/app/ConvexAdapter&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; handlers, auth, signIn, signOut &#125; = <span class="title class_">NextAuth</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">adapter</span>: <span class="title class_">ConvexAdapter</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意避坑！！！！</strong></p><p>这里遇到了一个坑，配置了Convex Adapter后，使用邮箱密码再也无法登陆。经过调试发现是通过Credentials登录时，没有调用createSession方法，session没有创建。在Github上搜索后，发现有人遇到类似问题：<a href="https://github.com/nextauthjs/next-auth/issues/3970">https://github.com/nextauthjs/next-auth/issues/3970</a></p></blockquote><p><strong>在auth.ts中增加如下配置：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session</span>: &#123;</span><br><span class="line">   <span class="comment">// Set to jwt in order to CredentialsProvider works properly</span></span><br><span class="line">   <span class="attr">strategy</span>: <span class="string">&#x27;jwt&#x27;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>即可解决问题！！（卡了好久，真的有点坑……教训就是遇到问题先上github搜搜issue，我一直试图手动自己往数据库塞入一个session未果……）</p><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><h2 id="1-回调-callbacks"><a href="#1-回调-callbacks" class="headerlink" title="1.回调 callbacks"></a>1.回调 callbacks</h2><p>在回调中，可以向session加入自定义属性</p><p><code>auth.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">callbacks</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">signIn</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(&quot;AFTER SIGN IN !&quot; + JSON.stringify(user));</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">jwt</span>(<span class="params">&#123; token, user, account, profile, isNewUser, session &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      token.<span class="property">id</span> = user.<span class="property">id</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> notionAccount = <span class="keyword">await</span> <span class="title function_">getNotionAccount</span>(token.<span class="property">id</span>!! <span class="keyword">as</span> <span class="title class_">Id</span>&lt;<span class="string">&quot;users&quot;</span>&gt;)</span><br><span class="line">    <span class="keyword">if</span> (notionAccount) &#123;</span><br><span class="line">      token.<span class="property">notion_token</span> = notionAccount.<span class="property">access_token</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">session</span>(<span class="params">&#123; token, session &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (token.<span class="property">sub</span> &amp;&amp; session.<span class="property">user</span>) &#123;</span><br><span class="line">      session.<span class="property">user</span>.<span class="property">id</span> = token.<span class="property">sub</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (token.<span class="property">notion_token</span> &amp;&amp; session.<span class="property">user</span>) &#123;</span><br><span class="line">      session.<span class="property">user</span>.<span class="property">notion_token</span> = token.<span class="property">notion_token</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>执行顺序： signIn &#x3D;&gt; jwt &#x3D;&gt; session</p><p>可在session中读到在jwt方法返回的token值，可将需要的属性放到session中，如角色、权限等。此处我将Notion的secret放到session中，以便业务代码中取用。</p><h2 id="2-自定义Session类型"><a href="#2-自定义Session类型" class="headerlink" title="2.自定义Session类型"></a>2.自定义Session类型</h2><p>在auth.ts中加入如下代码，可解决自定义session中的属性报ts错误问题。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;next-auth&quot;</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returned by `auth`, `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Session</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">role</span>: <span class="built_in">string</span>;</span><br><span class="line">      <span class="attr">notion_token</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125; &amp; <span class="title class_">DefaultSession</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-事件-events"><a href="#3-事件-events" class="headerlink" title="3.事件 events"></a>3.事件 events</h2><p><code>auth.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">events</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">linkAccount</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">id</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">setEmailVerified</span>(user.<span class="property">id</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>一个用户（user）可连接多个account（由github、notion等提供的第三方OAuth账号），可设置当连接用户时，将用户设置为邮箱已验证（通过github、notion等可靠app登录的用户无需二次验证邮箱。）</p><h2 id="4-页面"><a href="#4-页面" class="headerlink" title="4.页面"></a>4.页面</h2><p><code>auth.ts</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pages: &#123;</span><br><span class="line">  signIn: &quot;/auth/login&quot;,</span><br><span class="line">  error: &quot;/auth/error&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>指定登录页、自定义鉴权出错页。</p><h2 id="5-登出"><a href="#5-登出" class="headerlink" title="5.登出"></a>5.登出</h2><p><code>action/logout.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use server&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; signOut &#125; <span class="keyword">from</span> <span class="string">&quot;@/auth&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">logout</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//  Some server stuff</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">signOut</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在客户端组件中使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; logout &#125; <span class="keyword">from</span> <span class="string">&quot;@/actions/logout&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onClickSignOut</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">logout</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-使用Session获取用户信息"><a href="#6-使用Session获取用户信息" class="headerlink" title="6.使用Session获取用户信息"></a>6.使用Session获取用户信息</h2><p>在客户端调用useSession(),需要在SessionProvider的包裹下使用。</p><p><code>(protected)/layout.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SessionProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next-auth/react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">DashboardLayout</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  children, // will be a page or nested layout</span></span><br><span class="line"><span class="params">&#125;: &#123;</span></span><br><span class="line"><span class="params">  children: React.ReactNode;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">SessionProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">SessionProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSession &#125; <span class="keyword">from</span> <span class="string">&quot;next-auth/react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> session = <span class="title function_">useSession</span>();</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>NextAuth能帮助你快速集成第三方登录，也支持灵活的自定义账号、密码登录。</p><p>借助ORM框架和一些中间件，一个NextJS项目已可以完成所有业务功能，不需要再有独立的后端服务。对于小而美的项目，是一个快速落地的理想选择。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 全栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>琅琊山一日游</title>
      <link href="/2024/05/19/%E7%90%85%E7%90%8A%E5%B1%B1%E4%B8%80%E6%97%A5%E6%B8%B8/"/>
      <url>/2024/05/19/%E7%90%85%E7%90%8A%E5%B1%B1%E4%B8%80%E6%97%A5%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>和对象一起尝试的合肥公交APP上的旅游线路。原本准备去淮南的焦岗湖（据说风景不错，买车票还送船票、影视城门票），前一天夜里才发现路线比较冷门，大巴没凑够30人，所以强制退票了……所以临时选了滁州的琅琊山。</p><p>早晨六点多起床，开车去大巴停车地点杏花公园。许久没有早起过了，很吃惊原来六点多天就这么亮了啊。经常睡懒觉的我有些惭愧，也不知辜负了多少好辰光。<br>大巴是新的，空调也开得足，开得也蛮快。7:30准时发车，到和平广场停了一站，然后就直接开到景区。9:50左右下车，就看到一块刻着“琅琊山”的大石，琅琊山就到啦。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240521212120.png" alt="image.png"><br>琅琊山本身是不收费的，从美团购买的景区联票包含的四个小景点是分开收费，即醉翁亭、同乐园、琅琊古寺、南天门。我们游览也按照这个顺序，由北门进入，到南天门，然后折返。<br>刚一入山，树影参差，东侧有小溪，有挺多大人带着孩子在溪边戏水，用网捕捞小鱼。溪流不深，流速也很缓。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240521213236.png" alt="image.png"></p><p>首先到的是醉翁亭。</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/DBA7A0C3-1705-48CA-B851-AC9ED787DC60.JPG" alt="DBA7A0C3-1705-48CA-B851-AC9ED787DC60.JPG"></p><p>亭本身不大，有苏轼题字匾额。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/CE37009E-3145-4AD9-AC9A-0C59B795F014_1_102_o.jpeg" alt="CE37009E-3145-4AD9-AC9A-0C59B795F014_1_102_o.jpeg"></p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240521214524.png" alt="image.png"></p><p>亭后有二贤内堂，有欧阳修、王禹偁两位曾当过滁州太守的塑像。<br>还有菱溪石，并有石刻碑文《菱溪》，字很娟秀。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/089145A9-D667-4562-8520-513D584C9110.JPG" alt="089145A9-D667-4562-8520-513D584C9110.JPG"><br>最近对书法颇感兴趣，遇到此类碑文都会再多看几眼。</p><p>园内有一亭，名为“影香亭”，有民乐团演奏，叮叮咚咚的声音悦耳动听，为景色又添了一分情致。</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/BCE2BDB2-05F1-4AD5-B192-5B3CCDCF5258.JPG" alt="BCE2BDB2-05F1-4AD5-B192-5B3CCDCF5258.JPG"><br>出门后看到大石上有一只枯叶蝶。看它合起翅膀还真像一片枯叶呢，偶尔展开才能看到漂亮的花纹。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240629233959.png" alt="image.png"><br>叠翠亭。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/B9516408-9BB1-4D4B-B1BD-52DBA8F56506.JPG" alt="B9516408-9BB1-4D4B-B1BD-52DBA8F56506.JPG"><br>深秀湖。树多垂到水面上。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/6580613B-6366-43E9-A3B0-F2F73137922A.JPG" alt="6580613B-6366-43E9-A3B0-F2F73137922A.JPG"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/A2711970-282F-42B4-98BA-B24615BF1A77.JPG" alt="A2711970-282F-42B4-98BA-B24615BF1A77.JPG"><br>南天门的入口，过了这道口就是要爬山。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/5FA55008-424A-417A-BC81-B0C3E97CFEE9.JPG" alt="5FA55008-424A-417A-BC81-B0C3E97CFEE9.JPG"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/675FFA51-17D4-47E7-B526-481640AB4336.JPG" alt="675FFA51-17D4-47E7-B526-481640AB4336.JPG"><br>路边一只慵懒的小猫咪。<br>到了琅琊寺。</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/6299B24F-6838-4562-9031-228F166E76B3.JPG" alt="6299B24F-6838-4562-9031-228F166E76B3.JPG"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/0B4B3E82-5E5C-408C-96CF-AE8F2649575A.JPG" alt="0B4B3E82-5E5C-408C-96CF-AE8F2649575A.JPG"></p><p>这里专门有工作人员摆了摊让你可以换钱，可以花五块换成50个一角的硬币，往鱼嘴和龟身上投，我和老公换了两次，就为了投中。哈哈，还是挺好玩儿的。<br>寺内的石壁上也有不少铭刻。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/BC71F4B9-A910-4FBB-B278-94DF6E87A7B9.JPG" alt="BC71F4B9-A910-4FBB-B278-94DF6E87A7B9.JPG"></p><p>午餐就是吃了寺内的素斋，20一个菜，两人吃了40。不便宜，但菜是大铁锅现炒出来的，味道还不错。</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/B9B61DC4-93AA-48C6-A01A-9A06D51AD98F.JPG" alt="B9B61DC4-93AA-48C6-A01A-9A06D51AD98F.JPG"></p><p>吃完午饭，坐着休息了一会儿，我们又上南天门，在顶上观赏了一下风景，就下山啦。<br>两点四十差不多人就到齐了，回去也很快，两个小时就到合肥啦。<br>好久没锻炼，一共是徒步了11.5公里左右。愉快的短途旅行～！</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/7E5E6D38-C79A-4D32-B881-085BFBFCA5F0.JPG" alt="7E5E6D38-C79A-4D32-B881-085BFBFCA5F0.JPG"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全栈从0到1 3D旅游地图标记和轨迹生成</title>
      <link href="/2024/04/25/%E5%85%A8%E6%A0%88%E4%BB%8E0%E5%88%B01%203D%E6%97%85%E6%B8%B8%E5%9C%B0%E5%9B%BE%E6%A0%87%E8%AE%B0%E5%92%8C%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/"/>
      <url>/2024/04/25/%E5%85%A8%E6%A0%88%E4%BB%8E0%E5%88%B01%203D%E6%97%85%E6%B8%B8%E5%9C%B0%E5%9B%BE%E6%A0%87%E8%AE%B0%E5%92%8C%E8%BD%A8%E8%BF%B9%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h1><p><a href="https://www.ixigua.com/7361799236754768384?utm_source=xiguastudio">演示视频</a>  </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425231245.png" alt="image.png">  </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425231108.png" alt="image.png">  </p><h1 id="体验地址"><a href="#体验地址" class="headerlink" title="体验地址"></a>体验地址</h1><p><a href="https://travel-trace.vercel.app/">Vercel App</a>  </p><p><strong>开发技术栈：</strong>  </p><ul><li>NextJs（前端框架）  </li><li>React（前端框架）  </li><li>TailwindCSS （CSS样式）  </li><li>echart + echart gl （地图生成）  </li><li>shadui（UI组件库）  </li><li>Zustand  </li><li>lucide-react （图标）</li></ul><p><strong>第三方：</strong>  </p><ul><li>Convex（数据存储+接口）  </li><li>Vercel（项目托管）  </li><li>高德开放平台（提供地图编码、逆编码等WEB API）</li></ul><h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><p>下面给出关键步骤及部分代码。  </p><h2 id="1-Setup"><a href="#1-Setup" class="headerlink" title="1. Setup"></a>1. Setup</h2><h3 id="1-1-初始化NextJS项目"><a href="#1-1-初始化NextJS项目" class="headerlink" title="1.1 初始化NextJS项目"></a>1.1 初始化NextJS项目</h3><p>系统要求：Nodejs 18.17+<br>打开终端，在控制台执行：  </p><pre><code class="bash">npx create-next-app@latest```    全部选择默认选项即可。  ![image.png](https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425232407.png)    初始化完成后，进入项目并运行。    ```bash  cd travel-tracel  npm run dev    </code></pre><p>打开localhost:3000，看到如下页面，项目初始化成功。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425232418.png" alt="image.png">  </p><h3 id="1-2-安装npm依赖"><a href="#1-2-安装npm依赖" class="headerlink" title="1.2 安装npm依赖"></a>1.2 安装npm依赖</h3><p>安装一些主要的依赖。后续需要用到的依赖可以边开发边安装。  </p><pre><code class="bash"># 安装echarts依赖  npm install echarts-for-react  npm install echarts-gl  npm install require # 图标组件  npm install lucide-react  </code></pre><h2 id="2-定义标记点"><a href="#2-定义标记点" class="headerlink" title="2 定义标记点"></a>2 定义标记点</h2><p>实现输入地点或地点关键字，查询经纬度，从而完成标记点的定义。<br>实现思路：  </p><ol><li>首先查询Convex数据库，提供10个最匹配的候选项  </li><li>若没有找到对应候选项，用户可以点击搜索按钮，会调用高德API进行查询。  </li><li>如果仍然没有查询到，可以点击“经纬度”按钮，进行经纬度的自行填写。  </li><li>已经添加了的标记点，支持编辑和删除。  </li><li>使用Zustand，进行地点增、删、改等状态管理。</li></ol><h3 id="2-1-定义useLocationPoints-store"><a href="#2-1-定义useLocationPoints-store" class="headerlink" title="2.1 定义useLocationPoints store"></a>2.1 定义useLocationPoints store</h3><pre><code class="javascript">import &#123;create&#125; from &quot;zustand&quot;;  import &#123;nanoid&#125; from &quot;nanoid&quot;;  interface ILocationPoints &#123;        locations: LocationPoint[],        addLocation: (loc: LocationPoint) =&gt; void,        editLocation: (loc: LocationPoint) =&gt; void,    removeLocation: (id: string) =&gt; void  &#125;  interface LocationPoint&#123;        id: string,        name: string,        lng: string,    lat: string  &#125;        export const useLocationPoints = create&lt;ILocationPoints&gt;(set =&gt; (&#123;        locations: [] as LocationPoint[],        addLocation: (loc: LocationPoint) =&gt; &#123;            const _id  = nanoid()            loc[&quot;id&quot;] = _id            set(state =&gt; (&#123;                locations: [...state.locations, loc]            &#125;));        &#125;,            editLocation: (loc: LocationPoint)=&gt;&#123;            set(state =&gt; (&#123;                locations: state.locations.map(item=&gt;&#123;                    if(item.id === loc.id)&#123;                        return &#123;                            ...loc,                            id: item.id,                        &#125;                    &#125;else &#123;                        return item                    &#125;                &#125;)            &#125;));            &#125;,    // 移除location        removeLocation:(id:string)=&gt;&#123;            set(state =&gt; (&#123;                locations: state.locations.filter(item=&gt;item.id !== id)            &#125;));    &#125;  &#125;));  </code></pre><p>对于location的增删改，均依赖于以上store实现。单页面定义React自带的useState当然也可以，但是为了便利于组件拆分，所以使用store，不用再跨组件管理状态的提交、更新、监听等，方便了很多。<br>考虑到location的名称、经纬度均有可能更改，所以使用nanoid生成唯一id进行location的索引。  </p><h3 id="2-2-引入Convex"><a href="#2-2-引入Convex" class="headerlink" title="2.2 引入Convex"></a>2.2 引入Convex</h3><p>使用convex作为平台后台。convex可以提供数据库存储、RESTful接口及接口调试的功能。  </p><h4 id="2-2-1-Convex-项目配置"><a href="#2-2-1-Convex-项目配置" class="headerlink" title="2.2.1 Convex 项目配置"></a>2.2.1 Convex 项目配置</h4><ol><li><p>访问<a href="https://www.convex.dev/">Convex</a>  </p></li><li><p>创建app<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425232444.png" alt="image.png">  </p></li><li><p>在nextjs项目中，进行相应的配置。<br>参考Convex官方文档：<br><a href="https://docs.convex.dev/quickstart/nextjs">Next.js Quickstart | Convex Developer Hub</a></p></li></ol><pre><code class="bash"># 进入项目目录后，安装  cd my-app &amp;&amp; npm install convex  npx convex dev  </code></pre><p>因为我已经在Convex控制台中创建过app了，所以选择已存在的project  </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425232503.png" alt="image.png">  </p><h4 id="2-2-2-Table-Schema定义和数据初始化"><a href="#2-2-2-Table-Schema定义和数据初始化" class="headerlink" title="2.2.2 Table Schema定义和数据初始化"></a>2.2.2 Table Schema定义和数据初始化</h4><p>在Convex目录下，新建·文件<code>schema.ts</code>  </p><pre><code class="javascript">import &#123; v &#125; from &quot;convex/values&quot;;  import &#123;defineSchema, defineTable&#125; from &quot;convex/server&quot;;      export default defineSchema(&#123;      locations: defineTable(&#123;        // 经纬度          name: v.string(),        //  经度          lng: v.number(),        // 纬度          lat:v.number(),      &#125;)        .index(&quot;by_name&quot;,[&quot;name&quot;])        .searchIndex(&quot;search_by_name&quot;,&#123;            searchField: &quot;name&quot;,            filterFields: [&quot;name&quot;]        &#125;),&#125;);  </code></pre><p>如上所示，定义了一个名称为“locations”的数据表，有name、lng、lat三个字段，并定义了查询的规则（by_name）<br>运行<code>npx convex dev</code>后，会发现Convex控制台中已经生成了该表。<br>我从网上找到了一些世界范围内的经纬度数据，是csv格式。通过python处理成出初始化数据。<br>小技巧：对于不同格式的csv，在第一行定义与字段相匹配的表头即可快速处理。  </p><pre><code class="python">import json        import pandas as pd        data = []  csv_data = pd.read_csv(&#39;globalcities.csv&#39;,header=0,encoding=&quot;utf-8&quot;)        # &#123;&quot;name&quot;: &quot;上海&quot;, &quot;lng&quot;:  121.47,&quot;lat&quot;:31.23&#125;  with open(&quot;global.csv&quot;,&quot;w&quot;,encoding=&#39;utf-8&#39;) as file:              for index, row in csv_data.iterrows():            d = &#123;                &quot;name&quot;: row[&quot;城市名中文&quot;] ,                &quot;lng&quot;:row[&quot;经度&quot;],                &quot;lat&quot;:row[&quot;纬度&quot;]            &#125;            file.write(json.dumps(d,ensure_ascii=False) )            print(json)    </code></pre><p>执行导入：  </p><pre><code class="shell">npx convex import --table locations convex/init.jsonl```    如下图所示，数据导入完成！    ![image.png](https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425220013.png)    #### 2.2.3 查询接口定义和使用    在convex文件夹下，新建文件location.ts，定义一个get查询接口  ```javascript  import &#123; v &#125; from &quot;convex/values&quot;;  import &#123; query &#125; from &quot;./_generated/server&quot;        export const get = query(&#123;        args:&#123;            // orgId: v.string(),            // search: v.optional(v.string()),        // favorites: v.optional(v.string())        name: v.string()        &#125;,        handler: async (ctx,args) =&gt; &#123;                let locations = [];                locations = await ctx.db.query(&quot;locations&quot;)                .withSearchIndex(&quot;search_by_name&quot;, (q) =&gt;                q.search(&quot;name&quot;, args.name)).take(10);                    return locations;    &#125;  &#125;)  </code></pre><p>运行<code>npx convex dev</code>进行接口的生成。<br>接口使用：（value为useState定义的动态值，绑定地点input输入框）  </p><pre><code class="javascript">const queryResult =  useQuery(api.locations.get, &#123;name: value&#125;);  </code></pre><p>在模版代码中遍历查询结果：  </p><pre><code class="html">&#123;        queryResult?.map(res =&gt; (            &lt;Badge variant=&quot;outline&quot; key = &#123;res._id&#125; onClick=&#123;event =&gt; handleClick(event, res)&#125;&gt;                &#123;res.name &#125; [&lt;span className = &quot;text-red-300&quot;&gt;&#123;res.lng&#125;&lt;/span&gt;,&lt;span className = &quot;text-green-800&quot;&gt;&#123;res.lat&#125;&lt;/span&gt;]            &lt;/Badge&gt;    ))  &#125;  </code></pre><p>实现效果如下图所示，输入内容后value更新，就会触发接口调用，出现候选地点供用户选择。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425221747.png" alt="image.png">  </p><h3 id="2-3-引入高德API"><a href="#2-3-引入高德API" class="headerlink" title="2.3 引入高德API"></a>2.3 引入高德API</h3><p>由于上一步的地点不一定全，也由于限定了仅显示前10条，故而又引入高德api进行查询。（有局限：无法查询国外地名）  </p><h4 id="2-3-1-高德开放平台"><a href="#2-3-1-高德开放平台" class="headerlink" title="2.3.1 高德开放平台"></a>2.3.1 高德开放平台</h4><ol><li>新建应用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425232532.png" alt="image.png">  </p><ol start="2"><li>创建key（web端使用的key）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425232548.png" alt="image.png">  </p><pre><code>使用该配置好的key就可以调用高德的接口了，每天有免费五千次的额度，对于一个小demo完全够用了。  </code></pre><h4 id="2-3-2-调用高德接口"><a href="#2-3-2-调用高德接口" class="headerlink" title="2.3.2 调用高德接口"></a>2.3.2 调用高德接口</h4><p>gaode.ts  </p><pre><code class="javascript">// 调用接口       interface GaodeRes &#123;       formatted_address: string,    location: string  &#125;         export const getGeoCode = async (address: string) : Promise&lt;GaodeRes[]&gt; =&gt; &#123;       let result = await fetch(`https://restapi.amap.com/v3/geocode/geo?address=$&#123;address&#125;&amp;key=&#123;&#125;`,&#123;           headers: &#123;               Accept: &#39;application/vnd.dpexpo.v1+json&#39; //设置请求头           &#125;,           method: &#39;get&#39;,       &#125;)       let res = await result.json() //必须通过此方法才可返回数据    return res.geocodes;  &#125;  </code></pre><p>该接口设定为点击查询按钮时才触发（节约次数）。  </p><pre><code class="javascript">const [gaodeQueryResult,setGaodeQueryResult] = useState([]);    const searchGeoCode = () =&gt;&#123;        let queryResult = getGeoCode(value);        queryResult.then(res=&gt;&#123;            if(res &amp;&amp; res.length &gt; 0)&#123;                let data  = res.map(item=&gt;&#123;                    return &#123;                        &quot;name&quot;: item.formatted_address,                        &quot;lng&quot;: item.location.split(&quot;,&quot;)[0],                        &quot;lat&quot;: item.location.split(&quot;,&quot;)[1],                    &#125;                &#125;)                    setGaodeQueryResult(data)            &#125;else&#123;                setGaodeQueryResult([])                toast.error(&quot;未能查询到该地点！您可以通过经纬度进行查询。&quot;)            &#125;        &#125;)        &#125;  </code></pre><p>同样将结果在模版代码中遍历展示即可。  </p><h3 id="2-4-通过经纬度增加"><a href="#2-4-通过经纬度增加" class="headerlink" title="2.4 通过经纬度增加"></a>2.4 通过经纬度增加</h3><p>如果查询不到，实现了点击“经纬度”展开，自行输入经纬度定义标记点的功能。值得一提的是使用了ShadUI的InputOTP组件，可以规定输入的位数和正则，我规定了只可以输入负号、小数点和数字。  </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425222652.png" alt="image.png">  </p><h3 id="2-5-标记点的删除和编辑"><a href="#2-5-标记点的删除和编辑" class="headerlink" title="2.5 标记点的删除和编辑"></a>2.5 标记点的删除和编辑</h3><ol><li>悬停状态才显示编辑和删除按钮。</li></ol><pre><code class="html">&lt;div className = &quot;flex gap-x-2 m-2 relative group&quot; ref=&#123;drag&#125;          style=&#123;&#123;              opacity: isDragging ? 0.5 : 1,          &#125;&#125;&gt;&lt;MapPin /&gt;&#123;name&#125;        &lt;button className = &quot;opacity-0 group-hover:opacity-100&quot; onClick=&#123;()=&gt;onOpen(id,name,lng,lat)&#125; &gt;&lt;Pencil size = &quot;16&quot;&gt;&lt;/Pencil&gt; &lt;/button&gt;    &lt;button className = &quot;opacity-0 group-hover:opacity-100&quot; onClick=&#123;onRemove&#125; &gt;&lt;X size = &quot;16&quot;&gt;&lt;/X&gt; &lt;/button&gt;  &lt;/div&gt;  </code></pre><ol start="2"><li>定义useEditModal，控制编辑Modal的显示和方法。</li></ol><pre><code class="javascript">import &#123;create&#125; from &quot;zustand&quot;;  const defaultValues = &#123;        name: &quot;&quot;,        lng: &quot;&quot;,        lat: &quot;&quot;,    id: &quot;&quot;  &#125;;            interface IEditModal &#123;        isOpen: boolean;        initialValues: typeof defaultValues;        onOpen: (id:string,name:string,lng: string,lat: string) =&gt;void;    onClose: () =&gt; void;  &#125;            export const useEditModal = create&lt;IEditModal&gt;((set) =&gt;(&#123;        isOpen: false,        onOpen:(id:string,name,lng,lat)=&gt;set(&#123;            isOpen:true,            initialValues: &#123;id,name,lng,lat&#125;        &#125;),        onClose: ()=&gt;set(&#123;            isOpen: false,            initialValues: defaultValues        &#125;),        initialValues: defaultValues        &#125;))  </code></pre><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425223400.png" alt="image.png">  </p><h2 id="2-2-定义路线（react-dnd）"><a href="#2-2-定义路线（react-dnd）" class="headerlink" title="2.2 定义路线（react dnd）"></a>2.2 定义路线（react dnd）</h2><p>用户可以拖拽地点到虚线框内，形成路线。路线图的增删改同样适用zustand实现，不加赘述。拖动点到路线框中形成路线，使用了react drag and drop库完成。  </p><pre><code class="shell">npm install react-dnd```  引入react dnd后，将使用到拖拽的部分使用如下provider包裹。  ```html  &lt;DndProvider backend=&#123;HTML5Backend&#125;&gt;&lt;/DndProvider&gt;  </code></pre><p>参考官方示例写法，<strong>拖</strong>部分：(location.tsx)  </p><pre><code class="javascript">import &#123; useDrag &#125; from &#39;react-dnd&#39;  const [&#123; isDragging, &#125;, drag, preview] = useDrag(        () =&gt; (&#123;            type: ItemTypes.Location,            item: &#123; name: name,id:id &#125; ,                collect: (monitor) =&gt; (&#123;                isDragging: !!monitor.isDragging(),            &#125;),        &#125;),    [],  )  </code></pre><p><strong>放</strong>部分：  </p><pre><code class="javascript">import &#123;Overlay, OverlayType&#125; from &quot;@/app/components/Overlay&quot;;  import &#123; useDrop&#125; from &#39;react-dnd&#39;  const [&#123; isOver,canDrop &#125;, drop] = useDrop(        () =&gt; (&#123;            accept: ItemTypes.Location,            canDrop: (item:&#123;name: string,id:string&#125;) =&gt; &#123;                if(!lineData || lineData.length == 0)&#123;                    return true                &#125;else&#123;                    return lineData[lineData.length - 1]?.id !== item.id                &#125;            &#125;,            drop: (item:&#123;name: string,id:string&#125;) =&gt; &#123;                    dropLocation(id, item)                &#125;,                collect: (monitor) =&gt; (&#123;                isOver: !!monitor.isOver(),                canDrop: !!monitor.canDrop(),            &#125;),        &#125;),    [lineData],  )  </code></pre><p>在模版代码中，增加了Overlay并根据是否可以放的状态，给不同的颜色。  </p><pre><code class="html">&#123;isOver &amp;&amp; !canDrop &amp;&amp; &lt;Overlay type=&#123;OverlayType.IllegalMoveHover&#125; /&gt;&#125;  &#123;!isOver &amp;&amp; canDrop &amp;&amp; &lt;Overlay type=&#123;OverlayType.PossibleMove&#125; /&gt;&#125;  &#123;isOver &amp;&amp; canDrop &amp;&amp; &lt;Overlay type=&#123;OverlayType.LegalMoveHover&#125; /&gt;&#125;  </code></pre><p>Overlay.js  </p><pre><code class="javascript">export var OverlayType  ;(function (OverlayType) &#123;        OverlayType[&#39;IllegalMoveHover&#39;] = &#39;Illegal&#39;        OverlayType[&#39;LegalMoveHover&#39;] = &#39;Legal&#39;    OverlayType[&#39;PossibleMove&#39;] = &#39;Possible&#39;  &#125;)(OverlayType || (OverlayType = &#123;&#125;))  export const Overlay = (&#123; type &#125;) =&gt; &#123;        const color = getOverlayColor(type)        return (            &lt;div                className=&quot;overlay&quot;                role=&#123;type&#125;                style=&#123;&#123;                    position: 'absolute',                    top: 0,                    left: 0,                    height: '100%',                    width: '100%',                    zIndex: 1,                    opacity: 0.5,                    backgroundColor: color,                &#125;&#125;            /&gt;    )  &#125;  function getOverlayColor(type) &#123;        switch (type) &#123;            case OverlayType.IllegalMoveHover:                return &#39;red&#39;            case OverlayType.LegalMoveHover:                return &#39;green&#39;            case OverlayType.PossibleMove:                return &#39;#66CC66&#39;    &#125;  &#125;  </code></pre><p>当所拖拽的地点与路线合集中最后一个地点一样时，不允许拖拽进入。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425224705.png" alt="image.png">  </p><h2 id="3-地图渲染（echartgl）"><a href="#3-地图渲染（echartgl）" class="headerlink" title="3 地图渲染（echartgl）"></a>3 地图渲染（echartgl）</h2><p>使用react-echart，并导入echart-gl，实现3D地图渲染。  </p><pre><code class="html">&lt;ReactEcharts        option=&#123;options&#125;        style=&#123;&#123; width: "900px", height: "800px" &#125;&#125;        &gt;&lt;/ReactEcharts&gt;  </code></pre><pre><code class="javascript">  const [options,setOptions] = useState(&#123;        backgroundColor: &quot;#000&quot;,        globe: &#123;            baseTexture:&quot;/earth1.jpg&quot;,            shading: &quot;lambert&quot;,            atmosphere: &#123;    // 不需要大气光圈去掉即                show: false,    offset: 4, // 大气层光圈宽度            &#125;,            viewControl: &#123;    distance: 200, // 默认视角距离地球表面距离            &#125;,            light: &#123;                ambient: &#123;    intensity: 1, // 全局的环境光设置                &#125;,                main: &#123;    intensity: 1, // 场景主光源设置                &#125;,            &#125;,        &#125;,        &#125;)  </code></pre><p>使用useState，根据lineCollection、location数据，动态地增、减地图options。  </p><pre><code class="javascript">useEffect(() =&gt; &#123;       let series = initSeries;        series[0].data = normalData(lines);        series[1].data = activeData(lines);        locations.forEach((item) =&gt; &#123;            series[2].data.push(&#123;                name: item.name,                value: [item.lng,item.lat]            &#125;);        &#125;);        setOptions(&#123;            ...options,            ...customTheme,            series: series        &#125;)        &#125;, [locations,lineCollections,customTheme]);  </code></pre><h3 id="3-1-地球换皮肤"><a href="#3-1-地球换皮肤" class="headerlink" title="3.1 地球换皮肤"></a>3.1 地球换皮肤</h3><p>更换贴图，即可实现地球换皮肤。<br>从网上搜罗一些地球贴图，放入public目录即可。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425225608.png" alt="image.png">  </p><pre><code class="javascript">const themeTopics  = [&#123;        globe: &#123;            baseTexture: &quot;/earth1.jpg&quot;,          &#125;,  &#125;,        &#123;                  globe: &#123;                baseTexture: &quot;/earth2.jpg&quot;,                        &#125;,        &#125;,        &#123;                globe: &#123;                baseTexture: &quot;/earth3.jpg&quot;,                 &#125;,        &#125;,        &#123;                 globe: &#123;                baseTexture: &quot;/earth4.jpg&quot;,             &#125;,    &#125;  ]  </code></pre><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>使用vercel作为部署托管。进入vercel并授权github项目，配置NextJS项目的构建命令。<br>由于我在github的项目源码没有放在根目录，所以还需要设置root-directory。  </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425225806.png" alt="image.png"><br>将所使用到的环境变量放在environment-variables中。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425225959.png" alt="image.png">  </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425225918.png" alt="image.png"><br>需要注意的是，Convex需要生成部署生产使用的URL和KEY，并配到环境变量中。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240425230255.png" alt="image.png">  </p><p>这样就完成啦～  </p><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://github.com/Ygria/travel-trace">https://github.com/Ygria/travel-trace</a>  </p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>写的第一个相对完整的react小项目，麻雀虽小五脏俱全。使用合理的开源组件让全栈变得非常容易。<br>只使用到了react useState和useEffect两个hooks，已经感觉到了一定的理解门槛，与vue的将许多状态处理都放在内部封装好相比，react很多时候需要你自己来理解状态的依赖关系然后处理。react的tsx函数式写法的确很方便（比vue的defineComponents好多了……）。期待随着学习深入，了解到更多有趣的东西。  </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>echart assets<br><a href="https://github.com/ecomfe/echarts-gl/tree/master/test/asset">https://github.com/ecomfe/echarts-gl/tree/master/test/asset</a>  </li><li>全流程开发参考：<br><a href="https://www.codewithantonio.com/courses/88ee3ccc-afd7-414b-a626-e59c93847f65/chapters/b2fb3143-9683-465d-ad49-04f92011a107">https://www.codewithantonio.com/courses/88ee3ccc-afd7-414b-a626-e59c93847f65/chapters/b2fb3143-9683-465d-ad49-04f92011a107</a>  </li><li>echarts+echarts-gl实现带有散点、路径的3d地球<br><a href="https://download.csdn.net/download/weixin_45669156/86248540?ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY2OTE1Ni9hcnRpY2xlL2RldGFpbHMvMTI1OTMyNjAx">https://download.csdn.net/download/weixin_45669156/86248540?ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY2OTE1Ni9hcnRpY2xlL2RldGFpbHMvMTI1OTMyNjAx</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 全栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obisdian图床配置（Markdown格式笔记均适用）</title>
      <link href="/2024/04/17/Obisidian%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/04/17/Obisidian%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>  参考： <a href="https://blog.mingo99.top/article/picbed/picgo">https://blog.mingo99.top/article/picbed/picgo</a>  </p><h2 id="1-在github中新建私人仓库，并生成token"><a href="#1-在github中新建私人仓库，并生成token" class="headerlink" title="1.  在github中新建私人仓库，并生成token"></a>1.  在github中新建私人仓库，并生成token</h2><p>新建仓库（记住<strong>仓库名称①</strong>）<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417110652.png" alt="image.png"><br>Github 右上角-个人头像-setting<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417110804.png" alt="image.png">  </p><p>点击”developer settings “-”Token（classic）“  </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417110834.png" alt="image.png"><br>选择无过期时间，并给repo权限。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417111350.png" alt="image.png"><br>拉到最下，生成token，并复制<strong>token值②</strong>  </p><h2 id="2-下载Picgo并配置"><a href="#2-下载Picgo并配置" class="headerlink" title="2. 下载Picgo并配置"></a>2. 下载Picgo并配置</h2><p> 访问项目Github网址，在<strong>下载安装</strong>中找到对应的下载地址，安装系统安装包。<br><a href="https://github.com/Molunerfinn/PicGo?tab=readme-ov-file">GitHub - Molunerfinn&#x2F;PicGo: :rocket:A simple &amp; beautiful tool for pictures uploading built by vue-cli-electron-builder</a>  </p><p>仓库名：github个人账户名 + 仓库名（上一步中的①）<br>分支名：仓库中存在的分支名，默认为main<br>token：上一步中的②  </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417103934.png" alt="image.png">  </p><h2 id="3-Obisidian插件配置-下载社区插件-Image-auto-upload-Plugin-（社区插件）"><a href="#3-Obisidian插件配置-下载社区插件-Image-auto-upload-Plugin-（社区插件）" class="headerlink" title="3. Obisidian插件配置 - 下载社区插件 Image auto upload Plugin （社区插件）"></a>3. Obisidian插件配置 - 下载社区插件 Image auto upload Plugin （社区插件）</h2><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417104408.png" alt="image.png">  </p><p>下载后无需配置，打开插件。  </p><h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h2><p>使用起来很简单，直接向obsidian中粘贴文件，会自动上传到图床，并插入图片链接。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄山两日游</title>
      <link href="/2022/08/01/%E9%BB%84%E5%B1%B1%E4%B8%A4%E6%97%A5%E6%B8%B8/"/>
      <url>/2022/08/01/%E9%BB%84%E5%B1%B1%E4%B8%A4%E6%97%A5%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>续前面的千岛湖游记，结束了30、31日千岛湖的两日行程，准备转战黄山。计划行程是一日宏村，一日黄山。    </p><h1 id="第一日-：宏村"><a href="#第一日-：宏村" class="headerlink" title="第一日 ：宏村"></a>第一日 ：宏村</h1><p>先从千岛湖坐穿梭大巴至千岛湖车站，再坐半个多小时高铁，12:45到达黄山北站。  从 黄山北站可以坐旅游大巴去宏村景区，可以去窗口买票，25r一人。每十分钟都有班次，会提前半个小时左右检票，建议预留一些时间。我们坐的是13:55的班次。  到达宏村需要一个半小时车程，沿路是盘山公路，到了已经是下午三点半了，稍事休整之后就进入景区～  宏村的门票三天都有效，52r&#x2F;人，还是很实惠的。门口和景区内都有很多小贩卖一种叫“黑莓”的水果，吃起来和葡萄一模一样……到现在不知道是什么水果。门口买二十一斤，宏村内有十五的……（后注：应该是骗人的水果，就是打蜡的葡萄）    </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417212302.png" alt="image.png">  村内都是徽派建筑小村落，走走逛逛，很悠闲快乐，也有很多地方特色小吃可以品尝，乌米糕、 黄山烧饼、毛豆腐等，价格都挺低的，不妨一试。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417213118.png" alt="image.png">  宏村中间有一棵 大树，还有一片湖叫“月沼”，里面有很多荷花。正值盛夏，荷花盛开，有许多美术生在岸边取景绘画，从他们的画布上看景色也挺有趣。  景区内人有点多，景色行来看来觉得平常的地方，拍照特别出片，很神奇。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417213259.png" alt="image.png">    </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417213347.png" alt="image.png">    </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417213406.png" alt="image.png">  我们在景区内吃了饭菜，这边有很多徽菜馆，可以随意选一家评价高的，菜色挺地道。吃到了很好吃的臭鳜鱼、土鸡汤和鲜笋～<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417213610.png" alt="image.png">    </p><p>在宏村内的文创店还留下了明信片，内容就不放了哈哈。来来往往的客人都留下了字迹，看一看也很有意思～<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417213553.png" alt="image.png">  离开的时候已是暮色四合，宏村内亮起了灯笼，夜景挺好看。第二天要去 <a href="https://www.mafengwo.cn/travel-scenic-spot/mafengwo/10440.html">黄山</a> ，得很早起床，所以就早点回酒店休息了～    </p><h1 id="第二日：黄山"><a href="#第二日：黄山" class="headerlink" title="第二日：黄山"></a>第二日：黄山</h1><p>从宏村坐6:50的大巴，四十分钟左右即可到达黄山南面的汤口镇，这里离黄山景区的南大门很近。因为忘了要提前一天订票，所以选择散客拼团，比自己买稍微贵一些，两个人446r（不含索道）    </p><p>我们的路线是：玉屏索道上-迎客松-一线天-天海-光明顶-飞来石-太平索道下。    </p><p>全程耗时五六个小时，一共步行约八公里，没有爬莲花峰，总体不算太累<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417213944.png" alt="image.png">    </p><p>坐索道可以直接从网上买票，刷身份证进，很方便。    </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417213956.png" alt="索道">    </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214119.png" alt="image.png">    </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214126.png" alt="image.png">  上山索道挺刺激的，恐高的话可能不太敢坐，哈哈。  从索道下来爬一段路就到了迎客松，作为 安徽人很是熟悉～（ 安徽卫视的logo）<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214205.png" alt="image.png">  沿路很多导游，可以听一听他们的解说，从不同的角度去观赏奇石，形状各异，别有意趣。    </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214232.png" alt="image.png">    </p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214544.png" alt="image.png">  向着光明顶进发，中间一线天这段道路陡峭，耗费体力较多。在天海吃了辛辛苦苦背上来的午餐，很快乐。（因为是男朋友背的，所以我更快乐。）<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214600.png" alt="image.png">  光明顶：一个大球。<br>一路上都听到一些很累的游客问还有多远还有多远<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214746.png" alt="image.png">  <img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214752.png" alt="image.png">  <img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214756.png" alt="image.png">  ⚠️upload failed, check dev console  <img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417214805.png" alt="image.png">  风景还是很好看的～  两三点就下山啦，五点多到达黄山北站，坐车回合肥 。  愉快的四天旅行到此结束～</p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千岛湖两日游</title>
      <link href="/2022/07/30/%E5%8D%83%E5%B2%9B%E6%B9%96%E4%B8%A4%E6%97%A5%E6%B8%B8/"/>
      <url>/2022/07/30/%E5%8D%83%E5%B2%9B%E6%B9%96%E4%B8%A4%E6%97%A5%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>趁着今年的高温假，和女友第一次正式的外出游玩。大致行程是两日千岛湖、两日黄山。  </p><h1 id="第一日：到达千岛湖、天屿山夕阳"><a href="#第一日：到达千岛湖、天屿山夕阳" class="headerlink" title="第一日：到达千岛湖、天屿山夕阳"></a>第一日：到达千岛湖、天屿山夕阳</h1><p>早上十一点从合肥出发，高铁达到千岛湖高铁站。    </p><p>可以选择从高铁站做酒店穿梭巴士，¥15一位，可以直达至千岛湖中心码头的沿途酒店，还是蛮方便的。    </p><p>三点整至酒店休息了会，一下子睡到了四点多…考虑再三，决定先去旁边的天屿山看夕阳。    </p><p>这里面有两点比较坑：一是上山的你可以选择买车票，否则你得沿着汽车的柏油路爬上去，大概是3.3km单程，没有登山路，所以走起来会感觉很累。二是车票17:30之前就停售了……没办法，17:35我们才到山脚下知道这个消息，结果，一上一下，累死<br>山上的风景还是很美的，约六点半的时候日落，能看到中心湖区这边大部分的景观。夕阳很好看！<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215435.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215440.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215444.png" alt="image.png">  </p><h1 id="第二日：中心湖区、西南湖区、文渊狮城"><a href="#第二日：中心湖区、西南湖区、文渊狮城" class="headerlink" title="第二日：中心湖区、西南湖区、文渊狮城"></a>第二日：中心湖区、西南湖区、文渊狮城</h1><p>早上八点起床，在酒店吃完早餐。<br>今日是三个目标：必坐船、必吃鱼头、必做核酸！<br>为了第一个必做船，报了个坐船观光一日团，流程如下：<br>10:30夜游码头发船，航行约17min至月光岛，岛上游览约四十分钟。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215505.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215525.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215520.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215632.png" alt="image.png"><br>11:40月光岛第二码头出发，航行约25min至梅峰岛，岛上游览约30分钟。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215646.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215654.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215701.png" alt="image.png"><br>游览完成后可以选择船上用餐，也可以选择在梅峰岛上用餐，或者吃点自带的餐点。<br>约13:40从梅峰岛出发，一直航行两个小时，中途会有个水下狮城的介绍，到达文渊狮城。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215714.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215720.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215726.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215737.png" alt="image.png"><br>狮城游览40min。最后乘坐大巴返回千岛湖夜游码头。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215753.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215804.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215808.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215812.png" alt="image.png"><br>做核酸，吃鱼头。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215822.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417215832.png" alt="image.png"><br>最后总结一下费用（单人）：<br>游船加门票费用¥350  升舱（从一楼到二楼，二楼可以在甲板上转悠，多杯绿茶）¥60【没有必要】<br>月光岛上面有自费项目两个：一个滑索和一个走状元桥【没有新意…】<br>梅峰岛上有自费项目两个：缆车和滑草【都不是很有必要，除非膝盖不好，大约能节省8-10分钟的山路】<br>船上吃饭是有40的快餐或者单点，单点一个鱼头¥280<br>说下行程，本着坐船游湖来的，爬两个山嘛总体也不是很累，在船上的话喝点茶水，吃点零食，和对象两人很惬意。<br>整体感观还是很不错的，不过这些繁繁杂杂的二次收费项目很是让人不爽。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch简单入门和SpringBoot集成</title>
      <link href="/2022/05/07/ElasticSearch%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E5%92%8CSpringBoot%E9%9B%86%E6%88%90/"/>
      <url>/2022/05/07/ElasticSearch%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E5%92%8CSpringBoot%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目中使用第三方网关系统，该网关使用<code>ElasticSearch</code>进行服务访问日志记录。<br>为充分利用该网关功能，并在数据基础上实现计数、计费功能，需对<code>ElasticSearch</code>进行快速学习，并使用Java代码集成，从而实现项目所需要的运营功能。</p><h1 id="ElasticSearch基础知识学习"><a href="#ElasticSearch基础知识学习" class="headerlink" title="ElasticSearch基础知识学习"></a>ElasticSearch基础知识学习</h1><p>为快速建立起对ES印象，可按下表进行概念映射：<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417143109.png" alt="image.png"></p><h1 id="Kibana搭建"><a href="#Kibana搭建" class="headerlink" title="Kibana搭建"></a>Kibana搭建</h1><p>为对ES中数据可视化，在服务器上进行<code>Kibana</code>搭建。</p><h3 id="1、下载指定压缩包"><a href="#1、下载指定压缩包" class="headerlink" title="1、下载指定压缩包"></a>1、下载指定压缩包</h3><p>地址： <a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a><br>传至服务器上，解压即可。注意要与ES版本相对应。<br><code>kibana-6.8.23-linux-x86_64.tar.gz</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -zxvf kibana-6.8.23-linux-x86_64.tar.gz</span><br><span class="line"><span class="comment"># 进入配置文件，进行配置的编写</span></span><br><span class="line">vi /config/kibana.yml</span><br></pre></td></tr></table></figure><h3 id="2、修改配置并启动"><a href="#2、修改配置并启动" class="headerlink" title="2、修改配置并启动"></a>2、修改配置并启动</h3><p>编辑配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定ElasticSearch实例地址</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [<span class="string">&quot;http://localhost:9200&quot;</span>]</span><br><span class="line"><span class="comment"># 指定允许访问服务地址，规定为0.0.0.0，为允许所有ip访问</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"> <span class="comment"># 指定es的用户名</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">&quot;username&quot;</span></span><br><span class="line"> <span class="comment"># 指定es的密码</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">&quot;password&quot;</span></span><br><span class="line"><span class="comment"># 指定kibana的语言为中文</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><p>进入bin目录并启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup ./kibana &amp;</span><br><span class="line">tailf -n nohup.out</span><br></pre></td></tr></table></figure><p>访问<code>ip:5601</code>端口即可打开页面访问:</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417143159.png" alt="image.png"></p><h3 id="3、页面设置索引规则"><a href="#3、页面设置索引规则" class="headerlink" title="3、页面设置索引规则"></a>3、页面设置索引规则</h3><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417143214.png" alt="image.png"></p><p>使用索引模式，建立通配索引后，可以在discover tab下查看到内容。</p><h3 id="4、使用开发工具，进行查询语句调试"><a href="#4、使用开发工具，进行查询语句调试" class="headerlink" title="4、使用开发工具，进行查询语句调试"></a>4、使用开发工具，进行查询语句调试</h3><p>对于需要调试的DSL语句，可以使用开发工具进行请求的调试。</p><h1 id="SpringBoot集成"><a href="#SpringBoot集成" class="headerlink" title="SpringBoot集成"></a>SpringBoot集成</h1><h2 id="客户端集成（带账号、密码）"><a href="#客户端集成（带账号、密码）" class="headerlink" title="客户端集成（带账号、密码）"></a>客户端集成（带账号、密码）</h2><p>1、将密码、地址等配到SpringBoot项目的配置文件中;<br>2、重写restHighLevelClient<br>代码清单如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticSearchConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;elasticsearch.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String elasticSearchHost;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;elasticsearch.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String elasticSearchPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;elasticsearch.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String elasticSearchUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;elasticsearch.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String elasticSearchPass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;restHighLevelClient&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">restHighLevelClient</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;HttpHost&gt; hostLists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        hostLists.add(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(elasticSearchHost, Integer.parseInt(elasticSearchPort), <span class="string">&quot;http&quot;</span>));</span><br><span class="line">        <span class="keyword">final</span> <span class="type">CredentialsProvider</span> <span class="variable">credentialsProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicCredentialsProvider</span>();</span><br><span class="line">        credentialsProvider.setCredentials(AuthScope.ANY, <span class="keyword">new</span> <span class="title class_">UsernamePasswordCredentials</span>(elasticSearchUser, elasticSearchPass));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 HttpHost 数组</span></span><br><span class="line">        HttpHost[] httpHost = hostLists.toArray(<span class="keyword">new</span> <span class="title class_">HttpHost</span>[]&#123;&#125;);</span><br><span class="line">        <span class="comment">// 构建连接对象</span></span><br><span class="line">        <span class="type">RestClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> RestClient.builder(httpHost);</span><br><span class="line">        <span class="comment">// 异步连接延时配置</span></span><br><span class="line">        builder.setRequestConfigCallback(requestConfigBuilder -&gt; &#123;</span><br><span class="line">            requestConfigBuilder.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">            requestConfigBuilder.setSocketTimeout(<span class="number">5000</span>);</span><br><span class="line">            requestConfigBuilder.setConnectionRequestTimeout(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">return</span> requestConfigBuilder;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 异步连接数配置</span></span><br><span class="line">        builder.setHttpClientConfigCallback(httpClientBuilder -&gt; &#123;</span><br><span class="line">            httpClientBuilder.setMaxConnTotal(<span class="number">100</span>);</span><br><span class="line">            httpClientBuilder.setMaxConnPerRoute(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(builder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聚合查询示例"><a href="#聚合查询示例" class="headerlink" title="聚合查询示例"></a>聚合查询示例</h1><p>业务需求：<br>1、按照查询条件，查询某服务的访问次数<br>2、查询该服务的请求体总长度，用于计量计费<br>给出单元测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RestHighLevelClient client;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;sg-access-*&quot;</span>);</span><br><span class="line"><span class="comment">//构建查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按时间聚合，求TX的和</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">queryBuilder</span> <span class="operator">=</span> QueryBuilders.boolQuery().must(QueryBuilders.matchPhraseQuery(<span class="string">&quot;paasid&quot;</span>, <span class="string">&quot;111&quot;</span>))</span><br><span class="line">                .must(QueryBuilders.matchQuery(<span class="string">&quot;srvid&quot;</span>, <span class="string">&quot;111&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">AggregationBuilder</span> <span class="variable">aggregation</span> <span class="operator">=</span> AggregationBuilders.filter(<span class="string">&quot;term&quot;</span>, queryBuilder);</span><br><span class="line">        aggregation.subAggregation(AggregationBuilders.sum(<span class="string">&quot;reqLengthSum&quot;</span>).field(<span class="string">&quot;reqLength&quot;</span>));</span><br><span class="line"></span><br><span class="line">        sourceBuilder.aggregation(aggregation);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="type">Aggregations</span> <span class="variable">aggFilter</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line">            <span class="keyword">if</span> (aggFilter != <span class="literal">null</span> &amp;&amp; aggFilter.get(<span class="string">&quot;term&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ParsedFilter</span> <span class="variable">parsedFilter</span> <span class="operator">=</span> aggFilter.get(<span class="string">&quot;term&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;查询出请求的次数：&quot;</span> + parsedFilter.getDocCount());</span><br><span class="line">                <span class="type">ParsedSum</span> <span class="variable">sum</span> <span class="operator">=</span> (ParsedSum) parsedFilter.getAggregations().getAsMap().get(<span class="string">&quot;reqLengthSum&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;请求体的总大小 ：&quot;</span> +  sum.getValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(searchResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417143241.png" alt="image.png"></p><p>可以看出，我们可以通过Java代码，对ES的数据进行条件查询，并对索引进行通配匹配查询，并使用聚合方法进行聚合运算。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>橘子说</title>
      <link href="/2022/04/08/%E6%A9%98%E5%AD%90%E8%AF%B4/"/>
      <url>/2022/04/08/%E6%A9%98%E5%AD%90%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<p>一直以来我都喜欢简单而又可以稳定供应的食物。<br>比如橘子这样一整个冬天所有水果店都有卖的水果，气味强烈、酸甜，颜色鲜艳得像一簇簇小火苗，可以迅速刺激到我的味蕾，让我感到欣快。<br>或者是随处可见的包子铺卖的肉包子，热气腾腾地蒸出来，五块钱以内就可以买到，放在手里、烘热手掌，只吃一个就是一顿很好的早餐。<br>它们是如此安全，不要求太高的付出，又是如此触手可及。在我忍耐和等待的时候，它们就像是安慰剂一样让我放松。<br>所以就算怕冷，我也会喜欢冬天。<br>一直以来我都讨厌计算不出期望的随机。<br>没办法做出合适的期望让我感到焦虑。不希望有不切实际的期望，因为很害怕失望。我想要的是可控范围内的变化，可以预估出的损失，<br>就算已经给自己留了足够多的退路，我也会害怕充满了随机的未来。<br>可是未来正是一个个现在的瞬间积累而成的，不是吗？<br>给我的美好的现在瞬间够多了，那么就算害怕，我也会期待着未来。<a href="../../../travel-trace/index.html">index.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java | 记录基于CAS登录模块的几个安全问题的解决</title>
      <link href="/2021/12/12/Java%20%E8%AE%B0%E5%BD%95%E5%9F%BA%E4%BA%8ECAS%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
      <url>/2021/12/12/Java%20%E8%AE%B0%E5%BD%95%E5%9F%BA%E4%BA%8ECAS%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>手头的项目的登录模块，基本都是集成了部门内封装出的基于CAS的中心鉴权组件，在安全扫描中暴露了一些问题，有些是因为没有合理的使用这一开源框架导致的，有的是通用的问题，在此记录问题和解决方案。<br>1、密码明文传输问题<br>2、页面无验证码、无登录防抖，易被暴力破解问题<br>3、开放重定向问题</p><h1 id="密码明文传输"><a href="#密码明文传输" class="headerlink" title="密码明文传输"></a>密码明文传输</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>用户输入的密码，虽然在页面的输入框中显示为“*****”，却在接口层面通过明文传输，易被抓包工具捕获。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>使用<code>RSA</code>非对称加密，前端对密码进行加密，后端解密后，再与数据库存储的凭证进行比对。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>前端是在CAS项目中的casLoginView中进行改造，使用JavaScript (JQuery)  + HTML + CSS；<br>1、 改造登录结构代码 - 将原有的登录表单中的按钮进行隐藏，增加一个用于点击的登录按钮；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span> = <span class="string">&quot;fm1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input_user_name&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">tabindex</span>=<span class="string">&quot;1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名称&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;n&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">maxlength</span>=<span class="string">&quot;30&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input_password&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">placeholder</span>=<span class="string">&quot;请输入登录密码&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;p&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">maxlength</span>=<span class="string">&quot;28&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;login_normal1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">accesskey</span>=<span class="string">&quot;l&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">value</span>=<span class="string">&quot;登 录&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;login_normal&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;l&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">value</span>=<span class="string">&quot;登 录&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，需要将原有的密码输入框input的name属性置为空字符串，或删去该属性，否则提交时会提交一个密文和一个明文。<br>2、引入用于加密的JS<br>下载JS，放在common&#x2F;js目录下，并在页面引入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;common/js/jsencrypt.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、登录逻辑改造<br>原先登录是触发了表单提交后，浏览器自带的<code>post</code>事件，将原有按钮进行隐藏，监听显示出来的登录按钮的点击事件。<br>可以使用回车监听方法，禁用原有回车登录方法，或也调用加密密码后提交的逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">location</span> !== self.<span class="property">location</span>) &#123;</span><br><span class="line">            top.<span class="property">location</span>.<span class="title function_">replace</span>(self.<span class="property">location</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">&quot;#login_normal1&quot;</span>).<span class="title function_">click</span>( <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_">checkSubmit</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 登陆验证之前，对密码进行加密处理</span></span><br><span class="line">            <span class="keyword">const</span> password = <span class="title function_">encrypt</span>($(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">val</span>())</span><br><span class="line">            $(<span class="string">&#x27;#login_normal&#x27;</span>)</span><br><span class="line">                .<span class="title function_">attr</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .<span class="title function_">attr</span>(<span class="string">&#x27;value&#x27;</span>, password)</span><br><span class="line">            $(<span class="string">&#x27;#login_normal&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">password</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> encrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>()</span><br><span class="line">          <span class="comment">// 此处需要填入自己生成的密钥。</span></span><br><span class="line">        encrypt.<span class="title function_">setPublicKey</span>(<span class="string">``</span>);</span><br><span class="line">        <span class="keyword">return</span> encrypt.<span class="title function_">encrypt</span>(password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">var</span> password = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="string">&#x27;&#x27;</span>||username==<span class="literal">null</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">focus</span>();</span><br><span class="line">            $(<span class="string">&#x27;#msg1&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;请输入用户名！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="string">&#x27;&#x27;</span>||password==<span class="literal">null</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">focus</span>();</span><br><span class="line">            $(<span class="string">&#x27;#msg1&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;请输入密码！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>后端仅需要在验证密码之前，对加密后的密码进行解密即可。<br>下面给出解密方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">decrypt</span><span class="params">(String password)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> <span class="type">BASE64Decoder</span> <span class="variable">base64Decoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>();</span><br><span class="line">    <span class="type">byte</span>[] keyByte = base64Decoder.decodeBuffer(<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyByte);</span></span><br><span class="line"><span class="string">    KeyFactory keyFactory = KeyFactory.getInstance(&quot;</span>RSA<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    RSAPrivateKey privateKey = (RSAPrivateKey)keyFactory.generatePrivate(keySpec);</span></span><br><span class="line"><span class="string">    byte[] dataByte = base64Decoder.decodeBuffer(password);</span></span><br><span class="line"><span class="string">    Cipher cipher = Cipher.getInstance(&quot;</span>RSA<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    cipher.init(Cipher.DECRYPT_MODE, privateKey);</span></span><br><span class="line"><span class="string">    byte[] result = cipher.doFinal(dataByte);</span></span><br><span class="line"><span class="string">    return new String(result);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="添加验证码"><a href="#添加验证码" class="headerlink" title="添加验证码"></a>添加验证码</h1><h2 id="后端改造"><a href="#后端改造" class="headerlink" title="后端改造"></a>后端改造</h2><p>集成验证码，对于后端来说没什么难度。引入<code>easy-captcha</code>或其他依赖；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.whvcse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-captcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接口暴露：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.wf.captcha.utils.CaptchaUtil;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/capcha/code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">captchaCode</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CaptchaUtil.out(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/captcha/check&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">captchaCode</span><span class="params">(<span class="meta">@RequestParam</span> String code, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (CaptchaUtil.ver(code, request)) &#123;</span><br><span class="line">      success = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  CaptchaUtil.clear(request);</span><br><span class="line">  <span class="type">String</span> <span class="variable">successStr</span> <span class="operator">=</span>  success ? <span class="string">&quot;ok&quot;</span> : <span class="string">&quot;error&quot;</span>;</span><br><span class="line">  System.out.println(<span class="string">&quot;验证码验证结果 = &quot;</span>  + successStr);</span><br><span class="line">  <span class="keyword">return</span> ResponseEntity.ok(successStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="前端改造"><a href="#前端改造" class="headerlink" title="前端改造"></a>前端改造</h2><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417143825.png" alt="image.png"></p><p>1、对前端登录页面稍加改造；可以进行样式的自定义适配。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-p captcha&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input__prepend captcha&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;captcha&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">class</span>=<span class="string">&quot;captcha&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;p&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxlength</span>=<span class="string">&quot;4&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;cimg&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">src</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">title</span>=<span class="string">&quot;看不清？点击更换另一个。&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、增加进入页面后，请求验证码、校验验证码、点击更换验证码等交互逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">location</span> !== self.<span class="property">location</span>) &#123;</span><br><span class="line">            top.<span class="property">location</span>.<span class="title function_">replace</span>(self.<span class="property">location</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">&quot;#login_normal1&quot;</span>).<span class="title function_">click</span>( <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_">checkSubmit</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 验证码验证失败</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_">validateCaptcha</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 登陆验证之前，对密码进行加密处理</span></span><br><span class="line">            <span class="keyword">const</span> password = <span class="title function_">encrypt</span>($(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">val</span>())</span><br><span class="line">            $(<span class="string">&#x27;#login_normal&#x27;</span>)</span><br><span class="line">                .<span class="title function_">attr</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .<span class="title function_">attr</span>(<span class="string">&#x27;value&#x27;</span>, password)</span><br><span class="line">            $(<span class="string">&#x27;#login_normal&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;#cimg&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">initCaptcha</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">initCaptcha</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">initCaptcha</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> _codeImage = $(<span class="string">&#x27;#cimg&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> rand = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">&#x27;/captcha/code?rand=&#x27;</span> + rand;</span><br><span class="line">        _codeImage.<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对验证码进行验证</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">validateCaptcha</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> isValid = <span class="literal">false</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/captcha/check?code=&#x27;</span> + $(<span class="string">&#x27;#captcha&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="attr">async</span>:<span class="literal">false</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(data === <span class="string">&#x27;ok&#x27;</span>)&#123;</span><br><span class="line">                        isValid =  <span class="literal">true</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        $(<span class="string">&#x27;#msg1&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;验证码输入错误，请重新输入！&#x27;</span>);</span><br><span class="line">                        <span class="comment">//密码验证失败后，重新请求验证码</span></span><br><span class="line">                        <span class="title function_">initCaptcha</span>()</span><br><span class="line">                        isValid =  <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> isValid</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">var</span> password = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">var</span> captcha = $(<span class="string">&quot;#captcha&quot;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">if</span> (username &gt; <span class="string">&#x27;&#x27;</span> &amp;&amp; password &gt; <span class="string">&#x27;&#x27;</span> &amp;&amp; captcha &gt; <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#msg1&#x27;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!username || !password)&#123;</span><br><span class="line">                $(<span class="string">&#x27;#msg1&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;请输入您的用户名和密码&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&#x27;#msg1&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;请输入验证码&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以看到，在用户触发登录动作时，先校验了验证码是否合法，再去调用后台登录接口，这样可以一定程度上避免被暴力破解。</p><h1 id="开放重定向问题"><a href="#开放重定向问题" class="headerlink" title="开放重定向问题"></a>开放重定向问题</h1><blockquote><p> 开放重定向问题的定义：<a href="https://www.wangan.com/articles/1132">https://www.wangan.com/articles/1132</a></p></blockquote><p>简而言之，就是在我们服务的登录、登出地址中，将原本的服务地址${MY_SERVICE}替换成其他，也可以被CAS后端转发跳转。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="string">//$&#123;CAS&#125;/cas/login?service=http://$&#123;MY_SERVICE&#125;</span></span><br><span class="line"><span class="attr">http</span>:<span class="string">//$&#123;CAS&#125;/cas/logout?service=http://$&#123;MY_SERVICE&#125;</span></span><br></pre></td></tr></table></figure><p>而经过排除和阅读CAS文档，发现是在我们配置认证客户端定义JSON时，将所有的serviceId都配成可以通配所有网址导致的！</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@class&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;org.apereo.cas.services.RegexRegisteredService&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;serviceId&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;^(https|imaps|http)://.*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;evaluationOrder&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;theme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>容易得出，<code>serviceId</code>的值是一个正则表达式，仅当能匹配到正则时，才会进行跳转，不然会显示出：<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417143906.png" alt="image.png"></p><p>根据官网的建议，应该将<code>serviceId</code>配置得越精确越好，配置成具体的网址，就能避免重定向到其他网站的问题了。<br>那么问题又来了，在进行部署之前，我们可能并不知道这个网址。如果已经进行了代码打包，就改不了这个配好的网址了，有什么办法从外部数据源或配置文件中读取呢？这样更改了其他服务的部署地址，CAS不需要重新打包，如果可以读取到动态的数据源，CAS组件甚至不用重启。<br>查阅官网：<a href="https://apereo.github.io/cas/5.3.x/planning/Getting-Started.html">https://apereo.github.io/cas/5.3.x/planning/Getting-Started.html</a><br>关于Service的管理中，我们可以看到多种存储方案：<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417143925.png" alt="image.png"></p><p>借助配置 + 内存管理方案，可以实现服务的动态配置。<br>给出我的实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;supportServiceId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String supportServiceId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> List <span class="title function_">inMemoryRegisteredServices</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">List</span> <span class="variable">services</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">RegexRegisteredService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RegexRegisteredService</span>();</span><br><span class="line">    service.setServiceId(supportServiceId);</span><br><span class="line">    service.setName(<span class="string">&quot;moss&quot;</span>);</span><br><span class="line">    service.setId(<span class="number">1L</span>);</span><br><span class="line">    service.setTheme(<span class="string">&quot;moss&quot;</span>);</span><br><span class="line">    service.setDescription(<span class="string">&quot;MOSS2.0语义化系统&quot;</span>);</span><br><span class="line">    service.setEvaluationOrder(<span class="number">1</span>);</span><br><span class="line">    services.add(service);</span><br><span class="line">    <span class="keyword">return</span> services;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就可以从CAS的服务配置中读取，当然也可以配置一个服务列表。需要将原有的<code>JSON</code>配置删去。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>分享了几个改造的方法，需要在现有的框架下进行尽量小的改动，后续可以考虑提取成通用的JS代码，降低其他服务的改造成本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CICD Jenkins Shared Libraries &amp; Http-request插件使用</title>
      <link href="/2021/11/23/CICD%20Jenkins%20Shared%20Libraries%20&amp;%20Http-request%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/11/23/CICD%20Jenkins%20Shared%20Libraries%20&amp;%20Http-request%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前篇：<br>1、Jenkins的搭建和简介：<a href="https://www.jianshu.com/p/ca4886e11720">https://www.jianshu.com/p/ca4886e11720</a><br>2、Jenkins Gitlab集成，使用WebHook触发构建：<a href="https://www.jianshu.com/p/ca4886e11720">https://www.jianshu.com/p/ca4886e11720</a></p></blockquote><p>之前我搭建的开发环境的Jenkins，经过一年多时间的积累和组内使用，已经为二十多个项目提供了部署运维环境。在需要快速迭代部署的时候，Jenkins的规范化和自动化执行节约了大量的时间成本。</p><h1 id="目前存在问题"><a href="#目前存在问题" class="headerlink" title="目前存在问题"></a>目前存在问题</h1><p>1、搭建流水线时，大部分步骤和代码都是可以复用的，但没有复用的方法，不得不进行大段代码的复制粘贴。<br>2、代码部署到托管平台逻辑未能解耦，如果托管平台变更，目前所有存量脚本都需要变更。<br>3、调用HTTP接口的脚本都使用<code>shell</code>中的<code>curl</code>指令实现，存在较多的转义字符和参数拼接，代码可读性较低，不容易维护，并且很容易出错，接口的请求结果也需要自己处理。</p><p>经过调研，使用了公用共享库（ <code>Shared Libraries</code> ）和<code>http-request</code>插件，完美解决了这些问题。</p><h1 id="Shared-Libraries-配置和使用"><a href="#Shared-Libraries-配置和使用" class="headerlink" title="Shared Libraries 配置和使用"></a>Shared Libraries 配置和使用</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>进入Jenkins首页后，点击左侧【系统管理】；<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152626.png" alt="image.png"></p><p>搜索“Global pipeline Libraries”，找到共享仓库配置。</p><p>配置的地址是gitlab上的代码仓库，方便公用脚本的版本管理和维护。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152637.png" alt="image.png"></p><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><p>编写规范和目录结构，参考：<a href="https://www.jenkins.io/zh/doc/book/pipeline/shared-libraries/">https://www.jenkins.io/zh/doc/book/pipeline/shared-libraries/</a><br>以下为简单的使用示范：<br>1、在脚本代码仓库中，添加：<code>src/deploy/DeployHelper.groovy</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> hello() &#123;</span><br><span class="line">    echo <span class="string">&quot;Hello World!!!!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在流水线脚本中，头部增加引入：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Library</span>(<span class="string">&#x27;SharedLibraries&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> deploy.DeployHelper</span><br></pre></td></tr></table></figure><p>在流水线脚本中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script &#123;</span><br><span class="line">    <span class="type">DeployHelper</span> <span class="variable">deployHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeployHelper</span>()</span><br><span class="line">    deployHelper.hello()   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：<br>1、可以灵活使用Jenkins中已经安装的插件，不需要另外的依赖。<br>2、不需要另外给脚本授权（原本脚本在sandbox中执行，使用部分groovy公共类库时需要另外的授权。）</p><h1 id="http-request"><a href="#http-request" class="headerlink" title="http-request"></a>http-request</h1><p>在脚本内部声明式地调用HTTP接口。<br><a href="https://www.jenkins.io/doc/pipeline/steps/http_request/">https://www.jenkins.io/doc/pipeline/steps/http_request&#x2F;</a><br>使用该插件要求的Jenkins版本较高，进行了升级。由于之前配置了清华镜像，无法自动升级，选择去官网下载了安装包后，替换Jenkins内安装包，之后重启即可。<br>http-request使用较为简单，下面给出两个比较特别的范例：<br>1、上传文件（注意：multipartName 为文件参数的名称）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> uploadBuildFile = httpRequest <span class="attr">contentType:</span> <span class="string">&#x27;APPLICATION_OCTETSTREAM&#x27;</span>,</span><br><span class="line">           <span class="symbol">httpMode:</span> <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">           <span class="symbol">consoleLogResponseBody:</span> <span class="literal">true</span>,</span><br><span class="line">           <span class="symbol">customHeaders:</span> [[<span class="attr">name:</span> <span class="string">&#x27;Authorization&#x27;</span>, <span class="attr">value:</span> <span class="string">&quot;basic $&#123;token&#125;&quot;</span>]],</span><br><span class="line">           <span class="symbol">url:</span> <span class="string">&quot;http://$&#123;ip&#125;/upload/$&#123;repoName&#125;&quot;</span>,</span><br><span class="line">           <span class="symbol">uploadFile:</span> <span class="string">&quot;$&#123;filepath&#125;&quot;</span>,</span><br><span class="line">           <span class="symbol">multipartName:</span> <span class="string">&quot;files&quot;</span></span><br></pre></td></tr></table></figure><p>2、参数payload为<code>JSONArray</code>：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.json.JsonOutput</span><br><span class="line"><span class="keyword">def</span> restartResponse = httpRequest <span class="attr">contentType:</span> <span class="string">&#x27;APPLICATION_JSON&#x27;</span>,</span><br><span class="line">            <span class="symbol">httpMode:</span> <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="symbol">consoleLogResponseBody:</span> <span class="literal">true</span>,</span><br><span class="line">            <span class="symbol">url:</span> <span class="string">&quot;http://$&#123;ip&#125;/status/reboot&quot;</span>,</span><br><span class="line">            <span class="symbol">customHeaders:</span> [[<span class="attr">name:</span> <span class="string">&#x27;Authorization&#x27;</span>, <span class="attr">value:</span> <span class="string">&quot;basic $&#123;token&#125;&quot;</span>]],</span><br><span class="line">            <span class="symbol">requestBody:</span> JsonOutput.toJson([[<span class="attr">a:</span> <span class="string">&quot;$&#123;ip&#125;&quot;</span>, <span class="attr">b:</span> [<span class="string">&quot;$&#123;serverEndpoint&#125;&quot;</span>]]])</span><br></pre></td></tr></table></figure><p> 值得注意的是，requestBody对应的参数，如果是JSONObject对应的JSONString，插件内部会自动进行反序列化，而如果是JSONArray，需要使用JsonOutput进行反序列化，不然会报参数错误。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>使用共享脚本库，进一步提高了运维效率，尽量避免重复的劳动，降低了脚本的维护成本。<br>Jenkins的灵活、易于拓展可以给我们的工作带来很多方便，使用起来也是非常的有意思~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微前端qiankun框架接入实战</title>
      <link href="/2021/08/26/%E5%BE%AE%E5%89%8D%E7%AB%AFqiankun%E6%A1%86%E6%9E%B6%E6%8E%A5%E5%85%A5%E5%AE%9E%E6%88%98/"/>
      <url>/2021/08/26/%E5%BE%AE%E5%89%8D%E7%AB%AFqiankun%E6%A1%86%E6%9E%B6%E6%8E%A5%E5%85%A5%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>随着项目的演进，前端的业务架构也会变得更加庞大、复杂，并常常会出现需要模块复用的场景：<br>1、组件复用，例如统一的导航栏、侧边栏、路由权限处理逻辑等<br>2、模块级别复用，例如统一的用户管理模块、文档中心等<br>3、系统级别复用，总的系统由多个系统组合而成，不同的系统可能由不同的开发团队维护、使用不同的技术栈开发。</p><p>除了代码层面复用（复制粘贴），也需要更加完善的模块和系统复用方案。引入微前端，将代码根据业务逻辑划分至不同的项目之中进行维护，能够有效的降低维护难度，每个系统既可以独立运行、独立部署，也可以组合起来构成一个完整的系统，能够更快速地响应客户的需求。</p><hr><p>之前页面嵌入都使用<code>iframe</code>，简捷易用，两行代码就可以搞定，但在加载速度方面略有些不尽人意。可以看这篇➡<a href="https://www.yuque.com/kuitos/gky7yw/gesexv">Why Not Iframe</a><br>听说隔壁项目组都已经用<code>qiankun</code>用的飞起了，我们必不能落后于人~于是在赶鸭子上架下，使用了<code>qiankun</code>进行了一次完整的实践。</p><h1 id="实战步骤"><a href="#实战步骤" class="headerlink" title="实战步骤"></a>实战步骤</h1><h2 id="什么是qiankun"><a href="#什么是qiankun" class="headerlink" title="什么是qiankun"></a>什么是<code>qiankun</code></h2><p><a href="https://qiankun.umijs.org/zh/guide">qiankun官方文档</a></p><blockquote><p><code>qiankun</code>是基于<code>single-spa</code>的封装，可以参考：<a href="https://single-spa.js.org/">https://single-spa.js.org/</a> .<br><code>single-spa</code>是一个将多个单页面应用聚合为一个整体应用的 <code>JavaScript</code> 微前端框架。<br>我们每个前端项目最终都会被打包成一个单页应用，该应用以index.html为入口，在其中引入打包后的js和css文件。</p></blockquote><h2 id="前端代码改造"><a href="#前端代码改造" class="headerlink" title="前端代码改造"></a>前端代码改造</h2><p><code>qiankun</code>在逻辑上，将前端应用划分为主应用（又称为基座应用）和微应用，主应用拉取微应用打包后的js，并设置一定的规则来控制微应用的生命周期（装载、卸载等），微应用则要暴露出生命周期钩子函数，供主函数调用。</p><p>在主应用下安装依赖:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i qiankun --save-dev</span><br></pre></td></tr></table></figure><h3 id="主应用改造"><a href="#主应用改造" class="headerlink" title="主应用改造"></a>主应用改造</h3><h4 id="1、改造入口文件"><a href="#1、改造入口文件" class="headerlink" title="1、改造入口文件"></a>1、改造入口文件</h4><p><code>mainApp/main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&quot;qiankun&quot;</span></span><br><span class="line"><span class="keyword">let</span> msg = &#123;</span><br><span class="line">   <span class="comment">// 传入子应用的内容</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册子应用</span></span><br><span class="line"><span class="title function_">registerMicroApps</span>(</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;turing-permission&quot;</span>,</span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&quot;//127.0.0.1:9527&quot;</span>,</span><br><span class="line">            <span class="comment">//  指定子应用的挂载容器</span></span><br><span class="line">            <span class="attr">container</span>: <span class="string">&#x27;#subApp&#x27;</span>,</span><br><span class="line">            <span class="attr">activeRule</span>: <span class="string">&quot;#/turing-permission&quot;</span>,</span><br><span class="line">            <span class="attr">props</span>: msg</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;turing-moss&quot;</span>,</span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&quot;//127.0.0.1:9528&quot;</span>,</span><br><span class="line">            <span class="comment">//  指定子应用的挂载容器</span></span><br><span class="line">            <span class="attr">container</span>: <span class="string">&#x27;#subApp&#x27;</span>,</span><br><span class="line">            <span class="attr">activeRule</span>: <span class="string">&quot;#/turing-moss&quot;</span>,</span><br><span class="line">            <span class="attr">props</span>: msg</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = url =&gt; &#123; <span class="keyword">return</span> <span class="title function_">fetch</span>(url, &#123; <span class="attr">referrerPolicy</span>: <span class="string">&#x27;origin-when-cross-origin&#x27;</span> &#125;) &#125;;</span><br><span class="line"><span class="title function_">start</span>(&#123; <span class="attr">prefetch</span>: <span class="literal">true</span>, <span class="attr">sandbox</span>: &#123; <span class="attr">experimentalStyleIsolation</span>: <span class="literal">true</span> &#125;, <span class="attr">fetch</span>: request &#125;);</span><br></pre></td></tr></table></figure><p>说明：<br>参看<a href="https://qiankun.umijs.org/zh/api">qiankunAPI说明文档</a></p><ul><li><p><code>registerMicroApps</code>方法接收子应用列表。 参数解释：<br>1、name - 子应用名称<br>2、entry - 主应用使用fetch请求，从该入口获取子应用的js、css等资源，注意该地址需要去掉协议（http&#x2F;https）。部署到线上时，该地址可填写为部署地址IP + 端口 + &#x2F;subApp的形式，使用nginx代理，后面说到部署时会给出示例。此处为本地开发时的地址。<br>3、container - 子应用挂载的DOM根节点。需要注意在子应用加载时，该DOM节点必须存在，否则会报子应用挂载失败错误<br>4、activeRule - 触发子应用挂载的条件。如果子应用使用的路由为hash模式，则需要加<code>#</code>，如果使用的是history 模式，则不需要加<code>#</code>。本次实战使用的路由模式均为hash模式（也是默认的模式）<br>该方法可以自定义方法实现<br>5、props： 可以定义主应用传入到子应用的值。可以将主应用的store和router都传过去。</p></li><li><p><code>start</code>方法<br>参考API文档进行配置。这里踩了一个坑，如果沙箱隔离配置为 <code>sandbox: &#123; strictStyleIsolation: true &#125;</code>,可能会导致element-UI组件样式被影响（下拉框挂到左上角）。</p></li></ul><h4 id="2、通信"><a href="#2、通信" class="headerlink" title="2、通信"></a>2、通信</h4><p>应用在鉴权中，用于同步登录状态和传递token（若使用同一个域下的Cookie来鉴权，此处可忽略）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import qiankunActions from &#x27;@/store/qiankun&#x27;</span><br><span class="line">//   登录成功后，获取到访问令牌</span><br><span class="line">const &#123; permissionList, accessToken &#125; = await store.dispatch(&#x27;user/getInfo&#x27;)</span><br><span class="line">qiankunActions.setGlobalState(&#123; token: accessToken &#125;);</span><br></pre></td></tr></table></figure><h4 id="3、提供子应用挂载的根节点"><a href="#3、提供子应用挂载的根节点" class="headerlink" title="3、提供子应用挂载的根节点"></a>3、提供子应用挂载的根节点</h4><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;head-top v-if=&quot;$route.name != &#x27;Home&#x27;&quot; /&gt;</span><br><span class="line">        &lt;router-view /&gt;</span><br><span class="line">        &lt;div  id=&quot;subApp&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>注意：如果使用了<router-view/>，该节点需要与最高层级的<router-view>同级！</p><h3 id="子应用改造"><a href="#子应用改造" class="headerlink" title="子应用改造"></a>子应用改造</h3><p>子应用无需安装qiankun依赖</p><h4 id="1、入口文件改造"><a href="#1、入口文件改造" class="headerlink" title="1、入口文件改造"></a>1、入口文件改造</h4><p><code>subApp/main.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">let instance;</span><br><span class="line">function render(props) &#123;</span><br><span class="line">  let container = props ? props.container : undefined;</span><br><span class="line">  instance = new Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    render: h =&gt; h(App),</span><br><span class="line">  &#125;).$mount(container ? container.querySelector(&#x27;#app&#x27;) : &#x27;#app&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if (!window.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line">export async function bootstrap() &#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export async function mount(props) &#123;</span><br><span class="line">  props.onGlobalStateChange((state, prevState) =&gt; &#123;</span><br><span class="line">    store.commit(&#x27;user/SET_TOKEN&#x27;, prevState.token)</span><br><span class="line">  &#125;, true);</span><br><span class="line">  render(props);</span><br><span class="line">&#125;</span><br><span class="line">export async function unmount() &#123;</span><br><span class="line">  console.log(&#x27;[turing-permission] unmounted&#x27;);</span><br><span class="line">  instance.$destroy();</span><br><span class="line">  instance = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码逻辑易得，在子应用中暴露出的mount钩子方法中执行了Vue的render方法。该方法根据传入的props（会将container传入），找到对应的dom节点，在该dom节点下插入子应用的模板代码，再执行Vue的mount方法。需要区分两个mount：一个是子应用的挂载，一个是Vue应用的挂载。<br>通过<code>window.__POWERED_BY_QIANKUN__</code>，可以判断是否是被嵌入在主应用中运行。<br><code>props.onGlobalStateChange((state, prevState) =&gt; &#123;     store.commit(&#39;user/SET_TOKEN&#39;, prevState.token)   &#125;, true);</code>第二个参数是必须的，用于从主应用中获取到token。</p><h4 id="2、router改造"><a href="#2、router改造" class="headerlink" title="2、router改造"></a>2、router改造</h4><p>若使用history模式，<code>mode: &#39;history&#39;</code>,需要增加<code>base: &#39;/sub-app&#39;</code><br><code>router/index.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const createRouter = () =&gt;&#123;</span><br><span class="line">    // 微应用运用的路由是只读的，需要先进行全量的定义</span><br><span class="line">    let actualRoutes = window.__POWERED_BY_QIANKUN__ ?constantRoutes.concat(asyncRoutes) : constantRoutes;</span><br><span class="line">    let prefix = &quot;/sub-app&quot;;</span><br><span class="line">    //  若需要</span><br><span class="line">    if(window.__POWERED_BY_QIANKUN__)&#123;</span><br><span class="line">        actualRoutes.forEach(item =&gt; &#123;</span><br><span class="line">            item.path = prefix + item.path;</span><br><span class="line">            item.redirect = prefix + item.redirect;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return new Router(&#123;</span><br><span class="line">        mode: &#x27;hash&#x27;,</span><br><span class="line">        routes: actualRoutes</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">const router = createRouter();</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h4 id="3、打包地址改造"><a href="#3、打包地址改造" class="headerlink" title="3、打包地址改造"></a>3、打包地址改造</h4><p><code>vue.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const &#123; name &#125; =require(`./package`);</span><br><span class="line">...</span><br><span class="line"> configureWebpack: &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        &#x27;@&#x27;: resolve(&#x27;src&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      // 把子应用打包成 umd 库格式</span><br><span class="line">      library: `$&#123;name&#125;-[name]`,</span><br><span class="line">      libraryTarget: &#x27;umd&#x27;,</span><br><span class="line">      jsonpFunction: `webpackJsonp_$&#123;name&#125;`,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>新增<code>public-path.js</code>，并引入到<code>main.js</code>中<br><code>src/public-path.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (window.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、请求改造"><a href="#4、请求改造" class="headerlink" title="4、请求改造"></a>4、请求改造</h4><p>1）baseUrl改造（方便之后的代理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let baseURL = window.__POWERED_BY_QIANKUN__ ? &#x27;/turing-moss&#x27; + process.env.VUE_APP_BASE_API : process.env.VUE_APP_BASE_API</span><br><span class="line">// 创建axios实例</span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line">  baseURL: baseURL, // api的base_url</span><br><span class="line">  timeout: 300000 // 请求超时时间</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>鉴权请求头改造，适配改造后的鉴权方案<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function createHeader(token, isformdata) &#123;</span><br><span class="line">  var contentType = isformdata ? &#x27;multipart/form-data&#x27; : &#x27;application/json&#x27;</span><br><span class="line">  let headers = &#123;</span><br><span class="line">    &#x27;Content-Type&#x27;: contentType,</span><br><span class="line">    &#x27;time&#x27;: new Date().getTime(),</span><br><span class="line">    &#x27;salt&#x27;: rdNum(6),</span><br><span class="line">  &#125;</span><br><span class="line">  if (window.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">    headers.Authorization = store.getters.token</span><br><span class="line">    headers.useToken = true</span><br><span class="line">  &#125;</span><br><span class="line">  return headers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="后端代码改造"><a href="#后端代码改造" class="headerlink" title="后端代码改造"></a>后端代码改造</h2><p>主要是鉴权改造。<br>鉴权顺序：<br>用户在主应用登录➡主应用后端生成令牌传递给前端➡前端微应用共享该令牌，在请求微应用后端时携带➡微应用后端拿到令牌后，请求主应用接口，判断是否合法，并获取用户信息</p><p>原先的鉴权方案都是CAS鉴权。</p><h3 id="主应用后端"><a href="#主应用后端" class="headerlink" title="主应用后端"></a>主应用后端</h3><h4 id="1、生成token，并在请求用户信息接口中返回给前端（使用OAuth2）"><a href="#1、生成token，并在请求用户信息接口中返回给前端（使用OAuth2）" class="headerlink" title="1、生成token，并在请求用户信息接口中返回给前端（使用OAuth2）"></a>1、生成token，并在请求用户信息接口中返回给前端（使用OAuth2）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  UserDetails userDetails = domainUserDetailsService.createSpringSecurityUser(userInfoDTO);</span><br><span class="line">                Authentication userAuth = new </span><br><span class="line">PreAuthenticatedAuthenticationToken(userDetails,userDetails.getPassword(),userDetails.getAuthorities());</span><br><span class="line">String token = tokenProvider.createToken(userAuth,true);</span><br></pre></td></tr></table></figure><h4 id="2、提供内部鉴权接口"><a href="#2、提供内部鉴权接口" class="headerlink" title="2、提供内部鉴权接口"></a>2、提供内部鉴权接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/inner/tokenValid&quot;)</span><br><span class="line"> AuthResp validToken(String token)&#123;</span><br><span class="line">     System.out.println(token);</span><br><span class="line">     if(tokenProvider.validateToken(token))&#123;</span><br><span class="line">         Authentication authentication = tokenProvider.getAuthentication(token);</span><br><span class="line">         String accountName = authentication.getName();</span><br><span class="line">         System.out.println(authentication);</span><br><span class="line">         return AuthResp.builder().accountName(accountName)</span><br><span class="line">                 .isAuth(true).build();</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">         //  权限校验失败</span><br><span class="line">         return AuthResp.builder().accountName(&quot;&quot;)</span><br><span class="line">                 .isAuth(false).build();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="微应用后端"><a href="#微应用后端" class="headerlink" title="微应用后端"></a>微应用后端</h3><h4 id="定义优先级高于CasFilter的自定义过滤器进行鉴权"><a href="#定义优先级高于CasFilter的自定义过滤器进行鉴权" class="headerlink" title="定义优先级高于CasFilter的自定义过滤器进行鉴权"></a>定义优先级高于CasFilter的自定义过滤器进行鉴权</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Order(0)</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class TokenAuthorFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    UserService userService;</span><br><span class="line">    @Resource</span><br><span class="line">    AuthClient authClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span><br><span class="line">        throws IOException, ServletException &#123;</span><br><span class="line">        String accessToken = ((RequestFacade) servletRequest).getHeader(&quot;Authorization&quot;);</span><br><span class="line">        HttpSession session = ((RequestFacade) servletRequest).getSession();</span><br><span class="line">        if(((RequestFacade) servletRequest).getHeader(&quot;useToken&quot;)!=null &amp;&amp; ((RequestFacade) servletRequest).getHeader(&quot;useToken&quot;).equals(&quot;true&quot;))&#123;</span><br><span class="line">            log.info(&quot;进入微前端鉴权逻辑&quot;);</span><br><span class="line">            if(StringUtils.isNotBlank(accessToken) &amp;&amp; session.getAttribute(AbstractCasFilter.CONST_CAS_ASSERTION) == null) &#123;</span><br><span class="line">                // 能够获取到token</span><br><span class="line">               AuthResp authResp = authClient.authToken(accessToken);</span><br><span class="line">                if (authResp.getIsAuth()) &#123;</span><br><span class="line">                    String accountName = authResp.getAccountName();</span><br><span class="line">                    Assertion assertion = new AssertionImpl(accountName);</span><br><span class="line">                    session.setAttribute(AbstractCasFilter.CONST_CAS_ASSERTION, assertion);</span><br><span class="line">                    // assertion 非空：从assertion中获取数据</span><br><span class="line">                    log.debug(&quot;从permission获取当前用户信息，用户名称 = &#123;&#125;&quot;, accountName);</span><br><span class="line">                    session.setAttribute(Constants.SESSION_KEY,userService.getUserFullyByAccountName(accountName));</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    throw new RuntimeException(&quot;qiankun主应用鉴权失败！&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处逻辑：识别到携带<code>useToken</code>头的请求（此处头的名称支持自定义），请求主应用的后台，进行token的合法性校验，通过则执行后续逻辑，不通过抛出异常，前端跳转主应用的登录页。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>将main.js中微应用的地址改为&#x2F;&#x2F;${IP}&#x2F;subApp的形式，使用nginx进行部署。<br>配置（配置到server 80或 443下（https）），将subAppIp设置为微服务的地址。<br><img src="https://img-blog.csdnimg.cn/img_convert/a79582d6e748fdd54a9ccc637682f4ae.png" alt="nginx配置参考"></p><p>本地进行联调时，需要将proxyTable代理至微服务地址。<br>至此，接入完成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ES6  使用展开运算符完成全平台校验重名逻辑封装</title>
      <link href="/2021/07/08/JavaScript%20ES6%20%20%E4%BD%BF%E7%94%A8%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AE%8C%E6%88%90%E5%85%A8%E5%B9%B3%E5%8F%B0%E6%A0%A1%E9%AA%8C%E9%87%8D%E5%90%8D%E9%80%BB%E8%BE%91%E5%B0%81%E8%A3%85/"/>
      <url>/2021/07/08/JavaScript%20ES6%20%20%E4%BD%BF%E7%94%A8%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AE%8C%E6%88%90%E5%85%A8%E5%B9%B3%E5%8F%B0%E6%A0%A1%E9%AA%8C%E9%87%8D%E5%90%8D%E9%80%BB%E8%BE%91%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在应用系统中创建业务对象时，需要填写表单，对于对象的名称、标识等，全平台往往有统一的功能规范。<br>例如：</p><ul><li>名称：统一为中文、不超过50字符、不能为空、不能与现有平台重复</li><li>标识：统一为英文，不超过50字符、不能为空、不能与现有平台重复<br>交互逻辑一致（填写名称&#x2F;标识后，调用后台接口进行判断，后台查询数据库后，返回是否存在重名数据（<code>true/false</code>）,存在重复则报表单校验错误，不允许表单提交），前端使用的组件也一致（使用<code>element-UI</code>的<code>Form</code>组件），公共逻辑清晰，于是我尝试进行统一的<strong>规则校验逻辑</strong>方法封装，简化了大量重复代码，在使用时用**展开运算符<code>spread(...)</code>**进行引入，保证了代码的优雅和简洁。</li></ul><h1 id="展开（spread）运算符"><a href="#展开（spread）运算符" class="headerlink" title="展开（spread）运算符"></a>展开（spread）运算符</h1><p>展开运算符是<code>JavaScript ES6</code>的特性，可以用于数组、字符串、对象的解构赋值。<br>具体使用逻辑请参考：<a href="https://github.com/ruanyf/es6tutorial/blob/3929f4f21148dcd2a10d2ebc722323a5dbd473f4/docs/array.md">扩展运算符</a></p><h1 id="校验逻辑方法定义"><a href="#校验逻辑方法定义" class="headerlink" title="校验逻辑方法定义"></a>校验逻辑方法定义</h1><h2 id="校验函数封装"><a href="#校验函数封装" class="headerlink" title="校验函数封装"></a>校验函数封装</h2><p>定义方法入参：<br>1、资源英文名称<br>用于拼接调用后端<code>RESTful</code>接口，例如：校验应用重复，后端定义接口URI为：<br><code>/api/applications/nameOrKeyExisted</code>，此时资源英文名称为<code>applications</code><br>2、资源中文名<br>用于页面提示回显，例如：表单中应用名称没有填写，提示：“请填写应用名称”，应用名称已存在，提示：“应用名称重复”，此时资源中文名为“应用”<br>3、附加参数</p><ul><li>有些资源限定为某类型下不能重复，或某个领域内不能重复，在调用判重接口时需要传递给后端。</li><li>prop参数，用于表单绑定的<code>prop</code>定义，如果不传，默认为name和key，允许传入自定义值。<br>方法前端源码（定义在通用的<code>util.js</code>中，在Vue工程中可以在<code>main.js</code>引入到全局中。）</li></ul><p>定义方法返回：<br>返回对象，对象中，键对应表单 <code>prop</code>属性，值是一个数组，包括多种规则（特殊字符校验、非空校验、重名校验等）<br>utils.js：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @entity 校验实体资源</span><br><span class="line"> * @entityName 校验实体中文名</span><br><span class="line"> * @options  调用校验接口，额外参数传递</span><br><span class="line"> */</span><br><span class="line">function getRules(entity, entityName,options) &#123;</span><br><span class="line">  let name = options?.nameProp || &#x27;name&#x27;</span><br><span class="line">  let key = options?.keyProp || &#x27;key&#x27;</span><br><span class="line">  let rules = &#123;&#125;;</span><br><span class="line">  rules[name] = validateRules(</span><br><span class="line">    &#x27;name&#x27;,</span><br><span class="line">    entity,</span><br><span class="line">    entityName,</span><br><span class="line">    options?.params</span><br><span class="line">  );</span><br><span class="line">  rules[key] = validateRules(</span><br><span class="line">    &#x27;key&#x27;,</span><br><span class="line">    entity,</span><br><span class="line">    entityName,</span><br><span class="line">    options?.params</span><br><span class="line">  );</span><br><span class="line">  return rules;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function validateRules(field, entity, entityName,extraParams) &#123;</span><br><span class="line">  let rules = [];</span><br><span class="line"></span><br><span class="line">  let requiredRule = &#123;</span><br><span class="line">    required: true,</span><br><span class="line">    message: `请输入$&#123;entityName&#125;$&#123;field === &#x27;key&#x27; ? &#x27;标识&#x27; : &#x27;名称&#x27;&#125;`,</span><br><span class="line">    trigger: &quot;blur&quot;,</span><br><span class="line">  &#125;;</span><br><span class="line">  if (field == &#x27;key&#x27;) &#123;</span><br><span class="line">    let maxLengthRule = &#123; max: 40, message: &quot;不得超过40个字符&quot;, trigger: &quot;blur&quot; &#125;;</span><br><span class="line">    rules.push(maxLengthRule);</span><br><span class="line">    rules.push(&#123; validator: keyValidator, trigger: [&#x27;blur&#x27;, &#x27;change&#x27;] &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    let maxLengthRule = &#123; max: 16, message: &quot;不得超过16个字符&quot;, trigger: &quot;blur&quot; &#125;;</span><br><span class="line">    rules.push(maxLengthRule);</span><br><span class="line">    rules.push(&#123; validator: nameValidator, trigger: [&#x27;blur&#x27;, &#x27;change&#x27;] &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rules.push(requiredRule);</span><br><span class="line">  rules.push(</span><br><span class="line">    &#123;</span><br><span class="line">      validator:</span><br><span class="line">        nameOrKeyExistedValidator,</span><br><span class="line">      entity: entity,</span><br><span class="line">      extraParams: extraParams,</span><br><span class="line">      entityName: entityName,</span><br><span class="line">      trigger: &quot;blur&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  return rules;</span><br><span class="line">&#125;</span><br><span class="line">const keyValidator = (rule, value, callback) =&gt; &#123;</span><br><span class="line">  const reg = /^[a-zA-Z0-9_]+$/</span><br><span class="line">  if (!reg.test(value)) &#123;</span><br><span class="line">    callback(new Error(&#x27;仅支持英文、数字和下划线&#x27;))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const nameValidator = (rule, value, callback) =&gt; &#123;</span><br><span class="line">  const reg = /^[a-zA-Z0-9_\u4e00-\u9fa5]+$/</span><br><span class="line"></span><br><span class="line">  if (!reg.test(value)) &#123;</span><br><span class="line">    callback(new Error(&#x27;仅支持中文、英文、数字和下划线&#x27;))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const nameOrKeyExistedValidator = (rule, value, callback) =&gt; &#123;</span><br><span class="line">  if (rule.oldVal &amp;&amp; rule.oldVal === value) &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    nameOrKeyExisted(rule.entity, rule.field, value,rule.extraParams).then(res =&gt; &#123;</span><br><span class="line">      if (res) &#123;</span><br><span class="line">        if (rule.field === &quot;name&quot;) &#123;</span><br><span class="line">          callback(`$&#123;rule.entityName&#125;名称重复`)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          callback(`$&#123;rule.entityName&#125;标识重复`)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编辑实体时的判断逻辑（传入oldVal，避免错误的报错）<br>这里的逻辑暂时没想到比较好的解决方法，所以写的比较恶心，因为原先的值可能是异步拿到的，所以需要手动赋值。传入oldVal后，当表单输入值与原先的值一致时，就不会调用后端判重接口了。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  if (this.isEdit) &#123;</span><br><span class="line">    this.rules.name[3].oldVal = this.ruleForm.name</span><br><span class="line">    this.rules.key[3].oldVal = this.ruleForm.key</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>封装后端axios请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export function nameOrKeyExisted(entityName, type, data, params) &#123;</span><br><span class="line">  let queryParams =&#123;&#125;;</span><br><span class="line">  if (params) &#123;</span><br><span class="line">     queryParams = &#123;</span><br><span class="line">      ...params,</span><br><span class="line">      type: type,</span><br><span class="line">      nameOrKey: data</span><br><span class="line">     &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">     queryParams = &#123;</span><br><span class="line">      type: type,</span><br><span class="line">      nameOrKey: data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return $get(`/api/$&#123;entityName&#125;/nameOrKeyExisted`, queryParams)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求的封装需要后端的配合~（因为这个平台后端也是由我一手包办的，所以当然不在话下啦）</p><ul><li>后端定义接口时，只需要注意后端URI和返回值一致就可以了。</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-form :model=&quot;esseForm&quot; :rules=&quot;esseFormRules&quot; ref=&quot;baseInfoForm&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">esseFormRules: &#123;</span><br><span class="line">       type: [</span><br><span class="line">         &#123;</span><br><span class="line">           required: true,</span><br><span class="line">           message: &#x27;请选择实体类型&#x27;,</span><br><span class="line">           trigger: &#x27;blur&#x27;</span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line"></span><br><span class="line">       ...this.$utils.validate.getRules(&#x27;sem-esses&#x27;, &#x27;实体&#x27;,&#123;params: &#123;user: a&#125;&#125;)</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><p>如上，使用展开运算符，将返回的结果赋值到rules对象中，名称和标识的规则由通用的校验函数根据入参生成，该方法已经挂载到全局的$utils上，无需额外的引入成本，一次性生成了对于名称、标识的所有校验。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本方法适用于校验逻辑雷同、并且需要实体创建和校验的平台，如果功规调整，也能快速适应（例如长度从限制50字符改为限制100字符），节约时间。<br>缺陷：校验规则函数的灵活度往往与复杂度成正比，如果需要更多特殊的校验，需要考虑是否有必要修改校验函数，可能不太适用这种方法，如果创建表单的校验逻辑差异较大，就还是建议为每个表单定义自己的rules规则。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 指令实现自动填充英文名功能</title>
      <link href="/2021/05/21/Vue%20%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E8%8B%B1%E6%96%87%E5%90%8D%E5%8A%9F%E8%83%BD/"/>
      <url>/2021/05/21/Vue%20%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E8%8B%B1%E6%96%87%E5%90%8D%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<ul><li>背景：应用系统中存在多个创建实体表单，表单填写时，在填写中文名称后，要填写对应的英文名作为标识或数据库查询索引。</li><li>需求：<strong>填写中文名的同时，系统自动生成英文名并填充到表单中，辅助用户操作，节约操作时间。</strong></li></ul><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/28c3278af86760a4e9fa3a04588173b9.gif" alt="转全拼"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/85a002b82a346a8bd03fd6d9f3161673.gif" alt="转英文（伪）"></p><h1 id="方案调研"><a href="#方案调研" class="headerlink" title="方案调研"></a>方案调研</h1><p>对需求进行分析后，对于如何将中文名翻译成英文字符串，调研以下方案：</p><ul><li>调用翻译引擎<br>优点：翻译准确，对于短句也能翻译<br>缺点：部署难度大，需要捆绑翻译引擎</li><li>调用开放API（谷歌翻译&#x2F;百度翻译等）<br>优点：能完成翻译功能<br>缺点：可能需要付费&#x2F;开发者帐号等，需要集成成本，需要私有化部署版本时（无法连接外网）可能无法实现</li><li>使用音译插件（参考：<a href="https://github.com/dzcpy/transliteration%EF%BC%89">https://github.com/dzcpy/transliteration）</a><br>优点：轻量，集成简单，有一定可扩展性，可离线<br>缺点：无法翻译，只能音译（会将“你好”翻译成“ni_hao”而不是“hello”），使标识的可读性和语义性下降。</li></ul><p>以上三种仅为中转英的方法不同，均可实现功能。本次方案暂使用第三种。</p><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><ul><li>分析：该功能需要增加到多个表单中，如果为每个需要添加的组件都增加相应逻辑，侵入性较强，也不好维护。</li><li>逻辑提炼：</li></ul><ol><li>为中文名的输入框绑定监听事件，监听输入，取得该input框输入的值</li><li>将第一步中获得的中文值转化成英文字符串</li><li>将英文字符串写入到英文名输入框中<br>思路： 为表单添加<code>vue</code>自定义指令，通过取子节点（根据虚拟节点层级，<code>vnode</code>的子级）的方法，获取到需要操作的dom元素，再在指令逻辑中进行逻辑处理。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="指令定义"><a href="#指令定义" class="headerlink" title="指令定义"></a>指令定义</h2><ul><li>定义<code>v-transliterate </code>指令（vue自定义指令的定义和使用可参考官方文档，此处不做赘述）</li><li><code>transliterate.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; transliterate <span class="keyword">as</span> tr, slugify &#125; <span class="keyword">from</span> <span class="string">&#x27;transliteration&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sourceInputEl = vnode.<span class="property">componentInstance</span>.<span class="property">$children</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">prop</span> === <span class="string">&#x27;name&#x27;</span>).<span class="property">$children</span>[<span class="number">1</span>].<span class="property">$el</span>.<span class="property">children</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> targetInputEl = vnode.<span class="property">componentInstance</span>.<span class="property">$children</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">prop</span> === <span class="string">&#x27;key&#x27;</span>).<span class="property">$children</span>[<span class="number">1</span>].<span class="property">$el</span>.<span class="property">children</span>[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isFirstInput = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    sourceInputEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 判断当前标识是否已填写，若已填写，则不再根据中文名称生成</span></span><br><span class="line">      <span class="keyword">let</span> isEmpty = !targetInputEl.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isEmpty || !isFirstInput) &#123;</span><br><span class="line">    <span class="comment">// 一定延迟处理，用户使用几乎无感知</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> transValue = <span class="title function_">slugify</span>(sourceInputEl.<span class="property">value</span>, &#123; <span class="attr">separator</span>: <span class="string">&#x27;_&#x27;</span> &#125;);</span><br><span class="line">          <span class="keyword">let</span> inputEvt = <span class="keyword">new</span> <span class="title class_">InputEvent</span>(<span class="string">&#x27;input&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">inputType</span>: <span class="string">&#x27;insertText&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: transValue,</span><br><span class="line">            <span class="attr">dataTransfer</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">isComposing</span>: <span class="literal">false</span></span><br><span class="line">          &#125;);</span><br><span class="line">          targetInputEl.<span class="property">value</span> = transValue;</span><br><span class="line">          targetInputEl.<span class="title function_">dispatchEvent</span>(inputEvt);</span><br><span class="line">          isFirstInput = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、transValue的生成可根据前面所说的不同方案，更改生成的方法。<br>2、两个input 元素是根据prop来筛选的，代码中硬编码为”name“ -中文名 和”key“ 英文名，可根据需求调整，也可以根据指令方法入参的binding赋值。由于本项目中所有表单prop都是固定的，所以没有写相应逻辑。<br>3、<code>keyup</code>事件可根据需求更改为<code>blur</code>事件，对于调用后台api获值，可考虑改为blur，降低频繁请求。<br>4、执行<code> targetInputEl.value = transValue;</code>  后，页面上显示已经改变，但点击保存表单时仍然会触发空值校验，怀疑是因为该赋值没有刷新到虚拟节点的model中，故而使用 <code>targetInputEl.dispatchEvent(inputEvt);</code>方法模拟输入事件，触发值的刷新。<br>5、<code>isEmpty</code>  空值校验，避免用户在填写表单时先填写了英文名，再填写中文名时，英文名被覆盖。逻辑一般限定标识生成后就不允许修改，该方法也规避了修改时的英文名跟着中文名修改的问题。<br>6、使用<code>transliterate </code>可定义配置字典，实现常用中-英单词的翻译，但仍然无法替代翻译引擎。配置逻辑参考github上的README即可。<br><code>slugify.config(&#123; replace: [[&#39;世界&#39;,&#39;world&#39;],[&#39;你好&#39;,&#39;hello&#39;]] &#125;);</code></p><h2 id="指令使用"><a href="#指令使用" class="headerlink" title="指令使用"></a>指令使用</h2><p>需要用该功能的地方，在表单元素增加该指令即可。<br><img src="https://img-blog.csdnimg.cn/img_convert/fa9079117854ffa7932e6bde2dfd9665.png" alt="指令使用"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是实现全过程，如果有更好的实现方法，请留言告诉我哦~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java | 使用OpenFeign管理多个第三方服务调用</title>
      <link href="/2021/04/28/Java%20%E4%BD%BF%E7%94%A8OpenFeign%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
      <url>/2021/04/28/Java%20%E4%BD%BF%E7%94%A8OpenFeign%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近开发了一个统一调度类的项目，需要依赖多个第三方服务，这些服务都提供了<code>HTTP</code>接口供我调用。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1ff2d029d047f2573ccf599a473dea8d.png" alt="组件架构"></p><p>服务多、接口多，如何进行第三方服务管理和调用就成了问题。</p><p>常用的服务间调用往往采用<code>zk</code>、<code>Eureka</code>等注册中心进行服务管理（<code>SpringBoot</code>常使用<code>SpringCloud</code>）。<code>OpenFeign</code>也是<code>SpringCloud</code>的解决方案之一。我们单独使用<code>OpenFeign</code>， 无需对原有第三方服务进行改动，本服务开发时的引入也很轻量。</p><p>下面给出我的用法。</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><p>引入maven依赖：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;10.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-gson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;10.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-form&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-form-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><br>其中，form相关引入是为了解决<code>ContentType</code>为<code>application/x-www-form-urlencoded</code>和<code>multipart/form-data</code>的编码问题。</p><h2 id="配置和服务声明"><a href="#配置和服务声明" class="headerlink" title="配置和服务声明"></a>配置和服务声明</h2><p>第三方服务的地址通过配置来注入。</p><h3 id="服务地址配置"><a href="#服务地址配置" class="headerlink" title="服务地址配置"></a>服务地址配置</h3><p><code>ThirdpartServiceConfig.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;thirdpart-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdpartServiceConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String serviceA;</span><br><span class="line">    <span class="keyword">private</span> String serviceB;</span><br><span class="line">    <span class="keyword">private</span> String serviceC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务配置（超时时间配置等也可以写在这里）<br> <code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">thirdpart-service:</span></span><br><span class="line">  <span class="attr">serviceA:</span> <span class="string">http://****:***/</span></span><br><span class="line">  <span class="attr">serviceB:</span>  <span class="string">http://****:***/</span></span><br><span class="line">  <span class="attr">serviceC:</span>  <span class="string">http://****:***/</span></span><br></pre></td></tr></table></figure><h3 id="第三方服务配置"><a href="#第三方服务配置" class="headerlink" title="第三方服务配置"></a>第三方服务配置</h3><p>因为声明方法一致，所以省略了多个第三方声明。<br><code>ThirdPartClientConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdParttClientConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ThirdpartServiceConfig thirdpartServiceConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServiceAClient <span class="title function_">serviceAClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Feign.builder()</span><br><span class="line">            .encoder(<span class="keyword">new</span> <span class="title class_">FormEncoder</span>(<span class="keyword">new</span> <span class="title class_">GsonEncoder</span>()))</span><br><span class="line">            .decoder(<span class="keyword">new</span> <span class="title class_">GsonDecoder</span>())</span><br><span class="line">            .target(ServiceAClient.class, thirdpartServiceConfig.getServiceA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口声明和使用"><a href="#接口声明和使用" class="headerlink" title="接口声明和使用"></a>接口声明和使用</h2><p>完成了服务的声明和服务的配置之后，就可以进行服务接口的声明了。具体声明方法可以参看<code>OpenFeign</code>文档：<a href="https://segmentfault.com/a/1190000018313243?utm_source=tag-newest"># <a href="https://segmentfault.com/a/1190000018313243">翻译: Spring Cloud Feign使用文档</a></a><br>下面给出使用示例:</p><ul><li><code>GET</code>请求（<code>feign</code>可直接将返回的结果反序列化为本服务中定义的<code>POJO</code>）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestLine(&quot;GET testGet?a=&#123;a&#125;&amp;b=&#123;b&#125;&quot;)</span></span><br><span class="line">ServiceResp <span class="title function_">testGet</span><span class="params">(<span class="meta">@Param(&quot;a&quot;)</span> String a,<span class="meta">@Param(&quot;b&quot;)</span>String b)</span>;</span><br></pre></td></tr></table></figure></li><li><code>GET</code> 下载<br>使用<code>feign.Response</code>接收请求结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestLine(&quot;GET export?exportId=&#123;exportId&#125;&quot;)</span></span><br><span class="line">Response <span class="title function_">exportFromServiceA</span><span class="params">(<span class="meta">@Param(&quot;exportId&quot;)</span>String exportId)</span>;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">private ServiceAClient serviceAClient ;</span><br><span class="line"></span><br><span class="line">// 导出方法</span><br><span class="line">public void export(exportId) &#123;</span><br><span class="line">    Response serviceResponse = serviceserviceAClient.exportFromServiceA(exportId);</span><br><span class="line">    Response.Body body = serviceResponse.body();</span><br><span class="line">    try(InputStream inputStream = body.asInputStream();</span><br><span class="line">        // 处理获取到的inputStream</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">    log.error(&quot;导出发生异常&quot;,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>POST</code> application&#x2F;json”<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestLine(&quot;POST /save&quot;)</span></span><br><span class="line"> <span class="meta">@Headers(&quot;Cofntent-Type: application/json&quot;)</span></span><br><span class="line">  ServiceResp <span class="title function_">saveEntity</span><span class="params">(EntityPOJO entityPOJO)</span>;</span><br><span class="line">````</span><br><span class="line">- POST form</span><br><span class="line">```java</span><br><span class="line"> <span class="meta">@RequestLine(&quot;POST  uqa/repo/qa/batch&quot;)</span></span><br><span class="line"> <span class="meta">@Headers(&quot;Content-Type:multipart/form-data&quot;)</span></span><br><span class="line"> ServiceResp <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span>String id, <span class="meta">@Param(&quot;batch_file&quot;)</span> File file)</span>;</span><br></pre></td></tr></table></figure></li><li>注意：除了file类型，其他参数会被序列化为String，所以若第三方接口参数的值为POJO（或Map），可能会出错。</li><li>对于POJO参数，若第三方参数名含有<code>Java</code>中不合法的属性字符（如 ”-“，”#“，”.“等），可使用注解进行序列化时的转化。由于声明<code>Feign Client</code>时使用的encoder是<code>Gson</code>，所以使用如下注解：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SerializedName(value=&quot;aaa-bbb&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String aaaBbb;</span><br></pre></td></tr></table></figure>如果使用的是其他序列化工具，改为对应的注解即可。</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>使用声明式的第三方和接口写法，基本覆盖了请求第三方接口的需求，也易于拓展和管理。<br>我计划在后续添加统一的鉴权、日志打印和异常捕获处理功能，使依赖组件引入的风险更为可控。<code>OpenFeign</code>帮我们实现了服务声明、接口声明、HTTP请求发送和结果处理等逻辑，在项目需要调用多个第三方服务时可以使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue + WebRTC 实现音视频直播（附自定义播放器样式)</title>
      <link href="/2020/11/17/Vue%20+%20WebRTC%20%E5%AE%9E%E7%8E%B0%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%EF%BC%88%E9%99%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%92%AD%E6%94%BE%E5%99%A8%E6%A0%B7%E5%BC%8F)/"/>
      <url>/2020/11/17/Vue%20+%20WebRTC%20%E5%AE%9E%E7%8E%B0%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%EF%BC%88%E9%99%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%92%AD%E6%94%BE%E5%99%A8%E6%A0%B7%E5%BC%8F)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是WebRTC"><a href="#1-什么是WebRTC" class="headerlink" title="1. 什么是WebRTC"></a>1. 什么是WebRTC</h1><h2 id="1-1-WebRTC简介"><a href="#1-1-WebRTC简介" class="headerlink" title="1.1 WebRTC简介"></a>1.1 WebRTC简介</h2><p><strong>WebRTC</strong>，名称源自<strong>网页即时通信</strong>（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的实时通信框架，提供了一系列页面可调用API。</p><blockquote><p>参考定义：<a href="https://www.oschina.net/p/webrtc" title="WebRTC 谷歌开放实时通信框架"> 谷歌开放实时通信框架</a></p></blockquote><blockquote><p>在上一篇博客<a href="https://www.jianshu.com/p/55107295ab6c">Vue +WebSocket + WaveSurferJS 实现H5聊天对话交互</a> 中，已经涉及到WebRTC接口的使用，使用到了<code>getUserMedia</code>方法，用于通过浏览器获取设备麦克风，从而采集音频。</p></blockquote><p>最近项目中的需求则是与服务端建立即时通信，实现低延迟音视频直播。</p><p>RTC的特征是（参考来源：<a href="https://www.zhihu.com/question/22301898%EF%BC%89">https://www.zhihu.com/question/22301898）</a></p><ul><li><strong>复杂度较高</strong></li><li><strong>半可靠传输</strong>，对于特定情境（比如网络环境较差时）可以对音视频进行有损传输，降低延迟</li><li><strong>音视频友好</strong>：可针对音视频做定制化优化</li><li>提供<strong>端对端</strong>优化方案。 对于传统连接模式，使用C&#x2F;S架构，A&#x3D;&gt;服务端&#x3D;&gt;B，而WebRTC使用的是<code>peer-to-peer</code>模式，A&#x3D;&gt;B，一旦点和点之间的连接形成，它们之间的数据传输是不经过服务端的，大大降低了服务端的压力。</li><li><strong>理论延迟较低</strong>，能应用在各种低延迟场景。</li></ul><h1 id="2-业务描述"><a href="#2-业务描述" class="headerlink" title="2. 业务描述"></a>2. 业务描述</h1><p><strong>功能描述</strong>：<br>实现对摄像设备的管理列表，在设备列表点击查看视频时，弹出页面浮窗，进行摄像机摄像的视频和音频实时转播。<br>视频弹窗下方有自己实现的控制条，实现播放&#x2F;暂停控制，能显示播放时间、切换分辨率、是否全屏等。</p><p><strong>效果如图</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/97ed5309b97abfa2b600af17bfd3d97f.png" alt="视频浮窗 - hover状态，显示控制条"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/ddff8319f59f951d767aa74acbef9e63.png" alt="视频浮窗 - 非hover状态，隐藏控制条"></p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h1><h2 id="3-1-Html模板代码"><a href="#3-1-Html模板代码" class="headerlink" title="3.1 Html模板代码"></a>3.1 Html模板代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dialog ref=&quot;videoDialog&quot; title=&quot;视频播放&quot; :visible.sync=&quot;dialogShowed&quot; :close-on-click-modal=&quot;false&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;dialog-wrap&quot;&gt;</span><br><span class="line">            &lt;div id=&quot;video-wrap&quot; v-if=&quot;isSuccess&quot; v-loading=&quot;isLoading&quot; element-loading-text=&quot;视频加载中&quot; element-loading-spinner=&quot;el-icon-loading&quot;</span><br><span class="line">                element-loading-background=&quot;rgba(0, 0, 0, 0.8)&quot; /&gt;</span><br><span class="line">            &lt;div class=&quot;video-onloading&quot; v-else v-loading=&quot;isLoading&quot; element-loading-text=&quot;视频加载中&quot; element-loading-spinner=&quot;el-icon-loading&quot;</span><br><span class="line">                element-loading-background=&quot;rgba(0, 0, 0, 0.8)&quot;&gt;</span><br><span class="line">                &lt;span&gt;&lt;i class=&quot;el-icon-error&quot; v-if=&quot;!isLoading&quot; /&gt;&#123;&#123;errorMessage&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!-- 遮罩层 --&gt;</span><br><span class="line">            &lt;div class=&quot;cover&quot; v-if=&quot;isSuccess&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;controls&quot;&gt;</span><br><span class="line">                  </span><br><span class="line">                    &lt;i class=&quot;el-icon-video-play&quot; v-if=&quot;!isPlaying&quot; @click=&quot;playOrPauseVideo&quot; /&gt;</span><br><span class="line">                    &lt;i class=&quot;el-icon-video-pause&quot; v-else @click=&quot;playOrPauseVideo&quot; /&gt;</span><br><span class="line">                    &lt;div id=&quot;currentTime&quot;&gt;播放时长:&#123;&#123;currentTime&#125;&#125;&lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;control-resolution&quot;&gt;</span><br><span class="line">                        分辨率：</span><br><span class="line">                        &lt;el-select v-model=&quot;selectResolution&quot; @change=&quot;changeResolution&quot;&gt;</span><br><span class="line">                            &lt;el-option v-for=&quot;item in resolutions&quot; :key=&quot;item&quot; :value=&quot;item&quot;&gt;</span><br><span class="line">                                &#123;&#123;item&#125;&#125;</span><br><span class="line">                            &lt;/el-option&gt;</span><br><span class="line">                        &lt;/el-select&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;i class=&quot;el-icon-full-screen&quot; @click=&quot;onClickFullScreen&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>使用了<code>Element-UI</code>框架提供的<code>v-loading</code>指令，该指令根据<code>isLoading</code>属性决定是否在区域内加载loading动画<br><img src="https://img-blog.csdnimg.cn/img_convert/1294b0a9bb6fb97f911b2a115465aeed.png" alt="视频加载状态"></p></li><li><p>若视频加载失败，则显示错误信息<br><img src="https://img-blog.csdnimg.cn/img_convert/4bc4e455db6c5cc09c575da7765c9477.png" alt="显示错误信息"></p></li><li><p>预留标签，用于挂载&#96;video和audio DOM元素</p></li></ul><p><code>&lt;div id=&quot;video-wrap&quot; &gt;&lt;/div&gt;</code><br>注意该标签内最好不要再加其他元素，这样后续判断比较简单。</p><h2 id="3-2-建立连接、接收音频"><a href="#3-2-建立连接、接收音频" class="headerlink" title="3.2 建立连接、接收音频"></a>3.2 建立连接、接收音频</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">         that.<span class="property">isLoading</span> = <span class="literal">true</span>;</span><br><span class="line">         that.<span class="property">pc</span> = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>();</span><br><span class="line">         that.<span class="property">pc</span>.<span class="title function_">addTransceiver</span>(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">         that.<span class="property">pc</span>.<span class="title function_">addTransceiver</span>(<span class="string">&quot;audio&quot;</span>);</span><br><span class="line">         that.<span class="property">pc</span>.<span class="property">ontrack</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">             <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(event.<span class="property">track</span>.<span class="property">kind</span>);</span><br><span class="line">             el.<span class="property">srcObject</span> = event.<span class="property">streams</span>[<span class="number">0</span>];</span><br><span class="line">             el.<span class="property">autoplay</span> = <span class="literal">true</span>;</span><br><span class="line">             <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video-wrap&quot;</span>).<span class="title function_">appendChild</span>(el);</span><br><span class="line">             <span class="keyword">if</span> (el.<span class="property">nodeName</span> === <span class="string">&quot;VIDEO&quot;</span>) &#123;</span><br><span class="line">                 el.<span class="property">oncanplay</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                     that.<span class="property">isLoading</span> = <span class="literal">false</span>;</span><br><span class="line">                     <span class="comment">// 播放状态设置为true</span></span><br><span class="line">                     that.<span class="property">isPlaying</span> = <span class="literal">true</span>;</span><br><span class="line">                     that.<span class="title function_">getVideoDuration</span>();</span><br><span class="line">                 &#125;;</span><br><span class="line">             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">nodeName</span> === <span class="string">&quot;AUDIO&quot;</span>) &#123;</span><br><span class="line">                 el.<span class="property">oncanplay</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   </span><br><span class="line">                 &#125;;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         that.<span class="property">pc</span></span><br><span class="line">             .<span class="title function_">createOffer</span>()</span><br><span class="line">             .<span class="title function_">then</span>(<span class="function">(<span class="params">offer</span>) =&gt;</span> &#123;</span><br><span class="line">                 that.<span class="property">pc</span>.<span class="title function_">setLocalDescription</span>(offer);</span><br><span class="line">                 <span class="keyword">let</span> req = &#123;</span><br><span class="line">                     <span class="attr">webrtc</span>: offer,</span><br><span class="line">                 &#125;;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(offer);</span><br><span class="line">                 <span class="keyword">return</span> that.<span class="property">$api</span>.<span class="property">device</span>.<span class="title function_">getSignaling</span>(</span><br><span class="line">                     that.<span class="property">deviceData</span>.<span class="property">id</span>,</span><br><span class="line">                     that.<span class="property">origin</span>,</span><br><span class="line">                     that.<span class="property">selectResolution</span>,</span><br><span class="line">                     req</span><br><span class="line">                 );</span><br><span class="line">             &#125;)</span><br><span class="line">             .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                     that.<span class="property">isSuccess</span> = <span class="literal">true</span>;</span><br><span class="line">                     that.<span class="property">pc</span>.<span class="title function_">setRemoteDescription</span>(res.<span class="property">body</span>.<span class="property">webrtc</span>);</span><br><span class="line">                     that.<span class="property">connId</span> = res.<span class="property">body</span>.<span class="property">connId</span>;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 </span><br><span class="line">                     that.<span class="property">errorMessage</span> = res.<span class="property">message</span> || <span class="string">&quot;视频加载错误&quot;</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;)</span><br><span class="line">             .<span class="title function_">catch</span>(alert);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考<a href="https://www.jianshu.com/p/43957ee18f1a%EF%BC%8C%E6%9F%A5%E7%9C%8B%60Peer">https://www.jianshu.com/p/43957ee18f1a，查看`Peer</a> Connection<code>建立连接的流程。 参考 https://developer.mozilla.org/zh-CN/docs/Web/API/RTCPeerConnection 查看</code>RTCPeerConnection&#96; 支持的接口</p></blockquote><p><code>createOffer()</code> 方法： 主动与其他<code>peer</code>建立P2P连接，把自己的SDP信息整理好，通过<code>signaling server</code>转发给其他peer。<br> 在上面的代码中，通过向后端发送POST请求，实现信令交换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">that.pc.addTransceiver(&quot;video&quot;);</span><br><span class="line">that.pc.addTransceiver(&quot;audio&quot;);</span><br></pre></td></tr></table></figure><p>指明同时接收音频和视频。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> that.pc.ontrack = function(event)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 该方法进行音视频的接收，使用接收到的数据创建video和audio元素。<br>只对pc状态进行监听无法监听到实际视频可以播放的状态，因此需要对video添加监听方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  el.<span class="property">oncanplay</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     that.<span class="property">isLoading</span> = <span class="literal">false</span>;</span><br><span class="line">     <span class="comment">// 播放状态设置为true</span></span><br><span class="line">    that.<span class="property">isPlaying</span> = <span class="literal">true</span>;</span><br><span class="line">    that.<span class="title function_">getVideoDuration</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在video可以播放时，才将loading状态取消，并开始获取video时长。</p><h2 id="3-3-控制音视频的JS代码"><a href="#3-3-控制音视频的JS代码" class="headerlink" title="3.3 控制音视频的JS代码"></a>3.3 控制音视频的JS代码</h2><p>获取视频播放时长方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">getVideoDuration() &#123;</span><br><span class="line">    var video = document.getElementsByTagName(&quot;video&quot;)[0];</span><br><span class="line">    //  如果没有获取到视频元素</span><br><span class="line">    if (!video) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    let that = this;</span><br><span class="line"></span><br><span class="line">    video.addEventListener(&quot;timeupdate&quot;, () =&gt; &#123;</span><br><span class="line">        that.currentTime = getTime(video.currentTime);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var getTime = function (time) &#123;</span><br><span class="line">        let hour =</span><br><span class="line">            Math.floor(time / 3600) &lt; 10</span><br><span class="line">                ? &quot;0&quot; + Math.floor(time / 3600)</span><br><span class="line">                : Math.floor(time / 3600);</span><br><span class="line">        let min =</span><br><span class="line">            Math.floor((time % 3600) / 60) &lt; 10</span><br><span class="line">                ? &quot;0&quot; + Math.floor((time % 3600) / 60)</span><br><span class="line">                : Math.floor((time % 3600) / 60);</span><br><span class="line">        var sec =</span><br><span class="line">            Math.floor(time % 60) &lt; 10</span><br><span class="line">                ? &quot;0&quot; + Math.floor(time % 60)</span><br><span class="line">                : Math.floor(time % 60);</span><br><span class="line">        return hour + &quot;:&quot; + min + &quot;:&quot; + sec;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制音频&#x2F;视频同步暂停的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  playOrPauseVideo() &#123;</span><br><span class="line">    var video = document.getElementsByTagName(&quot;video&quot;)[0];</span><br><span class="line">    var audio = document.getElementsByTagName(&quot;audio&quot;)[0];</span><br><span class="line">    if (this.isPlaying) &#123;</span><br><span class="line">        video.pause();</span><br><span class="line">        audio.pause();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // audio</span><br><span class="line">        video.play();</span><br><span class="line">        audio.play();</span><br><span class="line">    &#125;</span><br><span class="line">    this.isPlaying = !this.isPlaying;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>全屏方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onClickFullScreen() &#123;</span><br><span class="line">    let dialogElement = document.getElementById(&quot;dialog-wrap&quot;);</span><br><span class="line">    dialogElement.webkitRequestFullScreen();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-样式表"><a href="#3-4-样式表" class="headerlink" title="3.4 样式表"></a>3.4 样式表</h2><p>样式部分较为简单，值得注意的有以下几点：</p><ul><li>隐藏原有视频控制条，便于对控制条进行自定义<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">video</span>::-webkit-media-controls &#123;</span><br><span class="line">    <span class="comment">/* 去掉全屏时显示的自带控制条 */</span></span><br><span class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>扩大hover热区，视频下半部分（高度为400px部分）悬浮显示控制条<br>（不设置为全部部分是因为如果设置为全部部分，则全屏状态无法隐藏控制条）<br>以下完整样式表（<code>scss</code>）:<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">  <span class="variable">$controlFontColor</span>: <span class="built_in">rgb</span>(<span class="number">136</span> <span class="number">141</span> <span class="number">150</span>);</span><br><span class="line">  <span class="variable">$backgroundColor</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="variable">$height</span>: <span class="number">60px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.el-dialog</span> <span class="selector-class">.el-dialog__body</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">      <span class="attribute">width</span>: unset <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.video-onloading</span> &#123;</span><br><span class="line">      <span class="attribute">min-height</span>: <span class="number">500px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$backgroundColor</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">span</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">          <span class="attribute">line-height</span>: <span class="number">500px</span>;</span><br><span class="line">          <span class="attribute">text-align</span>: center;</span><br><span class="line">          <span class="attribute">color</span>: <span class="variable">$controlFontColor</span>;</span><br><span class="line">          <span class="selector-tag">i</span> &#123;</span><br><span class="line">              <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="selector-tag">i</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">              <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cover</span> &#123;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">      &amp;<span class="selector-pseudo">:hover</span>,</span><br><span class="line">      &amp;<span class="selector-pseudo">:focus</span>,</span><br><span class="line">      &amp;<span class="selector-pseudo">:focus</span>-within &#123;</span><br><span class="line">          <span class="selector-class">.controls</span> &#123;</span><br><span class="line">              <span class="attribute">display</span>: flex;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.controls</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="variable">$height</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$backgroundColor</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">$controlFontColor</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span></span><br><span class="line">      justify-content: space-between;</span><br><span class="line"></span><br><span class="line">      &amp; &gt; <span class="selector-attr">[class^=<span class="string">&quot;el-icon-&quot;</span>]</span> &#123;</span><br><span class="line">          &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">              <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line">              <span class="attribute">line-height</span>: <span class="variable">$height</span>;</span><br><span class="line">              <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">              <span class="attribute">cursor</span>: pointer;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.playStatus</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">64px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-id">#currentTime</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">          <span class="attribute">text-align</span>: center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.control-resolution</span> &#123;</span><br><span class="line">          <span class="attribute">line-height</span>: <span class="variable">$height</span>;</span><br><span class="line">          <span class="selector-class">.el-input__inner</span> &#123;</span><br><span class="line">              <span class="attribute">background</span>: <span class="variable">$backgroundColor</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="selector-class">.el-input</span> &#123;</span><br><span class="line">              <span class="attribute">width</span>: <span class="number">95px</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="selector-tag">input</span> &#123;</span><br><span class="line">              <span class="attribute">border</span>: none;</span><br><span class="line">              <span class="attribute">font-size</span>: <span class="number">15px</span> <span class="meta">!important</span>;</span><br><span class="line">              <span class="attribute">color</span>: <span class="variable">$controlFontColor</span>;</span><br><span class="line">              &amp;::-webkit-input-placeholder &#123;</span><br><span class="line">                  <span class="attribute">color</span>: <span class="variable">$controlFontColor</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-id">#fullScreen</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">          <span class="attribute">position</span>: relative;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">16px</span>;</span><br><span class="line">       </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次的前端业务<code>WebRTC</code>只做了浅显的了解和应用，只应用了接收流，还没有用到推流，<code>WebRTC</code>还有更多用法，比如实现实时视频通话、语音通话等，也许以后的业务中会用到，所以以这篇博客做一个入门记录~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue + WebSocket + WaveSurferJS 实现H5聊天对话交互</title>
      <link href="/2020/10/22/Vue%20+WebSocket%20+%20WaveSurferJS%20%E5%AE%9E%E7%8E%B0H5%E8%81%8A%E5%A4%A9%E5%AF%B9%E8%AF%9D%E4%BA%A4%E4%BA%92/"/>
      <url>/2020/10/22/Vue%20+WebSocket%20+%20WaveSurferJS%20%E5%AE%9E%E7%8E%B0H5%E8%81%8A%E5%A4%A9%E5%AF%B9%E8%AF%9D%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在与实现了语音合成、语义分析、机器翻译等算法的后端交互时，页面可以设计成更为人性化、亲切的方式。我们采用类似于聊天对话的实现，效果如下：</p><ul><li><p><strong>智能客服</strong>（输入文本，返回引擎处理后的文本结果）<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/85b8e7f52c9b329bfe65fc810f133a31.gif" alt="85b8e7f52c9b329bfe65fc810f133a31.gif"></p></li><li><p><strong>语音合成</strong>（输入文本，返回文本以及合成的音频）<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90.gif" alt="语音合成.gif"></p></li></ul><p>如上图所示，返回文本后，再返回合成出的音频。<br>音频按钮嵌在对话气泡中，可以点击播放。</p><ul><li><strong>语音识别</strong>（在页面录制语音发送，页面实时展示识别出的文本结果）<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB.gif" alt="语音识别.gif"></li></ul><h1 id="实现功能及技术要点"><a href="#实现功能及技术要点" class="headerlink" title="实现功能及技术要点"></a>实现功能及技术要点</h1><p><strong>1、基于WebSocket实现对话流</strong><br>页面与后端的交互是实时互动的，所以采用WebSocket协议，而不是HTTP请求，这样后端推送回的消息可以实时显示在页面上。<br>WebSocket的返回是队列的、无序的，在后续处理中我们也需要注意这一点，在后文中会说到。<br><strong>2、调用设备麦克风进行音频录制和转码加头，基于WebAudio、WaveSurferJS等实现音频处理和绘制</strong><br><strong>3、基于Vue的响应式页面实现</strong><br><strong>4、CSS3 + Canvas + JS 交互效果优化</strong></p><ul><li>录制音频CSS动画效果</li><li>聊天记录自动滚动<br>下面给出部分实现代码。</li></ul><h1 id="集成WebSocket"><a href="#集成WebSocket" class="headerlink" title="集成WebSocket"></a>集成WebSocket</h1><p>我们的聊天组件是页面侧边打开的抽屉（<code>el-drawer</code>），Vue组件会在打开时创建，关闭时销毁。在组件中引入WebSocket，并管理它的开、关、消息接收和发送，使它的生命周期与组件一致（打开窗口时创建ws连接，关闭窗口时关闭连接，避免与后台连接过多。）<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">WebSocket</span> === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;您的浏览器不支持socket&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化socket</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">socket</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable language_">this</span>.<span class="property">socketServerPath</span>)</span><br><span class="line">        <span class="comment">// 监听socket连接</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">onopen</span> = <span class="variable language_">this</span>.<span class="property">open</span></span><br><span class="line">        <span class="comment">// 监听socket错误信息</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">onerror</span> = <span class="variable language_">this</span>.<span class="property">error</span></span><br><span class="line">        <span class="comment">// 监听socket消息</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">onmessage</span> = <span class="variable language_">this</span>.<span class="property">onMessage</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">onclose</span> = <span class="variable language_">this</span>.<span class="property">close</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">destroyed</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如上，将WebSocket的事件绑定到JS方法中，可以在对应方法中实现对数据的接收和发送。<br>打开浏览器控制台，选中指定的标签，便于对<code>WebSocket</code>连接进行监控和查看。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417141841.png" alt="image.png"></p><h1 id="音频录制采集"><a href="#音频录制采集" class="headerlink" title="音频录制采集"></a>音频录制采集</h1><p>从浏览器端音频和视频采集基于网页即时通信（Web Real-Time<br> Communication，简称<code>WebRTC</code>） 的API。通过<code>WebRTC</code>的<code>getUserMedia</code>实现，获取一个<code>MediaStream</code>对象，将该对象关联到AudioContext即可获得音频。 </p><blockquote><p>可参考RecorderJS的实现： <a href="https://github.com/mattdiamond/Recorderjs/blob/master/examples/example_simple_exportwav.html">https://github.com/mattdiamond/Recorderjs/blob/master/examples/example_simple_exportwav.html</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.<span class="property">getUserMedia</span>) &#123;</span><br><span class="line">      navigator.<span class="title function_">getUserMedia</span>(</span><br><span class="line">        &#123; <span class="attr">audio</span>: <span class="literal">true</span> &#125;, <span class="comment">// 只启用音频</span></span><br><span class="line">        <span class="keyword">function</span>(<span class="params">stream</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> context = <span class="title function_">new</span>(<span class="variable language_">window</span>.<span class="property">webkitAudioContext</span> || <span class="variable language_">window</span>.<span class="property">AudioContext</span>)()</span><br><span class="line">          <span class="keyword">var</span> audioInput = context.<span class="title function_">createMediaStreamSource</span>(stream)</span><br><span class="line">          <span class="keyword">var</span> recorder = <span class="keyword">new</span> <span class="title class_">Recorder</span>(audioInput)</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">          <span class="keyword">switch</span> (error.<span class="property">code</span> || error.<span class="property">name</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;PERMISSION_DENIED&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;PermissionDeniedError&#x27;</span>:</span><br><span class="line">              <span class="title function_">throwError</span>(<span class="string">&#x27;用户拒绝提供信息。&#x27;</span>)</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;NOT_SUPPORTED_ERROR&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;NotSupportedError&#x27;</span>:</span><br><span class="line">              <span class="title function_">throwError</span>(<span class="string">&#x27;浏览器不支持硬件设备。&#x27;</span>)</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;MANDATORY_UNSATISFIED_ERROR&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;MandatoryUnsatisfiedError&#x27;</span>:</span><br><span class="line">              <span class="title function_">throwError</span>(<span class="string">&#x27;无法发现指定的硬件设备。&#x27;</span>)</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">              <span class="title function_">throwError</span>(<span class="string">&#x27;无法打开麦克风。异常信息:&#x27;</span> + (error.<span class="property">code</span> || error.<span class="property">name</span>))</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">throwError</span>(<span class="string">&#x27;当前浏览器不支持录音功能。&#x27;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意： 若navigator.getUserMedia获取到的是<code>undefined</code>，是Chrome浏览器的安全策略导致的，需要通过https请求或配置浏览器，配置地址： chrome:&#x2F;&#x2F;flags&#x2F;#unsafely-treat-insecure-origin-as-secure</p></blockquote><blockquote><p>浏览器采集到的音频为PCM格式(<code>PCM</code> （脉冲编码调制  <code>Pulse Code Modulation</code>）)，需要对音频加头才能在页面上进行播放。注意加头时采样率、采样频率、声道数量等必须与采样时相同，不然加完头后的音频无法解码。参考查看<a href="https://github.com/mattdiamond/Recorderjs/blob/master/src/recorder.js%E4%B8%AD%60exportWav%60%E6%96%B9%E6%B3%95%E3%80%82">https://github.com/mattdiamond/Recorderjs/blob/master/src/recorder.js中`exportWav`方法。</a></p></blockquote><p>业务中对接的语音识别引擎为实时转写引擎，即：不是录制完成后再发送，而是一边录制一边进行编码并发送。<br>使用<code>onaudioprocess</code>方法监听语音的输入：<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417142734.png" alt="image.png"></p><p>参考这个实现，我们可以在每次监听到有数据写入时，从buffer中获取到录制到的数据，并进行编码、压缩，再通过WebSocket发送。</p><h1 id="Vue组件设计和业务实现"><a href="#Vue组件设计和业务实现" class="headerlink" title="Vue组件设计和业务实现"></a>Vue组件设计和业务实现</h1><p>分析页面业务逻辑，将代码拆分成两个组件：<br><code>ChatDialog.vue</code> 聊天对话框页面，根据输入类型，分为文本输入、语音输入。<br><code>ChatRecord.vue</code>聊天记录组件，根据发送方（自己或者系统）展示向左&#x2F;向右的气泡，根据内容显示文本、音频等。<code>ChatDialog</code>是<code>ChatRecord</code>的父组件，遍历<code>ChatDialog</code>中的<code>chatList</code>对象（<code>Array</code>），将<code>chatList</code>中的项注入到<code>ChatRecord</code>中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in chatList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">class</span>=<span class="string">&quot;msg-wrapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">chat-record</span> <span class="attr">ref</span>=<span class="string">&quot;chatRecord&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;item&quot;</span> @<span class="attr">showJson</span>=<span class="string">&quot;showJsonDialog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">chat-record</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msg_end&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:0px; overflow:hidden&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于聊天记录的气泡展示，与数据类型相关性很强，<code>ChatRecord</code>组件只关心对数据的处理和展示，我们可以完全不用关心消息的发送、接收、音频的录制、停止录制、接受音频等逻辑，只需要根据数据来展示不同的样式即可。<br><strong>这样Vue的响应式就充分获得了用武之地</strong>：无需用代码对样式展示进行控制，只需要设计合理的数据格式和样式模板，然后注入不同的数据即可。<br>模板页面： 使用<code>v-if</code>控制，修改<code>chatList</code>里的对象内容即可改变页面展示。</p><p>根据业务需求，将<code>ChatRecord</code>可能接收到的数据分为以下几类：</p><p>发送方为自己：</p><ul><li>文本输入，显示文本<br>实现简单，不做赘述。</li><li>语音输入 Loading状态，显示波纹动画和计时<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/wave.gif" alt="wave.gif"></li></ul><p>计时器使用JS的<code>setInterval</code>方法，每100ms更新一次录制时长</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">recordTimer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">audioDuration</span> = <span class="variable language_">this</span>.<span class="property">audioDuration</span> + <span class="number">0.1</span></span><br><span class="line">     &#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>停止后清空计时器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">recordTimer</span>)</span><br></pre></td></tr></table></figure><ul><li>语音输入完毕，根据录制的语音，绘制波纹<br>效果：<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417142409.png" alt="image.png"></li></ul><p>使用<code>wavesurfer</code>插件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">initWaveSurfer</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">wavesurfer</span> = <span class="title class_">WaveSurfer</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">         <span class="attr">container</span>: <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">waveform</span>,</span><br><span class="line">         <span class="attr">height</span>: <span class="number">20</span>,</span><br><span class="line">         <span class="attr">waveColor</span>: <span class="string">&#x27;#3d6fff&#x27;</span>,</span><br><span class="line">         <span class="attr">progressColor</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">         <span class="attr">backend</span>: <span class="string">&#x27;MediaElement&#x27;</span>,</span><br><span class="line">         <span class="attr">mediaControls</span>: <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">audioRate</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">         <span class="attr">fillParent</span>: <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">maxCanvasWidth</span>: <span class="number">500</span>,</span><br><span class="line">         <span class="attr">barWidth</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="attr">barGap</span>: <span class="number">2</span>,</span><br><span class="line">         <span class="attr">barHeight</span>: <span class="number">5</span>,</span><br><span class="line">         <span class="attr">barMinHeight</span>: <span class="number">3</span>,</span><br><span class="line">         <span class="attr">normalize</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">cursorColor</span>: <span class="string">&#x27;#409EFF&#x27;</span></span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">convertAudioToUrl</span>(<span class="variable language_">this</span>.<span class="property">waveAudio</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">wavesurfer</span>.<span class="title function_">load</span>(res)</span><br><span class="line"></span><br><span class="line">         <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">audioDuration</span> = <span class="variable language_">this</span>.<span class="title function_">getAudioDuration</span>()</span><br><span class="line">         &#125;, <span class="number">100</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将音频转化成url地址</span></span><br><span class="line">   <span class="title function_">convertAudioToUrl</span>(<span class="params">audio</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> blobUrl = <span class="string">&#x27;&#x27;</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">sendBy</span> === <span class="string">&#x27;self&#x27;</span>) &#123;</span><br><span class="line">       blobUrl = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(audio)</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="title function_">resolve</span>(blobUrl)</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">base64ToBlob</span>(&#123;</span><br><span class="line">         <span class="attr">b64data</span>: audio,</span><br><span class="line">         <span class="attr">contentType</span>: <span class="string">&#x27;audio/wav&#x27;</span></span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="title function_">base64ToBlob</span>(<span class="params">&#123; b64data = <span class="string">&#x27;&#x27;</span>, contentType = <span class="string">&#x27;&#x27;</span>, sliceSize = <span class="number">512</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 使用 atob() 方法将数据解码</span></span><br><span class="line">       <span class="keyword">let</span> byteCharacters = <span class="title function_">atob</span>(b64data)</span><br><span class="line">       <span class="keyword">let</span> byteArrays = []</span><br><span class="line">       <span class="keyword">for</span> (</span><br><span class="line">         <span class="keyword">let</span> offset = <span class="number">0</span>;</span><br><span class="line">         offset &lt; byteCharacters.<span class="property">length</span>;</span><br><span class="line">         offset += sliceSize</span><br><span class="line">       ) &#123;</span><br><span class="line">         <span class="keyword">let</span> slice = byteCharacters.<span class="title function_">slice</span>(offset, offset + sliceSize)</span><br><span class="line">         <span class="keyword">let</span> byteNumbers = []</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; slice.<span class="property">length</span>; i++) &#123;</span><br><span class="line">           byteNumbers.<span class="title function_">push</span>(slice.<span class="title function_">charCodeAt</span>(i))</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 8 位无符号整数值的类型化数组。内容将初始化为 0。</span></span><br><span class="line">         <span class="comment">// 如果无法分配请求数目的字节，则将引发异常。</span></span><br><span class="line">         byteArrays.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(byteNumbers))</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">Blob</span>(byteArrays, &#123;</span><br><span class="line">         <span class="attr">type</span>: contentType</span><br><span class="line">       &#125;)</span><br><span class="line">       result = <span class="title class_">Object</span>.<span class="title function_">assign</span>(result, &#123;</span><br><span class="line">         <span class="comment">// 这里一定要处理一下 URL.createObjectURL</span></span><br><span class="line">         <span class="attr">preview</span>: <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(result),</span><br><span class="line">         <span class="attr">name</span>: <span class="string">`XXX.wav`</span></span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(result))</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><hr><p>发送方为系统：</p><ul><li><p>仅返回文本：显示文本</p></li><li><p>仅返回音频（参考发送方为自己的实现）<br> <img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417142600.png" alt="image.png"></p></li><li><p>返回文本，随即返回文本对应的合成音频，显示文本和播放按钮<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417142626.png" alt="image.png"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417142644.png" alt="image.png"></p><p>页面嵌入audio标签，将hidden设置为true使其不显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;audio-player&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">v-if</span>=<span class="string">&quot;!isPlaying&quot;</span> <span class="attr">icon-class</span>=<span class="string">&#x27;play&#x27;</span> @<span class="attr">click</span>=<span class="string">&quot;onClickAudioPlayer&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">v-else</span> <span class="attr">icon-class</span>=<span class="string">&#x27;pause&#x27;</span> @<span class="attr">click</span>=<span class="string">&quot;onClickAudioPlayer&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">audio</span> <span class="attr">:src</span>=<span class="string">&quot;playAudioUrl&quot;</span> <span class="attr">autostart</span>=<span class="string">&quot;true&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;audioPlayer&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>playAudioUrl</code>的生成参考上面生成的<code>wavesurfer</code>的url。<br>使用<code>isPlaying</code>参数记录当前音频的播放状态，并使用<code>setTimeout</code>方法，当播放了音频时长后，将播放按钮自动置为<code>play</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onClickAudioPlayer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isPlaying</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">audioPlayer</span>.<span class="title function_">pause</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isPlaying</span> = <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 每次点击时，开始播放，并在播放完毕将isPlaying置为false</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">audioPlayer</span>.<span class="property">currentTime</span> = <span class="number">0</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">audioPlayer</span>.<span class="title function_">play</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isPlaying</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 将正在播放重置为false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isPlaying</span> = <span class="literal">false</span></span><br><span class="line">      &#125;, <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">audioPlayer</span>.<span class="property">duration</span>) * <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li>聊天记录自动定位到最后一条：<br>使用<code>scrollIntoView()</code>方法</li><li>记录每次会话对应的记录ID（<code>recordId</code>）：<br>定义单次会话的id，并在返回的消息中回传，从而建立多条<code>websocket</code>返回的关联关系。</li></ul><hr><p>以上就是全部实现。难点主要是请求麦克风权限和对音频进行编码，<strong>在加wav头时必须保证和采样时的采样率、频率一致</strong> 。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 定义指令和动态路由实现权限控制</title>
      <link href="/2020/08/27/Vue%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E5%92%8C%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2020/08/27/Vue%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E5%92%8C%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>功能概述：</p><ul><li>根据后端返回接口，实现路由动态显示</li><li>实现按钮（HTML元素）级别权限控制</li></ul><p>涉及知识点：</p><ul><li>路由守卫</li><li>Vuex使用</li><li>Vue自定义指令</li></ul><h1 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h1><blockquote><p>前端工程采用Github开源项目<code>Vue-element-admin</code>作为模板，该项目地址：<a href="https://github.com/PanJiaChen/vue-element-admin">Github | Vue-element-admin</a> 。 </p></blockquote><p>在<code>Vue-element-admin</code>模板项目的<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/permission.js">src&#x2F;permission.js</a>文件中，给出了路由守卫、加载动态路由的实现方案，在实现了基于不同角色加载动态路由的功能。我们只需要稍作改动，就能将基于角色加载路由改造为基于权限加载路由。</p><blockquote><p><strong>导航守卫</strong>：可以应用于在路由跳转时，对用户的登录状态或权限进行判断。项目中使用全局前置守卫。参考Vue官方文档：<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></p></blockquote><h2 id="后台返回接口"><a href="#后台返回接口" class="headerlink" title="后台返回接口"></a>后台返回接口</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLWNlODcwMTFmNDBkYjljNzIucG5n?x-oss-process=image/format,png" alt="getUserInfo接口返回用户信息和路由、操作权限等"><br>权限系统后台采用基于角色的权限控制方案（<code>role-based access control</code>），如上图所示，<br>该用户信息接口将查询用户所具有的所有角色，再将这些角色的权限并集按照路由 - 操作整合在一起返回。在用户登录入系统后，我们从后台请求获得用户信息（个人信息 + 权限信息），作为全局属性储存在前端。不同权限的用户看到的页面不同，依赖于这些属性，它们决定了路由如何加载、页面如何渲染。</p><p>这种多个组件依赖一组属性的场景，Vue提供了<code>VueX</code>作为全局状态管理方案。</p><h2 id="使用VueX存储权限信息"><a href="#使用VueX存储权限信息" class="headerlink" title="使用VueX存储权限信息"></a>使用VueX存储权限信息</h2><p>在<code>src/store/moudules</code>目录下定义<code>permission.js</code> </p><h3 id="1-定义异步方法，方法内部包含HTTP请求从后台拉取数据"><a href="#1-定义异步方法，方法内部包含HTTP请求从后台拉取数据" class="headerlink" title="1.定义异步方法，方法内部包含HTTP请求从后台拉取数据"></a>1.定义异步方法，方法内部包含HTTP请求从后台拉取数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import http from &#x27;../../axios&#x27;;</span><br><span class="line">async function getUserInfo() &#123;</span><br><span class="line">  const res = await http.getUserInfo();</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>await</code>关键字，保证执行顺序正确。这里是为了保证能拿到接口返回的内容，以便于下一步处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const actions = &#123;</span><br><span class="line">  getPermissions(&#123; commit &#125;) &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">      getUserInfo().then(res =&gt; &#123;</span><br><span class="line">        if (res) &#123;</span><br><span class="line">          let permissionList = res.permissionList;</span><br><span class="line">          commit(&#x27;SET_PERMISSIONS&#x27;, permissionList);</span><br><span class="line">          // 根据后台返回的路由，生成实际可以访问的路由</span><br><span class="line">          let accessRoutes = filterAsyncRoutesByPermissions(asyncRoutes, permissionList);</span><br><span class="line">          commit(&#x27;SET_ROUTES&#x27;, accessRoutes);</span><br><span class="line">          commit(&#x27;SET_USER_INFO&#x27;, &#123; name: res.name, accountName: res.accountName &#125;)</span><br><span class="line">          resolve(accessRoutes);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          resolve([]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).catch(() =&gt; resolve([]));</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VueX中action定义异步方法。</p><h3 id="2-定义静态、动态路由"><a href="#2-定义静态、动态路由" class="headerlink" title="2. 定义静态、动态路由"></a>2. 定义静态、动态路由</h3><p><code>src/router/index.js</code><br>静态路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export const constantRoutes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/redirect&#x27;,</span><br><span class="line">        component: Layout,</span><br><span class="line">        hidden: true,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;/redirect/:path(.*)&#x27;,</span><br><span class="line">                component: () =&gt; import(&#x27;@/views/redirect/index&#x27;),</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    ,</span><br><span class="line">  ...</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/404&#x27;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/error-page/404&#x27;),</span><br><span class="line">        hidden: true,</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>动态路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export const asyncRoutes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/system&#x27;,</span><br><span class="line">        component: Layout,</span><br><span class="line">        name: &#x27;系统管理&#x27;,</span><br><span class="line">        meta: &#123; title: &#x27;系统管理&#x27;, icon: &#x27;el-icon-user&#x27;, affix: true &#125;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: &#x27;/system&#x27;,</span><br><span class="line">                component: () =&gt; import(&#x27;@/views/management/system/Index&#x27;),</span><br><span class="line">                meta: &#123; title: &#x27;系统管理&#x27;, icon: &#x27;el-icon-setting&#x27;, affix: true &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>静态路由中定义了所有用户均可访问的路由，动态路由中定义了动态加载的路由。</p><h3 id="3-根据权限过滤并排序路由"><a href="#3-根据权限过滤并排序路由" class="headerlink" title="3.根据权限过滤并排序路由"></a>3.根据权限过滤并排序路由</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">export function filterAsyncRoutesByPermissions(routes, menus) &#123;</span><br><span class="line">  const res = []</span><br><span class="line">  routes.forEach(route =&gt; &#123;</span><br><span class="line">    const tmp = &#123; ...route &#125;</span><br><span class="line">    let index = menus.map(menu =&gt; menu.url).indexOf(tmp.path);</span><br><span class="line">    if (index != -1) &#123;</span><br><span class="line">      // 后端返回路由信息覆盖前端定义路由信息</span><br><span class="line">      tmp.name = menus[index].name;</span><br><span class="line">      // debugger;</span><br><span class="line">      tmp.meta.title = menus[index].name;</span><br><span class="line">      tmp.children.forEach(child =&gt; &#123;</span><br><span class="line">        if (child.path == tmp.path) &#123;</span><br><span class="line">          child.meta.title = tmp.meta.title;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      res.push(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  // 根据返回菜单顺序，确定路由顺序</span><br><span class="line">  /**</span><br><span class="line">   * TODO 子菜单排序</span><br><span class="line">   */</span><br><span class="line">  res.sort((routeA, routeB) =&gt; menus.map(menu =&gt; menu.url).indexOf(routeA.path) - menus.map(menu =&gt; menu.url).indexOf(routeB.path))</span><br><span class="line">  return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据url匹配，匹配到url的路由则加入数组。最终用户可以访问的路由 &#x3D; 允许访问的动态路由 + 不需要权限的静态路由。</p><h3 id="4-src-permission-js中的处理逻辑"><a href="#4-src-permission-js中的处理逻辑" class="headerlink" title="4.src&#x2F;permission.js中的处理逻辑"></a>4.src&#x2F;permission.js中的处理逻辑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/auth-redirect&#x27;</span>]; <span class="comment">// no redirect whitelist</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">//start progress bar</span></span><br><span class="line">    <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">    <span class="keyword">if</span> (hasToken) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">          <span class="comment">// ... 省略登出逻辑</span></span><br><span class="line">            <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="comment">// 查看是否已缓存过动态路由</span></span><br><span class="line">            <span class="keyword">const</span> hasRoutes = store.<span class="property">getters</span>.<span class="property">permission_routes</span> &amp;&amp; store.<span class="property">getters</span>.<span class="property">permission_routes</span>.<span class="property">length</span> &gt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (hasRoutes) &#123;</span><br><span class="line">                <span class="title function_">next</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> accessRoutes = <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;permission/getPermissions&#x27;</span>);</span><br><span class="line">                    router.<span class="title function_">addRoutes</span>(accessRoutes);</span><br><span class="line">                    <span class="keyword">const</span> toRoute = accessRoutes.<span class="title function_">filter</span>(<span class="function">(<span class="params">route</span>) =&gt;</span> route.<span class="property">path</span> == to.<span class="property">path</span>);</span><br><span class="line">                    <span class="title function_">next</span>(&#123; <span class="attr">path</span>: toRoute.<span class="property">length</span> &gt; <span class="number">0</span> ? toRoute[<span class="number">0</span>].<span class="property">path</span> : accessRoutes[<span class="number">0</span>].<span class="property">path</span>, <span class="attr">replace</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="title function_">next</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">                    <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// in the free login whitelist, go directly</span></span><br><span class="line">            <span class="title function_">next</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">            <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// finish progress bar</span></span><br><span class="line">    <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上是动态路由实现方案。</p><hr><p><code>Vue</code>支持自定义指令，用法类似于Vue原生指令如<code>v-model</code>、<code>v-on</code>等，网上查阅到的大部分细粒度权限控制方案都使用这种方法。下面将给出我的实现。</p><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>自定义指令 <code>v-permission</code>：</p><p><code>src/directive/permission/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = binding</span><br><span class="line">    <span class="keyword">const</span> permissions = store.<span class="property">getters</span> &amp;&amp; store.<span class="property">getters</span>.<span class="property">permissions</span>;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="comment">// 获取当前所挂载的vue所在的上下文节点url</span></span><br><span class="line">      <span class="keyword">let</span> url = vnode.<span class="property">context</span>.<span class="property">$route</span>.<span class="property">path</span>;</span><br><span class="line">      <span class="keyword">let</span> permissionActions = permissions[url];</span><br><span class="line">      <span class="comment">// console.log(permissionActions)</span></span><br><span class="line">      <span class="keyword">const</span> hasPermission = permissionActions.<span class="title function_">some</span>(<span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.<span class="property">constructor</span> === <span class="title class_">Array</span>) &#123;</span><br><span class="line">          <span class="comment">// 或判断： 只要存在任1，判定为有权限</span></span><br><span class="line">          <span class="keyword">return</span> value.<span class="title function_">includes</span>(action);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> action === value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">        el.<span class="property">parentNode</span> &amp;&amp; el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`need further permissions!`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端给出的权限数据是路由（url）与操作的对应Map，url可以通过将要挂载到的vnode属性拿到。这个方法有点类似于AOP，在虚拟元素挂载之后做判断，如果没有权限则从父元素上移除掉。<br>使用方法：</p><ul><li>举例一：单个按钮 （注意双引号套单引号的写法）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click.native.prevent</span>=<span class="string">&quot;editUser(scope.row)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">v-permission</span>=<span class="string">&quot;&#x27;op_edit&#x27;&quot;</span>&gt;</span></span><br><span class="line">                               编辑</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>举例二：或判断（传入数组），只要拥有数组中一个权限，则保留元素，所有权限都没有，则移除。<br>在上一篇博客<a href="https://www.jianshu.com/p/066c4ce4c767">https://www.jianshu.com/p/066c4ce4c767</a><br>下拉菜单上增加控制：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLTJiNDNjZGFjNThmZmQzM2IucG5n?x-oss-process=image/format,png" alt="dot-dropdown"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLWExZTQyODhhOTAzODA4MGQucG5n?x-oss-process=image/format,png" alt="数据定义"><br>相应数据定义中增加action属性。</li></ul><p>该方法无法覆盖所有场景，所以依然给出相应工具类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param &#123;*当前页面路由&#125; url </span><br><span class="line"> * @param &#123;*操作code e.g op_add &#125; value </span><br><span class="line"> * @return true/false 是否有该项权限</span><br><span class="line"> */</span><br><span class="line">function checkPermission(url, value) &#123;</span><br><span class="line"></span><br><span class="line">    const permissions = store.getters &amp;&amp; store.getters.permissions;</span><br><span class="line">    let permissionActions = permissions[url];</span><br><span class="line"></span><br><span class="line">    if (!permissionActions) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let hasPermission = permissionActions.some(action =&gt; &#123;</span><br><span class="line">        if (value.constructor === Array) &#123;</span><br><span class="line">            // 或判断： 只要存在任1，判定为有权限</span><br><span class="line">            return value.includes(action);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return action === value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return hasPermission;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 以上完成按钮粒度权限控制。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue+Element UI 树形控件整合下拉功能菜单（tree + dropdown +input）</title>
      <link href="/2020/08/08/Vue+Element%20UI%20%E6%A0%91%E5%BD%A2%E6%8E%A7%E4%BB%B6%E6%95%B4%E5%90%88%E4%B8%8B%E6%8B%89%E5%8A%9F%E8%83%BD%E8%8F%9C%E5%8D%95%EF%BC%88tree%20+%20dropdown%20+input%EF%BC%89/"/>
      <url>/2020/08/08/Vue+Element%20UI%20%E6%A0%91%E5%BD%A2%E6%8E%A7%E4%BB%B6%E6%95%B4%E5%90%88%E4%B8%8B%E6%8B%89%E5%8A%9F%E8%83%BD%E8%8F%9C%E5%8D%95%EF%BC%88tree%20+%20dropdown%20+input%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这篇博客主要介绍树形控件的两个小小的功能：</p><ul><li>下拉菜单</li><li>输入过滤框</li></ul><p>以CSS样式为主，也会涉及到Vue组件和element组件的使用。</p><p>对于没有层级的数据，我们可以使用表格或卡片来展示。要展示或建立层级关系，就一定会用到树形组件了。<br>使用Vue + Element UI，构建出最基本的树如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLTkyMGUwZTA5MDJmOTMyM2YucG5n?x-oss-process=image/format,png" alt="最简单的树结构"><br>现在我们就要在这个基础上进行改造，使页面更加符合我们的交互场景。</p><h1 id="一、下拉菜单"><a href="#一、下拉菜单" class="headerlink" title="一、下拉菜单"></a>一、下拉菜单</h1><p>将下拉菜单嵌到树节点中，使操作更加简便、紧凑。</p><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p>效果如图：</p><ul><li><p>图示1：悬浮在树节点状态<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLTE0NGI2ZDJmOGYzMWM0ODgucG5n?x-oss-process=image/format,png" alt="悬浮在树节点状态"></p></li><li><p>图示2：点击三个点图标状态<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLWMxMzFmMmExNDBjZTk4NTYucG5n?x-oss-process=image/format,png" alt="点击三个点图标状态"></p></li><li><p>图示3： 选中并选择菜单<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLTdmOGY5MzA5MGU5OGQ5ZWEucG5n?x-oss-process=image/format,png" alt="下拉菜单效果"></p></li></ul><p>如上，当鼠标悬浮在树节点上时，出现竖着的三个小点，点击时弹出下拉菜单，显示可以对树节点进行的操作。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="1、使用插槽（slot）-子组件"><a href="#1、使用插槽（slot）-子组件" class="headerlink" title="1、使用插槽（slot） + 子组件"></a>1、使用插槽（<code>slot</code>） + 子组件</h3><ul><li>父组件（含有树形控件）模板代码<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tree</span> <span class="attr">:data</span>=<span class="string">&quot;resourceTree&quot;</span> <span class="attr">:ref</span>=<span class="string">&quot;tree&quot;</span> <span class="attr">node-key</span>=<span class="string">&quot;id&quot;</span>  <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:highlight-current</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:check-on-click-node</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-node&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; node, data &#125;&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-node-wrapper&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-node-label&quot;</span>&gt;</span></span><br><span class="line">                           &#123;&#123; node.label &#125;&#125;</span><br><span class="line">                       <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;operate-btns&quot;</span>&gt;</span>                </span><br><span class="line">                           <span class="tag">&lt;<span class="name">dot-dropdown</span>  <span class="attr">:events</span>=<span class="string">&quot;dropMenuEvents&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;&#123;node,data&#125;&quot;</span> @<span class="attr">addNode</span>=<span class="string">&quot;addNode&quot;</span> /&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2、-DotDropdown-下拉框代码"><a href="#2、-DotDropdown-下拉框代码" class="headerlink" title="2、 DotDropdown 下拉框代码"></a>2、 DotDropdown 下拉框代码</h3><p>很多树形结构都会使用该下拉框，所以定义组件，方便复用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dropdown</span> <span class="attr">trigger</span>=<span class="string">&quot;click&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-menu&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-more rotate &quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dropdown-menu</span> <span class="attr">slot</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in events&#x27;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:divided</span>=<span class="string">&quot;index &gt;0&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;clickMenu(item)&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;item.label&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">events</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> [</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">label</span>: <span class="string">&#x27;新建同级&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">funcName</span>: <span class="string">&#x27;addNode&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">label</span>: <span class="string">&#x27;编辑&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">funcName</span>: <span class="string">&#x27;editNode&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">label</span>: <span class="string">&#x27;删除&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">funcName</span>: <span class="string">&#x27;deleteNode&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注入数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Object</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">clickMenu</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(item.<span class="property">funcName</span>, <span class="variable language_">this</span>.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br></pre></td></tr></table></figure><p>模板代码很简单，是一个点击触发的下拉菜单组件（<code>trigger=&quot;click&quot;</code>），菜单循环props中传入的events属性，data为从父组件拿到的数据，定义了菜单和菜单的事件（方法名称），当点击菜单（<code>@click.native</code>）时，触发：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(item.<span class="property">funcName</span>, <span class="variable language_">this</span>.<span class="property">data</span>)</span><br></pre></td></tr></table></figure><p>容易看出，数据和实现方法都是父组件的，该子组件只做了转发。</p><h3 id="3、-父组件使用子组件"><a href="#3、-父组件使用子组件" class="headerlink" title="3、 父组件使用子组件"></a>3、 父组件使用子组件</h3><p>引入和注册子组件，并定义好对应的方法即可。下面给出使用示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;operate-btns&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dot-dropdown</span> <span class="attr">v-if</span>=<span class="string">&quot;data.type === 1&quot;</span> <span class="attr">:events</span>=<span class="string">&quot;dropMenuEvents&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;&#123;node,data&#125;&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dot-dropdown</span> <span class="attr">v-if</span>=<span class="string">&quot;data.type === 2&quot;</span> <span class="attr">:events</span>=<span class="string">&quot;sysDropMenuEvents&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;&#123;node,data&#125;&quot;</span> @<span class="attr">addNode</span>=<span class="string">&quot;addResource&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据数据节点的类型，注入不同的<code>events</code>属性，显示不同的下拉框菜单。（常用场景：根节点不可删除、不可编辑，只能新增子级，叶子节点可以新增同级和子级）。<br>在父组件中的data中定义:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sysDropMenuEvents: [&#123; label: &#x27;新增资源&#x27;, funcName: &#x27;addNode&#x27; &#125;],</span><br><span class="line"></span><br><span class="line">dropMenuEvents: [</span><br><span class="line">      &#123; label: &#x27;新建同级&#x27;, funcName: &#x27;addPeerNode&#x27; &#125;,</span><br><span class="line">      &#123; label: &#x27;新建子级&#x27;, funcName: &#x27;addNode&#x27; &#125;,</span><br><span class="line">      &#123; label: &#x27;分配操作&#x27;, funcName: &#x27;distributeAction&#x27; &#125;,</span><br><span class="line">      &#123; label: &#x27;编辑&#x27;, funcName: &#x27;editNode&#x27; &#125;,</span><br><span class="line">      &#123; label: &#x27;删除&#x27;, funcName: &#x27;removeNode&#x27; &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>父组件编写实际功能方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开新增资源弹窗</span></span><br><span class="line">    <span class="title function_">addResource</span>(<span class="params">&#123; node, data &#125;</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>父组件注入data时，将树节点插槽中的node和data都注入了进去（<code>:data=&quot;&#123;node,data&#125;&quot;</code>），在使用时也可以用过同样的大括号+属性名的方式拿到对应的属性，这里体现了ES6解构赋值的特性。</p></blockquote><h3 id="4、父组件样式"><a href="#4、父组件样式" class="headerlink" title="4、父组件样式"></a>4、父组件样式</h3><p>父组件中，树节点的样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.el-tree-node__content &#123;</span><br><span class="line">     position: relative;</span><br><span class="line">     .operate-btns &#123;</span><br><span class="line">         position: absolute;</span><br><span class="line">         right: 2px;</span><br><span class="line">         display: none;</span><br><span class="line">     &#125;</span><br><span class="line">     // 鼠标悬停时，展示</span><br><span class="line">     &amp;:hover,</span><br><span class="line">     :focus-within &#123;</span><br><span class="line">         .operate-btns &#123;</span><br><span class="line">             display: inline;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子绝对，父相对，使操作按钮靠贴边显示</li><li>无状态时不显示，hover或内部元素被激活时显示（<code>:hover :focus-within</code>）</li></ul><h3 id="5、子组件样式"><a href="#5、子组件样式" class="headerlink" title="5、子组件样式"></a>5、子组件样式</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLWQyMWRhNmE4ZjU0YzcxNDQucG5n?x-oss-process=image/format,png" alt="最终效果"></p><ul><li>旋转图标<br>原本的图标使用的是element UI提供的 <code>&lt;i class=&quot;el-icon-more&quot; /&gt;</code>，是横着的点点点↓<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLTNhNzA5Njg1ZWI2OGY5OWQucG5n?x-oss-process=image/format,png" alt="原本的图标"></li></ul><p>图标有点小，颜色也不喜欢。改下字体让它变大一点。这里注意需要修改的是元素的before伪类:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> .el-icon-more:before &#123;</span><br><span class="line">      content: &quot;\E794&quot;;</span><br><span class="line">      color: #c0c4cc;</span><br><span class="line">      font-size: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加一个<code>transform</code>将它旋转90°，悬停时鼠标样式为<code>pointer</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.rotate &#123;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      margin-left: 5px;</span><br><span class="line">      transform: rotate(90deg);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>点击时，增加圆形半透明的灰色背景：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.rotate:focus &#123;</span><br><span class="line">      width: 20px;</span><br><span class="line">      height: 20px;</span><br><span class="line">      border-radius: 4em;</span><br><span class="line">      background-color: rgba(130, 132, 138, 0.2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，下拉全部完成。<br>除了用在树节点中，也可以用在表格中。</p><h1 id="输入过滤框"><a href="#输入过滤框" class="headerlink" title="输入过滤框"></a>输入过滤框</h1><p><code>el-tree</code>提供了过滤方法，使用<code>:filter-node-method=&quot;filterNode&quot;</code>属性即可。这里主要分享样式：<br>效果：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLWU0NTIzMjFiODk0NGIzOWIucG5n?x-oss-process=image/format,png" alt="非激活状态"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLTQwNmFkNzZlY2Y5MGYyM2IucG5n?x-oss-process=image/format,png" alt="激活输入框状态"></p><p>模板代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter-input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入资源名称进行过滤&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;filterText&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">prefix-icon</span>=<span class="string">&quot;el-icon-search&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>去掉输入框上、左右边框和圆角，并两侧留出10px边距<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.el-input__inner,.el-input-group__prepend&#123;</span><br><span class="line">     width: calc(100% - 20px);</span><br><span class="line">     margin:0 10px;</span><br><span class="line">     height: 40px;</span><br><span class="line">     border-top:none;</span><br><span class="line">     border-width: 0 0 1px;</span><br><span class="line">     border-radius:0;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>调整搜索图标大小、颜色和粗细，并稍微调整位置：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.el-input__prefix&#123;</span><br><span class="line">  .el-input__icon&#123;</span><br><span class="line">    margin-right: 15px;</span><br><span class="line">    display: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line">  font-size:18px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时点击输入框，只有下边变蓝色，希望图标的样式也随之更改。<br>只有<code>input</code>被触发了<code>focus</code>事件，<code>icon</code>感知不到，<code>:focus</code>伪类不满足需求了。我们可以使用<code>:focus-within</code>伪类，加在<code>icon</code>和<code>input</code>共同的父类上。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.el-input:focus-within&#123;</span><br><span class="line">      .el-icon-search:before &#123;</span><br><span class="line">         color: #3c6eff;</span><br><span class="line">         font-weight: bold;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>至此完成。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没写前端之前以为前端只是展示从后端拿到的数据，但现在觉得，前端作为面向用户的直接门面，承担了绝大部分交互体验优化的任务。<br>合理的布局和样式能避免用户的无效操作，体验的优化是一个漫长而细致的过程，可能需要仔细打磨，才能做出好用的产品。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux虚拟网络：Docker网络知识之基础篇</title>
      <link href="/2020/06/30/Linux%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%EF%BC%9ADocker%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2020/06/30/Linux%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%EF%BC%9ADocker%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>我们在工作中应用了docker容器化技术，服务的部署、维护和扩展都方便了很多。然而，近期在私有化部署过程中，由于不同服务器环境的复杂多变，常常遇到网络方面的问题，现象为容器服务运行正常，但宿主机、容器之间网络不通。<br>本篇博客旨在总结：</p><ul><li>Linux虚拟网络及docker网络的基础知识</li><li>遇到网络问题时排查问题思路</li><li>常用指令和工具的使用</li></ul><p>以上三部分作为之后的参考，本篇文章也将会在日后实践过程中逐渐补充。本篇为第一篇，主要介绍基础知识</p><h1 id="Linux网络虚拟化基础"><a href="#Linux网络虚拟化基础" class="headerlink" title="Linux网络虚拟化基础"></a>Linux网络虚拟化基础</h1><h2 id="Network-Namespace"><a href="#Network-Namespace" class="headerlink" title="Network Namespace"></a>Network Namespace</h2><blockquote><p>网络命名空间，是Linux 2.6.x内核版本之后提供的功能，主要用于资源的隔离。namespace是实现网络虚拟化的重要功能，使用它，一个Linux系统可以抽象出多个网络子系统，各个子系统都有自己独立的网卡、路由表、iptables、协议栈等网络资源。不管是虚拟机还是容器，运行时仿佛自己都在独立的网络中。</p></blockquote><p><code>ip netns</code>命令用于完成对ns的各种操作，<code>ip netns exec</code>子命令用于在namespace执行指令。</p><h2 id="Veth-Pair（Virtual-Ethernet-Pair）"><a href="#Veth-Pair（Virtual-Ethernet-Pair）" class="headerlink" title="Veth Pair（Virtual Ethernet Pair）"></a>Veth Pair（Virtual Ethernet Pair）</h2><blockquote><p>成对虚拟设备端口。它总是成对出现，一端连着协议栈，一端彼此连着。从其中一个端口发出的数据包，可以直接出现在与它对应的另一个端口上，即使它们在不同的namespace中。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/6810620-8187694f1d4d7dd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Veth Pair功能：在不同的ns中通信"><br>如上图，一对veth-pair直接将两个namespace连接在一起。</p><ul><li>使用如下图所示命令，测试veth pair功能<br><img src="https://upload-images.jianshu.io/upload_images/6810620-88e4ef5d99f13359.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试使用veth pair连通两个namespace"></li></ul><h2 id="Bridge-网桥"><a href="#Bridge-网桥" class="headerlink" title="Bridge 网桥"></a>Bridge 网桥</h2><p>veth pair打破了Network Namespace的限制，实现了不同Network Namespace之间的通信。但是veth pair的局限性也很明显，只能实现两个网络接口的通信。<br>Linux中引入网桥来实现多个网络接口之间的通信，可以将一台机器上的若干接口连通起来。在OSI网络模型中，网桥属于数据链路层。</p><p><img src="https://upload-images.jianshu.io/upload_images/6810620-8b57f92a2c1941ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网桥连通多个端口示意图"></p><p>和网桥相关的操作使用命令<code>brctl</code>，需要先安装<code>bridge-utils</code>工具包。安装指令：<br><code>yum install bridge-utils</code></p><h2 id="iptables-Netfilter"><a href="#iptables-Netfilter" class="headerlink" title="iptables&#x2F;Netfilter"></a>iptables&#x2F;Netfilter</h2><p>请参考：<a href="http://www.zsythink.net/archives/1199">iptables详解（1）：iptables概念</a></p><h1 id="Docker网络基础"><a href="#Docker网络基础" class="headerlink" title="Docker网络基础"></a>Docker网络基础</h1><p>Docker支持四种网络模式：host模式，container模式，none模式和bridge模式。默认使用的是桥接模式。<br>使用<code>docker network ls</code>指令可以查看到宿主机上所有的Docker网络：<br><img src="https://upload-images.jianshu.io/upload_images/6810620-1986bf9ba4a3a090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="当前宿主机所有的docker网络"></p><h2 id="Bridge-桥接模式"><a href="#Bridge-桥接模式" class="headerlink" title="Bridge 桥接模式"></a>Bridge 桥接模式</h2><blockquote><p>Docker在启动时，默认会自动创建网桥设备docker0，Docker在运行时，守护进程通过docker0为docker的容器提供网络通信服务。<br>当Docker启动容器时，会创建一对Veth Pair，并将其中一个veth网络设备附加到网桥docker0，另一个加入容器的network namespace中。</p></blockquote><p>根据上一节中关于网桥的定义，我们很容易画出示意图：</p><p><img src="https://upload-images.jianshu.io/upload_images/6810620-9d869758c007bf38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Docker网桥模型"></p><p>由上图可得，容器可以通过网桥互相通信。如果不想使用默认的网桥设备，也可以在启动docker daemon的时候使用<code> --bridge==BRIDGE</code>参数指定其他网桥。<br>然而这还不够，Docker容器还需要与外网进行相互通信。这里涉及到NAT相关知识。</p><blockquote><ul><li>NAT<br>网络地址转换，就是替换IP报文头部的地址信息。NAT通常部署在一个组织的网络出口位置，通过将内部网络IP地址替换为出口的IP地址，提供公网可达性和上层协议的链接地址。（<a href="https://www.zhihu.com/question/31332694">请参考：NAT相关科普</a>）</li><li>SNAT<br>源地址转换即内网地址向外访问时，发起访问的内网ip地址转换为指定的ip地址（可指定具体的服务以及相应的端口或端口范围），这可以使内网中使用保留ip地址的主机访问外部网络，即内网的多部主机可以通过一个有效的公网ip地址访问外部网络。</li></ul></blockquote><p>使用<code>iptables -t nat -vnL</code>指令查看宿主机NAT表。</p><p><img src="https://upload-images.jianshu.io/upload_images/6810620-2a4faa72585b3bb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="宿主机iptables表部分截图"></p><p>查看规则：<br><code>2051  125K MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0 </code><br>这条规则就关系着Docker容器与外界的通信，含义为将源地址为172.17.0.0&#x2F;16的数据包（就是docker容器中发出的数据），如果不是从docker0网卡发出时，做SNAT转换，将IP包的源地址替换为相应网卡的地址。<br>对于外界来说，从docker容器内发出的请求，和宿主机发出的请求相同。</p><p>外界想要访问Docker容器的服务呢？<br>在启动docker容器时，我们使用 <code>-p</code>参数指定端口，这时其实是在iptables中添加了规则，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/6810620-440166ee3f148b3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="宿主机iptables表部分截图"></p><p>DNAT规则，将发送到宿主机的流量转发到真正提供服务的容器IP端口上。</p><h2 id="host模式"><a href="#host模式" class="headerlink" title="host模式"></a>host模式</h2><p>Docker容器与宿主机使用相同的网络环境，直接使用宿主机的IP和端口及其他网络设备。这样虽然避免了很多桥接带来的网络问题，但同时也容易造成网络环境的混淆和冲突，比如端口被占用等。不推荐。</p><h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><p>指定与某一容器共享网络。</p><h2 id="none"><a href="#none" class="headerlink" title="none"></a>none</h2><p>不配置任何网络。</p><h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><p>docker容器之间还可以通过<code>--link</code>阐述进行通信，当提供服务的容器只希望个别容器能够访问时，我们可以使用该指令，提供更为高效、安全的连接方式。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>对Linux虚拟网络基础知识的简单学习后，有助于理清楚下一步排查问题思路。<br>下一篇博客将介绍目前遇到问题时的排查思路和解决方案，并列举一些常用工具。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CICD Jenkins &amp; Gitlab集成 WebHook触发构建</title>
      <link href="/2020/06/06/CICD%20Jenkins%20&amp;%20Gitlab%E9%9B%86%E6%88%90%20WebHook%E8%A7%A6%E5%8F%91%E6%9E%84%E5%BB%BA/"/>
      <url>/2020/06/06/CICD%20Jenkins%20&amp;%20Gitlab%E9%9B%86%E6%88%90%20WebHook%E8%A7%A6%E5%8F%91%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>在上一篇博客中，我们学习了<code>Jenkins</code>的搭建和插件+流水线的基本使用方法，<code>Jenkins</code>极大地提升了部署效率。<br>最近想学习一下如何集成<code>GitLab webhook</code>，实现进一步解放双手，目标：</p><ul><li>推送（<code>git push</code>）触发构建</li><li>推送到指定分支触发构建</li><li>根据<code>commit</code>的文件，结合<code>mvn -pl </code>指令，实现部分增量构建，并记录<code>commit</code>信息</li></ul><p>推送事件也可以换成<code>Tag push events</code>、<code>Merge request events</code>等其他触发条件，根据需要自由选择。</p><h1 id="基础实现"><a href="#基础实现" class="headerlink" title="基础实现"></a>基础实现</h1><p>使用<code>Gitlab Hook Plugin</code>，并在Jenkins和GitLab中分别配置。</p><h2 id="下载并配置插件"><a href="#下载并配置插件" class="headerlink" title="下载并配置插件"></a>下载并配置插件</h2><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153252.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153238.png" alt="image.png"></p><h2 id="在GitLab中配置"><a href="#在GitLab中配置" class="headerlink" title="在GitLab中配置"></a>在<code>GitLab</code>中配置</h2><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153303.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153312.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153324.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153333.png" alt="image.png"></p><p><strong>至此，目标中的前两条，推送构建和推送到指定分支构建实现！</strong></p><h1 id="进阶实现"><a href="#进阶实现" class="headerlink" title="进阶实现"></a>进阶实现</h1><p>从上述过程，我们也可以看出，<code>WebHook</code>的本质就是从<code>GitLab</code>发了一条请求，<code>Jenkins</code>配置了一个终端地址（<code>endpoint</code>）来接收，从而实现了两个步骤的串联。<br>这个请求实质上就是一条<code>HTTP POST</code>请求。<br>相信接触过服务互相调用的小伙伴们都不陌生。有了请求体，我们自然可以拿到自己想要的东西，进行进一步的处理了。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153344.png" alt="image.png"></p><h2 id="Jenkins插件-Generic-WebHook-Trigger-Pugin"><a href="#Jenkins插件-Generic-WebHook-Trigger-Pugin" class="headerlink" title="Jenkins插件:Generic WebHook Trigger Pugin"></a>Jenkins插件:Generic WebHook Trigger Pugin</h2><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153354.png" alt="image.png"></p><p>从插件简介来看，支持接收任何一个<code>HTTP</code>请求，当然也包括接收<code>GitLab</code>发送的请求。</p><h3 id="在Jenkins-Job中配置接收地址"><a href="#在Jenkins-Job中配置接收地址" class="headerlink" title="在Jenkins Job中配置接收地址"></a>在<code>Jenkins Job</code>中配置接收地址</h3><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153403.png" alt="image.png"></p><h3 id="配置鉴权token"><a href="#配置鉴权token" class="headerlink" title="配置鉴权token"></a>配置鉴权token</h3><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153413.png" alt="image.png"></p><p>我直接使用<code>admin</code>帐号创建，在发送请求时需要携带此token。</p><h3 id="GitLab配置"><a href="#GitLab配置" class="headerlink" title="GitLab配置"></a>GitLab配置</h3><p>在Gitlab中的配置与上文相同，格式为：<br><code>http://admin:$&#123;token&#125;@$&#123;JENKINS_IP&#125;:$&#123;PORT&#125;/generic-webhook-trigger/invoke</code><br>填上刚刚配置生成的<code>token</code>和自己的<code>Jenkins</code>地址和端口即可。<br>同样可以使用自带的测试来测试连接，返回200成功。</p><ul><li>如果返回<code>404</code>，看配置的地址是否有误</li><li>返回<code>403</code>，查看权限配置是否有误<br><strong>至此，连接建立成功！</strong></li></ul><h1 id="编写流水线脚本"><a href="#编写流水线脚本" class="headerlink" title="编写流水线脚本"></a>编写流水线脚本</h1><p>关于如何使用声明式流水线，上一次的博客已有所介绍。这里主要说明如何加入触发器语法。</p><h2 id="流水线触发器语法"><a href="#流水线触发器语法" class="headerlink" title="流水线触发器语法"></a>流水线触发器语法</h2><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153423.png" alt="image.png"></p><p>要从请求体中拿到所需要的参数，可以通过配置获取JSONPath参数实现。</p><p>在流水线中加入下列语句，<strong>即可当作变量在流水线脚本中使用。</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">       GenericTrigger(</span><br><span class="line">           <span class="symbol">genericVariables:</span> [</span><br><span class="line">             [<span class="attr">key:</span> <span class="string">&#x27;branch&#x27;</span>, <span class="attr">value:</span> <span class="string">&#x27;$.ref&#x27;</span>],</span><br><span class="line">             [<span class="attr">key:</span><span class="string">&#x27;commitText&#x27;</span>, <span class="attr">value:</span><span class="string">&#x27;$.commits&#x27;</span>]</span><br><span class="line">           ],</span><br><span class="line">           <span class="symbol">causeString:</span> <span class="string">&#x27;Triggered on $branch&#x27;</span> ,</span><br><span class="line">           <span class="symbol">printContributedVariables:</span> <span class="literal">false</span>,</span><br><span class="line">           <span class="symbol">printPostContent:</span> <span class="literal">false</span></span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>序列化JSON<br>要想在pipeline脚本中将字符串反序列化成JSON对象，可以引入 <code>Pipeline Utility Step</code>插件，该插件提供了一些工具方法。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153442.png" alt="image.png"></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> commits = readJSON <span class="attr">text:</span> commitText</span><br></pre></td></tr></table></figure><blockquote><p>流水线脚本使用<code>Groovy</code>语言，该语言基于<code>Java</code>编写，也集成了一些有趣的特性。在IDEA中编写只需要配置<code>Groovy Library</code>即可。</p></blockquote><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><ul><li>根据commits，定义patternMap，匹配到指定正则文件格式，构建指定组件。</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">def</span> modifiedFile = [];</span><br><span class="line">    <span class="keyword">for</span> (commit <span class="keyword">in</span> commits) &#123;</span><br><span class="line">            modifiedFile.addAll(commit.getAt(<span class="string">&quot;added&quot;</span>).findAll())</span><br><span class="line">            modifiedFile.addAll(commit.getAt(<span class="string">&quot;modified&quot;</span>).findAll())</span><br><span class="line">            modifiedFile.addAll(commit.getAt(<span class="string">&quot;removed&quot;</span>).findAll())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> buildComponents = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">def</span> patternMap = [<span class="string">&#x27;mark-engine-manager/.*&#x27;</span>: <span class="string">&#x27;manager&#x27;</span>, <span class="string">&#x27;mark-tools/.*&#x27;</span>: <span class="string">&#x27;web&#x27;</span>,<span class="string">&#x27;mark-engine-dm/.*&#x27;</span>:<span class="string">&#x27;dm&#x27;</span>,<span class="string">&#x27;mark-engine-web/.*&#x27;</span>:<span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;mark-engine-uc/.*&#x27;</span>:<span class="string">&#x27;uc&#x27;</span>,<span class="string">&#x27;mark-engine-gateway/.*&#x27;</span>:<span class="string">&#x27;gateway&#x27;</span>];</span><br><span class="line"><span class="comment">//遍历所有修改了的文件</span></span><br><span class="line">        <span class="keyword">for</span> (file <span class="keyword">in</span> modifiedFile) &#123;</span><br><span class="line">            <span class="keyword">for</span>(entry <span class="keyword">in</span> patternMap.entrySet())&#123;</span><br><span class="line">                <span class="keyword">if</span> (file ==~ entry.key) &#123;</span><br><span class="line">                    buildComponents &lt;&lt; entry.value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>根据需要构建的组件，拼接<code>maven</code>构建指令。<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String mvnCmd = <span class="string">&#x27;mvn clean install -Dmaven.test.skip=true&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(component <span class="keyword">in</span> buildComponents)&#123;</span><br><span class="line">      mvnCmd = mvnCmd + <span class="string">&#x27; -pl mark-engine-&#x27;</span>+component+<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">&#125;                    </span><br></pre></td></tr></table></figure><strong>经过调试和测试push，三个目标全部完成。</strong></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>一切都是代码</strong>，CICD当然也可以使用代码实现。经过实践我们可以探索出Jenkins更多有趣的玩法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-codemirror + Java Compiler实现Java Web IDE</title>
      <link href="/2020/05/23/vue-codemirror%20+%20Java%20Compiler%E5%AE%9E%E7%8E%B0Java%20Web%20IDE/"/>
      <url>/2020/05/23/vue-codemirror%20+%20Java%20Compiler%E5%AE%9E%E7%8E%B0Java%20Web%20IDE/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>最近同事告诉我一个很有趣的需求：让用户（应用场景中，一般为其他开发者）自己填入<strong>Java代码片段</strong>，代码片段的内容为已经规定好的模板类的<strong>继承类</strong>，实现模板类定义的方法。我们的项目要实现动态编译代码片段，存储代码片段和用户操作记录的映射关系，并能够在业务中载入代码片段执行。</p></blockquote><p>这有点像我们提供一个模板模式的架构，只不过模板类的实现类由外部接口填入代码片段动态实现。相较让其他开发者直接参与项目开发，无疑：</p><ol><li>降低了侵入风险</li><li>向其他开发者隐藏了大部分实现</li><li>降低操作难度和开发门槛</li><li>便于管理</li></ol><p>……<br>这相当于要实现一个简单的在线Java开发环境，提供基础的代码填写、编译和保存的功能。</p><h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><p><img src="https://upload-images.jianshu.io/upload_images/6810620-031e296dac25d5c4.gif?imageMogr2/auto-orient/strip" alt="切换主题"></p><p><img src="https://upload-images.jianshu.io/upload_images/6810620-304fdf364d8713a2.gif?imageMogr2/auto-orient/strip" alt="联动填写类名"></p><p><img src="https://upload-images.jianshu.io/upload_images/6810620-fd427cfe187231e9.gif?imageMogr2/auto-orient/strip" alt="测试编译"></p><h2 id="基于vue-codemirror和Java-Compiler的动态编译，实现了上述需求，目前完成的Web端IDE主要功能点包括：-页面展示Java代码块（代码高亮，有行号、可自动补全括号等）-从服务端获取模板类代码，并提供示例-实时动态编译并获取编译结果（通过-失败-todo-返回编译错误信息-将输入字符串加载成Java-Class以及小的功能点：自动缩进、补全括号、切换主题、联动填写类名等等。下面给出涉及到的技术和实现方法。"><a href="#基于vue-codemirror和Java-Compiler的动态编译，实现了上述需求，目前完成的Web端IDE主要功能点包括：-页面展示Java代码块（代码高亮，有行号、可自动补全括号等）-从服务端获取模板类代码，并提供示例-实时动态编译并获取编译结果（通过-失败-todo-返回编译错误信息-将输入字符串加载成Java-Class以及小的功能点：自动缩进、补全括号、切换主题、联动填写类名等等。下面给出涉及到的技术和实现方法。" class="headerlink" title="基于vue-codemirror和Java Compiler的动态编译，实现了上述需求，目前完成的Web端IDE主要功能点包括：- 页面展示Java代码块（代码高亮，有行号、可自动补全括号等）- 从服务端获取模板类代码，并提供示例- 实时动态编译并获取编译结果（通过&#x2F;失败 todo:返回编译错误信息)- 将输入字符串加载成Java Class以及小的功能点：自动缩进、补全括号、切换主题、联动填写类名等等。下面给出涉及到的技术和实现方法。"></a>基于<code>vue-codemirror</code>和<code>Java Compiler</code>的动态编译，实现了上述需求，目前完成的Web端IDE主要功能点包括：<br>- 页面展示Java代码块（代码高亮，有行号、可自动补全括号等）<br>- 从服务端获取模板类代码，并提供示例<br>- 实时动态编译并获取编译结果（通过&#x2F;失败 todo:返回编译错误信息)<br>- 将输入字符串加载成Java Class<br>以及小的功能点：自动缩进、补全括号、切换主题、联动填写类名等等。<br>下面给出涉及到的技术和实现方法。</h2><h1 id="CodeMirror"><a href="#CodeMirror" class="headerlink" title="CodeMirror"></a>CodeMirror</h1><p>CodeMirror是一个JS库，可以支持实现有丰富的附加功能和多种语言支持。我们项目的前端使用Vue框架，可以很方便地集成并使用CodeMirror提供的插件，实现我们的在线IDE多种特性。<br>参考：<a href="https://codemirror.net/">CodeMirror官网</a></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>安装依赖：<code>  &quot;vue-codemirror&quot;: &quot;^4.0.6&quot;</code><br>在<code>src</code>目录下的<code>main.js</code>中引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueCodeMirror</span> <span class="keyword">from</span> <span class="string">&#x27;vue-codemirror&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/lib/codemirror.css&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueCodeMirror</span>)</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>新建组件<code>JavaIDE.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;codemirror ref=&quot;codeMirrorEditor&quot; :value=&quot;code&quot; :options=&quot;cmOptions&quot; @changes=&quot;onChange&quot;&gt;</span><br><span class="line">  &lt;/codemirror&gt;</span><br><span class="line">  &lt;/template&gt;  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      import codemirror from &quot;codemirror/lib/codemirror&quot;;</span><br><span class="line">      require(&quot;codemirror/mode/clike/clike.js&quot;);</span><br><span class="line">      require(&quot;codemirror/addon/edit/closebrackets.js&quot;);</span><br><span class="line">      components: &#123;</span><br><span class="line">          codemirror;</span><br><span class="line">      &#125;</span><br><span class="line">      export default&#123;</span><br><span class="line">          data()&#123;</span><br><span class="line">              return&#123;</span><br><span class="line">                code: &quot;&quot;,</span><br><span class="line">                cmOptions:&#123;</span><br><span class="line">                    mode: &quot;text/x-java&quot;,  //Java语言</span><br><span class="line">                    theme: &quot;darcula&quot;, // 默认主题</span><br><span class="line">                    autofocus: true,  </span><br><span class="line">                    lineNumbers: true,   //显示行号</span><br><span class="line">                    smartIndent: true, // 自动缩进</span><br><span class="line">                    autoCloseBrackets: true// 自动补全括号</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>组件化地使用它，我们可以方便地操作它绑定的值（code）和其他附加选项（cmOption)。<br>在组件创建时为code赋值，即可实现加载模板代码。</p><blockquote><p>根据官网，我们可以直接使用CodeMirror的默认构造函数，也可以提供一个<code>textarea DOM</code>元素作为构造CodeMirror对象的参数。</p></blockquote><p>可以使用<code>readOnly</code>参数将代码块设置为只读。</p><h3 id="联动填写类名功能"><a href="#联动填写类名功能" class="headerlink" title="联动填写类名功能"></a>联动填写类名功能</h3><p>希望实现：在上面顶栏中填写类名，在代码中联动填写。<br>实现方式： 使用正则匹配替换代码片段，再进行替换<br>使用相同的方法，也可以实现动态补全类名等功能 </p><blockquote><p>参考更多<a href="https://www.runoob.com/js/js-regexp.html">JavaScript的正则表达式</a></p></blockquote><p>为输入框加上监听函数<code>@input=&quot;changeClassName&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">changeClassName</span>(<span class="params">className</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/public class .*? extends ActionParamBuilder/</span>);</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">code</span> = <span class="variable language_">this</span>.<span class="property">code</span>.<span class="title function_">replace</span>(reg,</span><br><span class="line">                   <span class="string">&quot;public class &quot;</span> + className + <span class="string">&quot; extends ActionParamBuilder&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>引入主题<code>css</code>样式文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &quot;codemirror/theme/eclipse.css&quot;;</span><br><span class="line">import &quot;codemirror/theme/darcula.css&quot;;</span><br><span class="line">import &quot;codemirror/theme/blackboard.css&quot;;</span><br></pre></td></tr></table></figure><p>使用String数组定义支持的主题，并使用 <code>Element-UI</code>提供的<code>Select</code>组件支持主题切换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select v-model=&quot;cmOptions.theme&quot; placeholder=&quot;切换主题&quot; @change=&quot;changeTheme&quot;&gt;</span><br><span class="line">          &lt;span slot=&quot;prefix&quot;&gt;</span><br><span class="line">             &lt;el-tooltip content=&quot;更换主题&quot;&gt;</span><br><span class="line">              &lt;a-icon type=&quot;skin&quot; style=&quot;fontSize:16px;line-height=50px;&quot;/&gt;</span><br><span class="line">      &lt;/el-tooltip&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line"> &lt;el-option v-for=&quot;(item,index) in supportThemes&quot; :key=&quot;index&quot; :label=&quot;item&quot; :value=&quot;item&quot;&gt;</span><br><span class="line">   &lt;/el-option&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></table></figure><ul><li>使用<code>slot</code>实现在选择器中嵌入图标，并支持<code>tooltip</code>功能，使工具栏更加紧凑。 <code>slot</code>意为插槽，是封装好的组件预留的可以自定义的空间，我们可以使用<code>slot = &quot;&quot;</code>把DOM元素置入到组件内部，非常灵活。</li></ul><h3 id="样式覆写"><a href="#样式覆写" class="headerlink" title="样式覆写"></a>样式覆写</h3><p>使用<code>!important</code>关键字覆盖原有CodeMirror样式。注意，将该样式放在全局而不是局部<code>scoped</code>样式表中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.CodeMirror &#123;</span><br><span class="line">     height: 500px !important;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="JavaCompiler"><a href="#JavaCompiler" class="headerlink" title="JavaCompiler"></a>JavaCompiler</h1><p>不用将传入的代码保存成<code>.java</code>文件写入磁盘，直接就可以使用<code>JavaCompiler</code>工具对字符串进行编译。</p><blockquote><p>为了实现实时动态编译功能，我搜索了关于如何将字符串编译成class的方法，还看了一些动态代理的实现思路。后来看到这一篇：<a href="https://www.liaoxuefeng.com/article/1080190250181920"><br>Java运行时动态生成class的方法</a>，发现这就是我想要的！</p></blockquote><p>使用Java SDK（since 1.6）提供的JavaCompiler工具。该工具提供编译方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompilationTask <span class="title function_">getTask</span><span class="params">(Writer out,</span></span><br><span class="line"><span class="params">                          JavaFileManager fileManager,</span></span><br><span class="line"><span class="params">                          DiagnosticListener&lt;? <span class="built_in">super</span> JavaFileObject&gt; diagnosticListener,</span></span><br><span class="line"><span class="params">                          Iterable&lt;String&gt; options,</span></span><br><span class="line"><span class="params">                          Iterable&lt;String&gt; classes,</span></span><br><span class="line"><span class="params">                          Iterable&lt;? extends JavaFileObject&gt; compilationUnits)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>JavaFileManager</code><br>自定义<code>MemoryJavaFileManager</code>，继承<code>ForwardingJavaFileManager&lt;JavaFileManager&gt;</code>，实现从内存字符串中读取JavaFileObject<br>重点是下面这个方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">JavaFileObject <span class="title function_">makeStringSource</span><span class="params">(String name, String code)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MemoryInputJavaFileObject</span>(name, code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MemoryInputJavaFileObject</span> <span class="keyword">extends</span> <span class="title class_">SimpleJavaFileObject</span> &#123;</span><br><span class="line"><span class="keyword">final</span> String code;</span><br><span class="line">MemoryInputJavaFileObject(String name, String code) &#123;</span><br><span class="line"><span class="built_in">super</span>(URI.create(<span class="string">&quot;string:///&quot;</span> + name), Kind.SOURCE);</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CharBuffer <span class="title function_">getCharContent</span><span class="params">(<span class="type">boolean</span> ignoreEncodingErrors)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> CharBuffer.wrap(code);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>options</code>，可选参数列表，可以<strong>增加外部Jar包依赖</strong><br>因为我们所需要编译的代码里依赖的类来源于外部的Jar包，所以需要将这些Jar包使用<code>option</code>将这些依赖加进去。这一步踩了坑，因为之前没用过，不知道怎么写……最后终于找到了正确的写法：<br><code>List&lt;String&gt; optionList =Arrays.asList(&quot;-extdirs&quot;,extLib);</code><br><code>extLib</code>是外部jar包的路径（目录地址）。可以使用路径分隔符填入多个路径。</li><li><code>DiagnosticListener</code> 诊断信息监听<br>加入诊断信息监听器，我们可以拿到编译错误信息，把这些信息反馈给前端，实现实时编译并报错的功能。<br><code>DiagnosticCollector diagnosticCollector = new DiagnosticCollector();</code></li><li><code>JavaFileObject</code> 待编译的Java对象，调用自定义类<code>MemoryJavaFileManager</code> 的<code>makeStringSource</code>方法。可以传入一组编译单元。<br>完整方法如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public Map&lt;String, byte[]&gt; compile(String fileName, String source,String extLib) throws IOException &#123;</span><br><span class="line">try (MemoryJavaFileManager manager = new MemoryJavaFileManager(stdManager)) &#123;</span><br><span class="line">JavaFileObject javaFileObject = manager.makeStringSource(fileName, source);    </span><br><span class="line">            // 传入诊断监听器 size和传入的javaObject相同</span><br><span class="line">            DiagnosticCollector diagnosticCollector = new DiagnosticCollector();</span><br><span class="line">List&lt;String&gt; optionList =Arrays.asList(&quot;-extdirs&quot;,extLib);</span><br><span class="line">CompilationTask task = compiler.getTask(null, manager,diagnosticCollector, optionList, null, Arrays.asList(javaFileObject));</span><br><span class="line">Boolean result = task.call();</span><br><span class="line">if (result == null || !result.booleanValue()) &#123;</span><br><span class="line">throw new RuntimeException(&quot;Compilation failed.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return manager.getClassBytes();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>调用代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, byte[]&gt; results = javaStringCompiler.compile(className + &quot;.java&quot;, CODE_TO_COMPILE, libDir);</span><br></pre></td></tr></table></figure></li></ul><h1 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h1><blockquote><p>参考<a href="https://book.douban.com/subject/30133440/">《Java编程的逻辑》</a>中24.5中内容，我们可以使用自定义的<code>ClassLoader</code>来加载用户代码片段，成为可调用的Class对象。</p></blockquote><ul><li>继承<code>URLClassLoader</code></li><li>重写<code>findClass</code>方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MemoryClassLoader</span> <span class="keyword">extends</span> <span class="title class_">URLClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class name to class bytes:</span></span><br><span class="line">Map&lt;String, <span class="type">byte</span>[]&gt; classBytes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, <span class="type">byte</span>[]&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MemoryClassLoader</span><span class="params">(Map&lt;String, <span class="type">byte</span>[]&gt; classBytes)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[<span class="number">0</span>], MemoryClassLoader.class.getClassLoader());</span><br><span class="line"><span class="built_in">this</span>.classBytes.putAll(classBytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"><span class="type">byte</span>[] buf = classBytes.get(name);</span><br><span class="line"><span class="keyword">if</span> (buf == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">&#125;</span><br><span class="line">classBytes.remove(name);</span><br><span class="line"><span class="keyword">return</span> defineClass(name, buf, <span class="number">0</span>, buf.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>自定义类加载器有如下好处：</li><li>可以自定义读取class文件字节码方法和形式，如：从内存中、指定jar包中，或从数据库&#x2F;网络读取等</li><li>实现隔离，可以实现使用同一个类的不同版本</li><li>实现热部署，动态更新类的内容</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇中主要涉及知识点:</p><ul><li><code>vue-codemirror</code>集成和使用</li><li><code>JavaCompiler</code>的使用</li><li><code>JavaScript</code>正则和<code>Vue</code>中的插槽（<code>slot</code>）</li><li>自定义<code>ClassLoader</code>实现动态加载</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CICD：Jenkins入门，流水线和插件使用</title>
      <link href="/2020/05/14/CICD%20Jenkins%E5%85%A5%E9%97%A8%EF%BC%8C%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%92%8C%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/14/CICD%20Jenkins%E5%85%A5%E9%97%A8%EF%BC%8C%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%92%8C%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>最近，我们使用的开发服务器被回收了，换了一台新的服务器，CI&#x2F;CD平台需要重新搭建。<br>我的运维能力一直薄弱，所以借此机会学习了一番如何使用Jenkins进行持续集成开发和部署，实践并踩了一些坑，在此记录一下。</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="假如没有CI-CD平台"><a href="#假如没有CI-CD平台" class="headerlink" title="假如没有CI&#x2F;CD平台"></a>假如没有CI&#x2F;CD平台</h2><p> 想要部署到服务器，我们需要本地打包上传至服务器，或上传源码至服务器上打包，覆盖原来的安装包，进行部署。</p><p>当所需要部署的只是一个jar包或者只是一个服务，并且代码不经常更新，这样是可以的。但是开发过程中，更常见的是代码经常迭代更新，并且项目中有多个组件。<br>这带来了大量的机械重复劳动，打包、上传、构建、测试、发布，如果都由人工操作，很容易混淆代码版本、不易跟踪异常。如果代码有多个分支版本，需要应对多个测试&#x2F;生产环境，劳动量会指数级别飙升，到人无法承受的地步。<br>而Jenkins提供了解决方案，使我们可以一劳永逸地应对部署。</p><h1 id="Jenkins可以做什么"><a href="#Jenkins可以做什么" class="headerlink" title="Jenkins可以做什么"></a>Jenkins可以做什么</h1><p>它的流水线操作正如其名，将机械的工作流程提炼出来，重复执行，可以定义成定时操作，可以定义触发条件，可以填写参数，可以写入控制语句。<br>代替我们完成：<br>1、拉取源码至服务器（与代码管理平台直接集成，可集成gitlab&#x2F;svn等）<br>2、打包源码（可选择使用maven、nodeJS等等打包工具）<br>3、测试<br>4、准备环境<br>5、发布<br>总之，一切需要的工作，都可以定义成流水线里的一个流程。</p><h1 id="Jenkins搭建与配置"><a href="#Jenkins搭建与配置" class="headerlink" title="Jenkins搭建与配置"></a>Jenkins搭建与配置</h1><p>本次安装的Jenkins是Jenkins中文社区提供的中文镜像版，不仅做了汉化，Jenkins可以灵活使用的1500多个插件也提供了国内的镜像地址，安装只需要一条docker指令。</p><h2 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h2><p>1、查看系统版本，预留空间和Jenkins运行端口<br>2、安装docker</p><h2 id="2、快速开始"><a href="#2、快速开始" class="headerlink" title="2、快速开始"></a>2、快速开始</h2><ul><li>创建容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /jenkins_home:/var/jenkins_home -u 0 -p 8786:8080  --name jenkins jenkinszh/jenkins-zh</span><br></pre></td></tr></table></figure><p><strong>指令解释：</strong><br><code>-d</code>： 后台运行<br><code>-v</code>：将Jenkins主目录挂在出来<br><code>-u 0</code> ：将系统用户传入（0为root用户），避免一些权限问题<br><code>-p</code> ：指定映射到宿主机的端口，如果8786端口被占用也可以使用其他端口<br><code>--name</code>：指定运行容器名称为jenkins<br><code>jenkinszh/jenkins-zh</code> Jenkins中文社区提供的镜像名称，docker会检测本地有无该镜像，如果没有，会自动拉取。</p><ul><li><code>docker logs jenkins </code> 查看日志</li></ul><p>运行之后，访问宿主机ip+ 8786（指定端口），看到Jenkins初始页面。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152739.png" alt="image.png"></p><p>Jenkins创建成功！</p><h2 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h2><p>稍微等待之后，自动跳转至管理员登录页面。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152753.png" alt="image.png"></p><p><a href="../../../travel-trace/index.html">index.html</a><br>创建容器时我们已经将该目录挂载到宿主机了，所以可以直接访问映射出的文件：<br>  <code>cat /jenkins_home/secrets/initialAdminPassword</code></p><p>  也可以使用<code>docker exec</code>指令访问容器内文件:<br>  <code>docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword</code><br>输入密码，登陆进入新手入门页面。</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152811.png" alt="image.png"></p><p>选择安装推荐插件。<br>如果有安装失败的，可以点击继续，直接跳过，进入Jenkins管理页面，等待后续使用时再进行安装。</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152823.png" alt="image.png"></p><h2 id="4、新建声明式流水线"><a href="#4、新建声明式流水线" class="headerlink" title="4、新建声明式流水线"></a>4、新建声明式流水线</h2><p>点击左侧新建item，可以创建新的任务，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152841.png" alt="image.png"></p><p>选择流水线。</p><p>现在就可以创建流水线，用于部署正在开发的项目了。</p><h2 id="5、常用流水线-工具-插件-使用及配置"><a href="#5、常用流水线-工具-插件-使用及配置" class="headerlink" title="5、常用流水线 + 工具 +插件 使用及配置"></a>5、常用流水线 + 工具 +插件 使用及配置</h2><p>流水线语法请参考：</p><p><a href="http://jenkins-zh.cn/wechat/articles/2020/05/2020-05-08-how-to-use-the-jenkins-declarative-pipeline/">如何使用声明式流水线</a><br>可以使用Jenkins自带的流水线语句生成工具来辅助编写：</p><p><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152856.png" alt="image.png"></p><p>插件和其他配置均为可选，根据使用需求灵活安装。<br>在此记录一些插件&#x2F;工具，并给出它们在流水线脚本中的使用范例。</p><h3 id="一、集成git-gitlab"><a href="#一、集成git-gitlab" class="headerlink" title="一、集成git&#x2F;gitlab"></a>一、集成git&#x2F;gitlab</h3><ul><li><p>配置凭据用于登陆验证gitlab<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152911.png" alt="image.png"></p></li><li><p>参考语法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">steps &#123;</span><br><span class="line">git <span class="attr">branch:</span> <span class="string">&#x27;dev&#x27;</span>, <span class="attr">credentialsId:</span> <span class="string">&#x27;***&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;https://git.***.git&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将创建好的凭据填入。</p></li></ul><h3 id="二、maven-nodeJS等构建工具使用"><a href="#二、maven-nodeJS等构建工具使用" class="headerlink" title="二、maven&#x2F;nodeJS等构建工具使用"></a>二、maven&#x2F;nodeJS等构建工具使用</h3><ul><li><p>工具安装和配置<br> 在全局工具配置中配置NodeJS和Maven<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152931.png" alt="image.png"></p></li><li><p>使用maven打包</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">steps &#123;</span><br><span class="line">    script &#123;</span><br><span class="line">     sh <span class="string">&quot;mvn clean install -Dmaven.test.skip=true -Plinux&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用<code>ln -s</code>指令支持脚本中运行<br>若执行时报错无mvn指令（或npm、cnpm等），说明jenkins在&#x2F;usr&#x2F;local&#x2F;bin目录下没有找到相应的指令。可以通过建立软连接方式实现支持。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417152952.png" alt="image.png"></p></li></ul><p>可以将宿主机的工具包直接放入挂载目录，进行映射，也可以在工具配置中选择自动下载，在Jenkins内中再次安装。</p><h3 id="三、连接其他机器-执行脚本"><a href="#三、连接其他机器-执行脚本" class="headerlink" title="三、连接其他机器&#x2F;执行脚本"></a>三、连接其他机器&#x2F;执行脚本</h3><ul><li>容器内<br>直接使用下列流水线语言格式即可。<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script &#123;</span><br><span class="line">    sh <span class="string">&quot;***&quot;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>执行宿主机内脚本<br>（1）挂载进入容器内部<br>缺点：若脚本运行环境和操作内容是宿主机文件，该方法无法实现。<br>（2）使用ssh</li><li>语句使用<br>开启免密校验，使用<code> sh &quot;ssh -o StrictHostKeyChecking=no -l root $&#123;IP&#125; &#39;****&#39;&quot;</code>格式的指令。<br>注意指令格式为双引号内套单引号，单引号内为希望在宿主机执行的指令</li><li>插件使用</li></ul><ul><li><p><strong>SSH Pipeline Step</strong><br>根据示例，可得，事先添加好凭据之后，很容易在指定ip上（包括宿主机）执行文件传输、脚本执行等操作。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> host = [:]</span><br><span class="line">host.name = <span class="string">&quot;host&quot;</span></span><br><span class="line">host.host = <span class="string">&quot;&quot;</span></span><br><span class="line">host.allowAnyHosts = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">node &#123;</span><br><span class="line">    withCredentials([usernamePassword(<span class="attr">credentialsId:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">passwordVariable:</span> <span class="string">&#x27;password&#x27;</span>, <span class="attr">usernameVariable:</span> <span class="string">&#x27;userName&#x27;</span>)]) &#123;</span><br><span class="line">        host.user = userName</span><br><span class="line">        host.password = password</span><br><span class="line">        stage(<span class="string">&quot;SSH Steps Rocks!&quot;</span>) &#123;</span><br><span class="line">            writeFile <span class="attr">file:</span> <span class="string">&#x27;test.sh&#x27;</span>, <span class="attr">text:</span> <span class="string">&#x27;ls&#x27;</span></span><br><span class="line">            sshCommand <span class="attr">remote:</span> host, <span class="attr">command:</span> <span class="string">&#x27;for i in &#123;1..5&#125;; do echo -n \&quot;Loop \$i \&quot;; date ; sleep 1; done&#x27;</span></span><br><span class="line">            sshScript <span class="attr">remote:</span> host, <span class="attr">script:</span> <span class="string">&#x27;test.sh&#x27;</span></span><br><span class="line">            sshPut <span class="attr">remote:</span> host, <span class="attr">from:</span> <span class="string">&#x27;test.sh&#x27;</span>, <span class="attr">into:</span> <span class="string">&#x27;.&#x27;</span></span><br><span class="line">            sshGet <span class="attr">remote:</span> host, <span class="attr">from:</span> <span class="string">&#x27;test.sh&#x27;</span>, <span class="attr">into:</span> <span class="string">&#x27;test_new.sh&#x27;</span>, <span class="attr">override:</span> <span class="literal">true</span></span><br><span class="line">            sshRemove <span class="attr">remote:</span> host, <span class="attr">path:</span> <span class="string">&#x27;test.sh&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建结果<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153012.png" alt="image.png"></p></li><li><p><strong>Publish Over SSH</strong><br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153033.png" alt="image.png"></p></li></ul><p>在Jenkins管理&#x2F;系统管理&#x2F;PublishOverSSH的相关配置中配置所需要的宿主机IP、用户、密码等等信息<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153042.png" alt="image.png"></p><p>可以在展开的高级设置中配置SSH服务器。<br>查看<a href="%5Bhttps://plugins.jenkins.io/publish-over-ssh/%5D(https://plugins.jenkins.io/publish-over-ssh/)">Publish-Over-Server 插件说明</a>获取高级用法。</p><h3 id="四、集成docker"><a href="#四、集成docker" class="headerlink" title="四、集成docker"></a>四、集成docker</h3><p>因为我们的Jenkins服务是作为docker容器运行的，所以需要在容器内调用docker命令。<br>容器内调用docker命令有两种：</p><ul><li><p>DinD（Docker in Docker）（不推荐）<br>容器内部再安装一个Docker应用。但是这种方法不推荐，参考：<a href="https://zhuanlan.zhihu.com/p/27208085">使用 Docker-in-Docker 来运行 CI 或集成测试环境？三思！</a></p></li><li><p><strong>DooD（Docker-outside-of-Docker）（推荐）</strong></p><blockquote><p>原理说明：<br>Docker采用的是Client&#x2F;Server架构，我们常用的docker命令只是docker client，通过该命令行执行命令的时候，实际是通过client与docker engine通信。<br>默认情况下，Docker的守护进程会生成一个socket（<code>/var/run/docker.sock</code>）文件来进行本地进程通信，智是UNIX域套接字，可以通过文件系统（而非网络地址）进行寻址访问。</p></blockquote></li></ul><p>根据上述原理，我们可以通过挂载宿主机socket文件进入Jenkins，使Jenkins可以使用宿主机docker命令。</p><ul><li><strong>直接使用第四点中的SSH用法执行：</strong> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshCommand remote: host, command: &#x27;docker *** &#x27;</span><br></pre></td></tr></table></figure></li></ul><h3 id="五、生成归档文件"><a href="#五、生成归档文件" class="headerlink" title="五、生成归档文件"></a>五、生成归档文件</h3><p>示例：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    </span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line"> stages &#123;</span><br><span class="line">     </span><br><span class="line">     stage(<span class="string">&quot;build&quot;</span>)&#123;</span><br><span class="line">         steps&#123;</span><br><span class="line">             sh <span class="string">&#x27;touch archive.jar&#x27;</span></span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     stage(<span class="string">&#x27;archive&#x27;</span>) &#123;  </span><br><span class="line">            steps &#123;</span><br><span class="line">                archiveArtifacts <span class="attr">artifacts:</span> <span class="string">&#x27;archive.jar&#x27;</span>, <span class="attr">fingerprint:</span> <span class="literal">true</span> </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在build过程中生成归档文件，在archive过程中归档。<br><img src="https://cdn.jsdelivr.net/gh/Ygria/Pictures@main/20240417153056.png" alt="image.png"></p><p>在此页面上可以直接下载归档好的文件。</p><h1 id="其他（待补充）"><a href="#其他（待补充）" class="headerlink" title="其他（待补充）"></a>其他（待补充）</h1><p>1、配置时区<br>打开系统管理&#x2F;命令行，运行：<br><code>System.setProperty(&#39;org.apache.commons.jelly.tags.fmt.timeZone&#39;, &#39;Asia/Shanghai&#39;)</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java：自定义注解+反射实现导入导出Excel文档</title>
      <link href="/2020/05/08/Java%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3+%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BAExcel%E6%96%87%E6%A1%A3/"/>
      <url>/2020/05/08/Java%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3+%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BAExcel%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>最近遇到的需求：用户填写平台提供的模板文件（sample.xlsx），导入到平台中，代替填写表单&#x2F;表格的动作。用户也可以将填好的表单&#x2F;表格导出成Excel文件，便于以文档的形式存档或传输。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>从上述需求得出，这就是一个Excel文档与<code>Java Bean</code>对象互相转换的问题。</p><p>Excel文件的读写、操作，可以使用<code>Apache Poi</code>或其他开源库，在此不多说。主要问题是，当模板文件内容较为复杂，或者需要处理多个模板时，怎样能快速解析出文档的内容，与<code>Java Bean</code>的字段对应上呢？<br><strong>应用Java反射的原理，使用自定义注解 + 泛型，很容易实现灵活适配多个模板，并能快速支持模板的修改，便于扩展和维护。</strong></p><h1 id="模板文件分析"><a href="#模板文件分析" class="headerlink" title="模板文件分析"></a>模板文件分析</h1><p>分析模板文件，我发现可以将模板分为两种。</p><ol><li>表单式<br><img src="https://upload-images.jianshu.io/upload_images/6810620-edd21e42adeca658.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表单式"></li></ol><p>内容行标、列标均确定，例如该表格B1固定为姓名的值，将内容解析成单个JavaBean对象。</p><ol start="2"><li>表格式<br><img src="https://upload-images.jianshu.io/upload_images/6810620-cd02b99b72e481f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表格式"></li></ol><p>内容列固定，例如A列均为学号，应将除去表头外的每一行解析成一个JavaBean 对象，返回Java Bean对象的列表。</p><p>分析完毕，发现Java Bean 对象的某个字段的值与Excel文档单元格内容的对应关系就是行标 + 列标，那么我们只需要记录这个坐标，就能实现转换。<br>使用在字段上加注解的方式，简明易懂，并且很容易维护。下面给出实现代码。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="1、定义注解类"><a href="#1、定义注解类" class="headerlink" title="1、定义注解类"></a>1、定义注解类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExcelAnnotation &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文名称 label  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">cnName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 英文名称 对应到JavaClass上的类名</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">enName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     文件中的行标 - 从0开始计数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">rowIndex</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sheetIndex</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 文件中的列标 - 从0开始计数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">columnIndex</span><span class="params">()</span> <span class="keyword">default</span>  -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解用来说明字段对应的单元格工作簿序号、行标、列标等信息，以及</p><h2 id="2、定义Java-Bean"><a href="#2、定义Java-Bean" class="headerlink" title="2、定义Java Bean"></a>2、定义Java Bean</h2><ul><li>表单式对应的对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="meta">@ExcelAnnotation(rowIndex = 0,columnIndex = 1,cnName = &quot;姓名&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExcelAnnotation(rowIndex = 2,columnIndex = 1,cnName = &quot;电话号码&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String phoneNum;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>表格式对应的对象<br>只需要定义列的中文名（cnName）,不需要定义行标<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">  <span class="meta">@ExcelAnnotation(cnName = &quot;学号&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String number;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExcelAnnotation(cnName = &quot;姓名&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExcelAnnotation(cnName = &quot;电话号码&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String phoneNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、工具类实现写入和写出"><a href="#3、工具类实现写入和写出" class="headerlink" title="3、工具类实现写入和写出"></a>3、工具类实现写入和写出</h2><p>定义Excel操作的工具类<br><code>ExcelUtils.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">analysisExcelSheetAsTable</span><span class="params">(Sheet sheet,Class&lt;T&gt; clazz,<span class="type">int</span> headerIndex)</span> <span class="keyword">throws</span> IntrospectionException &#123;</span><br><span class="line">        ArrayList&lt;Row&gt; rowContent = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        TreeMap&lt;Integer, Method&gt; writeMethodTreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//  记录表头内容与</span></span><br><span class="line">        HashMap&lt;String,Integer&gt; headerCnNameMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 默认的表头数据</span></span><br><span class="line">        <span class="comment">// 获取表头数据</span></span><br><span class="line">        <span class="type">Row</span> <span class="variable">tableHeader</span> <span class="operator">=</span> sheet.getRow(headerIndex);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Cell headerCell: tableHeader)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">headerContent</span> <span class="operator">=</span>   ExcelUtils.getCellFormatValue(headerCell).toString().trim();</span><br><span class="line">            headerCnNameMap.put(headerContent,index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 忽略第一行表头数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (headerIndex+<span class="number">1</span>); i &lt; sheet.getPhysicalNumberOfRows(); i++) &#123;</span><br><span class="line">            rowContent.add(sheet.getRow(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">            <span class="comment">// 获取字段上的注解</span></span><br><span class="line">            Annotation[] annotations = field.getAnnotations();</span><br><span class="line">            <span class="keyword">if</span> (annotations.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Annotation an : annotations) &#123;</span><br><span class="line">                <span class="comment">// 若扫描到ExcelAnnotation注解</span></span><br><span class="line">                <span class="keyword">if</span> (an.annotationType().getName().equals(ExcelAnnotation.class.getName())) &#123;</span><br><span class="line">                    <span class="comment">// 获取指定类型注解</span></span><br><span class="line">                    <span class="type">ExcelAnnotation</span> <span class="variable">excelAnnotation</span> <span class="operator">=</span> field.getAnnotation(ExcelAnnotation.class);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取该字段的method方法</span></span><br><span class="line">                        <span class="type">PropertyDescriptor</span> <span class="variable">pd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyDescriptor</span>(field.getName(), clazz);</span><br><span class="line">                        <span class="comment">// 从头部获取cnName</span></span><br><span class="line">                        <span class="keyword">if</span>(headerCnNameMap.containsKey(excelAnnotation.cnName()))&#123;</span><br><span class="line">                            writeMethodTreeMap.put(headerCnNameMap.get(excelAnnotation.cnName()), pd.getWriteMethod());</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DataFormatter</span> <span class="variable">dataFormatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataFormatter</span>();</span><br><span class="line">        List&lt;T&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Row row : rowContent) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rowValue</span> <span class="operator">=</span> dataFormatter.formatCellValue(row.getCell(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">model</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(rowValue)) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> cellIndex: writeMethodTreeMap.keySet())&#123;</span><br><span class="line">                        <span class="keyword">if</span>(row.getCell(cellIndex) != <span class="literal">null</span>)&#123;</span><br><span class="line">                            <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(cellIndex);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> ExcelUtils.getCellFormatValue(cell).toString();</span><br><span class="line">                            writeMethodTreeMap.get(cellIndex).invoke(model, value);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    resultList.add(model);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析Excel表格内容 - 按照表格解析</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ignoreRowNum 忽略的行数（表头）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">analysisExcelSheetAsTable</span><span class="params">(Sheet sheet, <span class="type">int</span> ignoreRowNum, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        ArrayList&lt;Row&gt; rowContent = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        TreeMap&lt;Integer, Method&gt; writeMethodTreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 从忽略的表头开始读</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ignoreRowNum; i &lt; sheet.getPhysicalNumberOfRows(); i++) &#123;</span><br><span class="line">            rowContent.add(sheet.getRow(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">            <span class="comment">// 获取字段上的注解</span></span><br><span class="line">            Annotation[] annotations = field.getAnnotations();</span><br><span class="line">            <span class="keyword">if</span> (annotations.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Annotation an : annotations) &#123;</span><br><span class="line">                <span class="comment">// 若扫描到ExcelAnnotation注解</span></span><br><span class="line">                <span class="keyword">if</span> (an.annotationType().getName().equals(ExcelAnnotation.class.getName())) &#123;</span><br><span class="line">                    <span class="comment">// 获取指定类型注解</span></span><br><span class="line">                    <span class="type">ExcelAnnotation</span> <span class="variable">excelAnnotation</span> <span class="operator">=</span> field.getAnnotation(ExcelAnnotation.class);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取该字段的method方法</span></span><br><span class="line">                        <span class="type">PropertyDescriptor</span> <span class="variable">pd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyDescriptor</span>(field.getName(), clazz);</span><br><span class="line">                        writeMethodTreeMap.put(excelAnnotation.columnIndex(), pd.getWriteMethod());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DataFormatter</span> <span class="variable">dataFormatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataFormatter</span>();</span><br><span class="line">        List&lt;T&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Row row : rowContent) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rowValue</span> <span class="operator">=</span> dataFormatter.formatCellValue(row.getCell(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">model</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(rowValue)) &#123;</span><br><span class="line">                    <span class="comment">// 遍历格子</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (Cell cell : row) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!writeMethodTreeMap.containsKey(i)) &#123;</span><br><span class="line">                            i++;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> ExcelUtils.getCellFormatValue(cell).toString();</span><br><span class="line">                        writeMethodTreeMap.get(i).invoke(model, value);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    resultList.add(model);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取Cell</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getCellFormatValue</span><span class="params">(Cell cell)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Object cellValue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断cell类型</span></span><br><span class="line">        <span class="keyword">switch</span> (cell.getCellTypeEnum())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> NUMERIC:</span><br><span class="line">            &#123;</span><br><span class="line">                cellValue = cell.getNumericCellValue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> FORMULA:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//判断cell是否为日期格式</span></span><br><span class="line">                <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//转换为日期格式YYYY-mm-dd</span></span><br><span class="line">                    cellValue = cell.getDateCellValue();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//数字</span></span><br><span class="line">                    cellValue = cell.getNumericCellValue();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> STRING:</span><br><span class="line">            &#123;</span><br><span class="line">                cellValue = cell.getRichStringCellValue().getString();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                cellValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cellValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、调用"><a href="#4、调用" class="headerlink" title="4、调用"></a>4、调用</h2><p>在业务类（<code>Service</code>）中调用</p><ul><li>调用仅为示范<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">importExcelFile</span><span class="params">(InputStream inputStream)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> WorkbookFactory.create(inputStream)) &#123;</span><br><span class="line">           </span><br><span class="line">            Person person= ExcelUtil.analysisExcelSheetAsForm(workbook.getSheetAt(<span class="number">0</span>),Person.class);</span><br><span class="line">            List&lt;Student&gt; students= ExcelUtil.analysisExcelSheetAsTable(workbook.getSheetAt(<span class="number">1</span>),<span class="number">1</span>,Student.class);</span><br><span class="line"><span class="comment">// 仅示范调用方式，可自行返回</span></span><br><span class="line">        </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Excel解析失败！&quot;</span>,ex);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;Excel解析失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportExcelFile</span><span class="params">(List&lt;Student&gt; students,Person person,HttpServletResponse httpServletResponse)</span>&#123;</span><br><span class="line">        <span class="comment">//1、读取excel模板文件，作为本次下载的模板</span></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(templatePath);</span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> WorkbookFactory.create(inputStream))&#123;</span><br><span class="line">            httpServletResponse.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            httpServletResponse.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=test.xlsx&quot;</span>);</span><br><span class="line">            <span class="comment">// 2.根据查询到的内容，填充Excel表格内容</span></span><br><span class="line">            ExcelUtil.writeToWorkbookAsForm(person,workbook.getSheetAt(<span class="number">0</span>));</span><br><span class="line">            ExcelUtil.writeToWorkbookAsTable(students,workbook.getSheetAt(<span class="number">1</span>,<span class="number">1</span>,Student.class);</span><br><span class="line">            workbook.write(httpServletResponse.getOutputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InvalidFormatException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>这样就完成啦。<br>对于写入Excel和读取Excel的一些格式、编码&#x2F;解码方式，我们可以放在通用配置里，也可以在注解类中增加项目来应对特殊需求。</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇涉及知识<br>1、泛型<br>2、自定义注解 + <code>Java </code>反射<br>3、<code>Apache Poi</code>的使用</p><ul><li>为什么使用泛型？<br>1、将<strong>数据类型</strong>和<strong>算法</strong>进行剥离是一种很常用的设计思路，可以帮助我们更好地开发出通用方法。<br>2、使用泛型（而不是包容万物的Object类型）使代码更为可读，并能规避编译错误，还可以对传入类型的上界、下界进行规定。（super&#x2F;extends）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础：使用Vue.extend()实现自定义确认框</title>
      <link href="/2020/04/28/Vue%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BD%BF%E7%94%A8Vue.extend()%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%A1%AE%E8%AE%A4%E6%A1%86/"/>
      <url>/2020/04/28/Vue%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BD%BF%E7%94%A8Vue.extend()%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%A1%AE%E8%AE%A4%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>前端交互中经常使用确认框。在删除、修改等操作时，调用后端接口之前，先跳出弹框显示提示信息，提示用户确认，避免用户误操作。<br>项目中全局引入了Element，提供了一套模态对话框组件，用于消息提示、确认消息、提交内容，使用起来也非常简便。</p><p>以下来自于element官网文档：</p><blockquote><p>如果你完整引入了 Element，它会为<code>Vue.prototype</code>添加如下全局方法：  <code>$msgbox</code>, <code>$alert</code>, <code>$confirm</code> 和<code> $prompt</code>。因此在<code>Vue instance</code>中可以采用本页面中的方式调用 MessageBox。</p></blockquote><p>代码范例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.$confirm(<span class="string">&quot;此操作将永久删除该文件, 是否继续?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">                   <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">                   <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">                   <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">               &#125;)</span><br><span class="line">                   .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                       <span class="variable language_">this</span>.$message(&#123; <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;删除成功!&quot;</span> &#125;);</span><br><span class="line">                   &#125;)</span><br><span class="line">                   .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                       <span class="variable language_">this</span>.$message(&#123; <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;已取消删除&quot;</span> &#125;);</span><br><span class="line">                   &#125;);</span><br></pre></td></tr></table></figure><p>Element允许复写样式，如果全局都需要，则可以进行写在全局自定义样式单中，覆盖掉原有样式。<br><strong>当Element提供的默认组件不能满足需求时，需要思考一下如何实现？</strong></p><h1 id="实现尝试"><a href="#实现尝试" class="headerlink" title="实现尝试"></a>实现尝试</h1><h2 id="在单组件内部实现确认框"><a href="#在单组件内部实现确认框" class="headerlink" title="在单组件内部实现确认框"></a>在单组件内部实现确认框</h2><p>在组件内定义一个对话框，使用时将dialog显示为可见，点击确认时调用方法，点击取消&#x2F;关闭时将dialog设置为不可见。<br>在当前页面只需要一个确认框的时候，dialog的标题、内容、确认时调用的方法（<code>@click = &quot;handler&quot;</code>）都可以写死。</p><ul><li>怎么修改对话框内容？<br>当页面上有多个不同方法均需要对话框确认，那么el-dialog对应的数据是变动的，使用 <code>v-model</code>指令绑定一个confirmDialog对象，在触发对话框时，实时修改该对话框所显示的内容，以及按钮对应的方法。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;confirmDialog.title&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;confirmDialog.show&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; confirmDialog.message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;confirmDialog.show = false&quot;</span>&gt;</span></span><br><span class="line">                        取 消</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;confirmDialog.handler&quot;</span>&gt;</span></span><br><span class="line">                        确 定</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span> = <span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>script中方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">deleteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">confirmDialog</span>.<span class="property">title</span> = <span class="string">&quot;删除&quot;</span>;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">confirmDialog</span>.<span class="property">message</span> = <span class="string">&quot;确认删除文件吗？&quot;</span>;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">confirmDialog</span>.<span class="property">handler</span> = <span class="variable language_">this</span>.<span class="property">doDeleteFile</span>;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">confirmDialog</span>.<span class="property">show</span> = <span class="literal">true</span>;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="title function_">doDeleteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 删除文件方法</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>公有部分抽取<br>在上述实现中，我们使用多个不同方法去操作同一对象，并且每个操作都需要两个方法实现，第一个方法用来修改confirmDialog的值，第二个方法用来监听确认按钮的点击事件，执行操作。<br>很容易得出，第一个方法是每个操作都类似的，可以复用的，弹窗HTML代码和样式代码也是共用的，我们将公有的部分独立成组件，就避免了重复工作。</li></ul><h2 id="如何抽取？"><a href="#如何抽取？" class="headerlink" title="如何抽取？"></a>如何抽取？</h2><p>由上一节，我们容易得出，需要抽取的是确认框的DOM，样式，以及数据对象。</p><h3 id="为什么使用extend"><a href="#为什么使用extend" class="headerlink" title="为什么使用extend"></a>为什么使用extend</h3><blockquote><p>上一章总结了子组件如何抽取，并介绍了在父组件中如何使用子组件，使用方法为：<br>在父组件中引入并注册子组件，在父组件中传入数据，为子组件的prop赋值，并在父组件中控制子组件的显示。</p></blockquote><p>使用父子组件 +局部注册，无需关注子组件的创建，相对来说比较简单。但是有时也会遇到问题：</p><ul><li>子组件的模板都是事先定义好的，如果我要从接口动态渲染组件模板怎么办？</li><li>子组件都是在父组件内定义好的位置渲染，假如想要在JS代码中灵活调用，在任意地方渲染怎么办？<br>这时就轮到<code>Vue.extend()</code>出场了。</li></ul><h2 id="Vue-extend"><a href="#Vue-extend" class="headerlink" title="Vue.extend()"></a>Vue.extend()</h2><p><code>Vue.extend()</code>是 <code>Vue</code>框架提供的全局api，查阅官网文档，相关说明如下：<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82ODEwNjIwLTJhNWM3NDc3NWRiNjY5NmMucG5n?x-oss-process=image/format,png" alt="vue.extend()接口说明"></p><blockquote><p>类比Java，可以将定义好的组件看成一个<strong>模板类</strong>，使用Vue.extend()生成该模板类的继承子类。模板类中提供了默认的变量（模板、样式、变量等），并定义了方法，在js代码中可以继承并覆盖父类的变量和方法。Vue.extend()中接收的参数相当于子类的构造参数。</p></blockquote><p>容易得出，我们需要传入的是对话框绑定的数据模型（data），以及点击确认后执行的方法。</p><ul><li>Promise<br>参考Element的做法，使用<code>ES6</code>中的<code>Promise</code>对象封装构造函数的返回，能使代码更加简洁。</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> confirm <span class="keyword">from</span> <span class="string">&#x27;../Comfirm.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> confirmConstructor = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(confirm);</span><br><span class="line"><span class="keyword">let</span> theConfirm = <span class="keyword">function</span> (<span class="params">content</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//promise封装，ok执行resolve，no执行rejectlet</span></span><br><span class="line">        <span class="keyword">let</span> confirmDom = <span class="keyword">new</span> <span class="title function_">confirmConstructor</span>(&#123;</span><br><span class="line">            <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(confirmDom.<span class="property">$el</span>); <span class="comment">//new一个对象，然后插入body里面</span></span><br><span class="line">        confirmDom.<span class="property">content</span> = content; <span class="comment">//为了使confirm的扩展性更强，这个采用对象的方式传入，所有的字段都可以根据需求自定义</span></span><br><span class="line">        confirmDom.<span class="property">ok</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">res</span>()</span><br><span class="line">            confirmDom.<span class="property">isShow</span> = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        confirmDom.<span class="property">close</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">rej</span>()</span><br><span class="line">            confirmDom.<span class="property">isShow</span> = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> theConfirm;</span><br></pre></td></tr></table></figure><p>Confirm.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 自定义确认弹窗样式 --&gt;</span><br><span class="line">    &lt;el-dialog width=&quot;600px&quot; :title=&quot;content.title&quot; :visible.sync=&quot;content.show&quot; v-if=&quot;isShow&quot;&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; content.message &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">            &lt;el-button @click=&quot;close&quot;&gt;</span><br><span class="line">                取 消</span><br><span class="line">            &lt;/el-button&gt;</span><br><span class="line">            &lt;el-button type=&quot;primary&quot; @click=&quot;ok&quot;&gt;</span><br><span class="line">                确 定</span><br><span class="line">            &lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                // 弹窗内容</span><br><span class="line">                isShow: true,</span><br><span class="line">                content: &#123;</span><br><span class="line">                    title: &quot;&quot;,</span><br><span class="line">                    message: &quot;&quot;,</span><br><span class="line">                    data: &quot;&quot;,</span><br><span class="line">                    show: false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            close() &#123;</span><br><span class="line">              </span><br><span class="line">            &#125;,</span><br><span class="line">            ok() &#123;</span><br><span class="line">   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在main.js中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> confirm <span class="keyword">from</span> <span class="string">&#x27;@/confirm.js&#x27;</span> </span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$confirm</span> = confirm;</span><br></pre></td></tr></table></figure><p>在任意方法中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">this.$confirm(&#123; title: &quot;删除&quot;, message: &quot;确认删除该文件吗？&quot;, show: true &#125;)</span><br><span class="line">                   .then(() =&gt; &#123;</span><br><span class="line">                       //用户点击确认后执行</span><br><span class="line"></span><br><span class="line">                   &#125;)</span><br><span class="line">                   .catch(() =&gt; &#123;</span><br><span class="line">                   // 取消或关闭</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇主要涉及知识点：</p><ul><li><code>Vue.prototype</code> 为<code>Vue</code>实例添加方法</li><li><code>Vue.extend()</code>使用方法</li><li><code>Promise</code>对象的定义和使用<br>可复用，易扩展，易维护，是我们编程过程中应当时刻注意的原则。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础：子组件抽取与父子组件通信</title>
      <link href="/2020/04/25/Vue%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%90%E7%BB%84%E4%BB%B6%E6%8A%BD%E5%8F%96%E4%B8%8E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2020/04/25/Vue%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AD%90%E7%BB%84%E4%BB%B6%E6%8A%BD%E5%8F%96%E4%B8%8E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在工作中承担一部分前端工作，主要使用Vue + Element UI。<br>随着版本迭代，需求增加，页面往往变得更加臃肿，不易维护。学习子组件的封装和抽取，能更好适应需求。</p></blockquote><h1 id="为什么需要子组件"><a href="#为什么需要子组件" class="headerlink" title="为什么需要子组件"></a>为什么需要子组件</h1><ul><li>可复用<br>将重复出现的元素封装成组件，可以灵活运用到各个页面中，避免重复劳动。</li><li>易维护<br>每个组件相当于独立的功能组件。独立的组件结构可以让其他开发者快速定位到每个页面元素所对应的事件方法、样式表，并在修改该组件时不影响其他页面的功能。</li></ul><h1 id="组件的使用方法"><a href="#组件的使用方法" class="headerlink" title="组件的使用方法"></a>组件的使用方法</h1><p>子组件的定义方法和每一个Vue组件相同，使用时需要先注册，分为全局注册和局部注册两种。<br><strong>全局&amp;局部？</strong><br>对于全局通用的组件，可以将其注册为全局的。在项目中更常用的是<strong>局部注册</strong>，全局注册固然方便，但会使组件的依赖结构不够清晰，可能带来的更高的维护成本。<br>Vue官网教程中给出如下建议：</p><blockquote><p>全局注册往往是不够理想的。比如，如果你使用一个像 webpack 这样的构建系统，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。</p></blockquote><p>局部注册需要在每个使用到的地方都引用一次，父组件引用之后，子组件必须再次引用才能使用。</p><h1 id="父子如何通信"><a href="#父子如何通信" class="headerlink" title="父子如何通信"></a>父子如何通信</h1><p>组件之间相对独立，不共享变量，重中之重就是：如何传递信息?<br>我列出一些我目前接触到的常用数据传递方法:</p><ul><li>使用路由参数传递：在A组件中向路由中写入，在B组件通过$route.query.param获取</li><li>存储在session Storage中或使用Vuex，存储常用共有变量<br>……<br>组件之间构成父子关系，必然是结构和数据上存在依赖关系，当不能跳转路由或需要使用多个子组件时，上述方法不奏效了，所幸的是，Vue提供了一套现成的方法，可以总结为：</li><li>父传子用<code>props</code></li><li>子传父用<code>emit</code></li><li>双向绑定，<code>compute+sync</code></li></ul><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>父向子传递的信息，往往是子组件的初始化数据。假如将子组件看作一个类，在父组件中使用该类的实例，props有点类的构造参数。<br>props的写法也与构造函数形参类似，可以规定传参类型、是否必传等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">   <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">   <span class="attr">propA</span>: <span class="title class_">Number</span>,</span><br><span class="line">   <span class="comment">// 多个可能的类型</span></span><br><span class="line">   <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h2><p>emit函数支持子组件调用父组件函数，并支持传数据作为父组件接受调用函数时的传参。</p><ul><li>使用场景示例<br>子组件完成动作后，调用父组件的刷新列表方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件中</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&quot;queryList&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件中</span></span><br><span class="line"><span class="comment">//刷新列表方法</span></span><br><span class="line"><span class="title function_">queryList</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用$emit特性，很容易实现将子组件的值传递给父组件，并能控制父组件的动作。</li></ul><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><h2 id="更常见的需求是需要父组件和子组件的值实现同步，比如：-在父组件点击打开按钮，希望能控制子组件打开，在子组件内部点击关闭后，希望父组件的开关也被同步到关闭。-在父组件打开表单后，在子组件内填写，希望父组件知道子组件填了什么，实时同步在子组件的操作"><a href="#更常见的需求是需要父组件和子组件的值实现同步，比如：-在父组件点击打开按钮，希望能控制子组件打开，在子组件内部点击关闭后，希望父组件的开关也被同步到关闭。-在父组件打开表单后，在子组件内填写，希望父组件知道子组件填了什么，实时同步在子组件的操作" class="headerlink" title="更常见的需求是需要父组件和子组件的值实现同步，比如：* 在父组件点击打开按钮，希望能控制子组件打开，在子组件内部点击关闭后，希望父组件的开关也被同步到关闭。* 在父组件打开表单后，在子组件内填写，希望父组件知道子组件填了什么，实时同步在子组件的操作"></a>更常见的需求是需要父组件和子组件的值实现同步，比如：<br>* 在父组件点击打开按钮，希望能控制子组件打开，在子组件内部点击关闭后，希望父组件的开关也被同步到关闭。<br>* 在父组件打开表单后，在子组件内填写，希望父组件知道子组件填了什么，实时同步在子组件的操作</h2><h2 id="Vue规定了父子组件之间数据单向流动，不建议直接修改父组件传入的prop变量。所以为了实现双向绑定，我们需要：1、在子组件中定义对应的变量B，拷贝父组件传入的初始值A2、实时监测变量B，当B发生变化时，使用-emit，传递B的值给父组件3、在父组件中定义接收值的更新函数，接收到新的值后，将值赋给A"><a href="#Vue规定了父子组件之间数据单向流动，不建议直接修改父组件传入的prop变量。所以为了实现双向绑定，我们需要：1、在子组件中定义对应的变量B，拷贝父组件传入的初始值A2、实时监测变量B，当B发生变化时，使用-emit，传递B的值给父组件3、在父组件中定义接收值的更新函数，接收到新的值后，将值赋给A" class="headerlink" title="Vue规定了父子组件之间数据单向流动，不建议直接修改父组件传入的prop变量。所以为了实现双向绑定，我们需要：1、在子组件中定义对应的变量B，拷贝父组件传入的初始值A2、实时监测变量B，当B发生变化时，使用$emit，传递B的值给父组件3、在父组件中定义接收值的更新函数，接收到新的值后，将值赋给A"></a>Vue规定了父子组件之间数据单向流动，不建议直接修改父组件传入的prop变量。所以为了实现双向绑定，我们需要：<br>1、在子组件中定义对应的变量B，拷贝父组件传入的初始值A<br>2、实时监测变量B，当B发生变化时，使用$emit，传递B的值给父组件<br>3、在父组件中定义接收值的更新函数，接收到新的值后，将值赋给A</h2><p>实现第1、2点，compute完美满足需求。<br>为实现第三点，Vue提供了.sync语法糖，避免每次都要写一个更新函数，默认的函数名是update。<br>在明确了步骤后，我们很容易就能写出代码。需要稍微留意的是，子组件中变量B的命名最好与变量A对称，这样一看就是一对，代码更加清晰易懂。<br>例如：<br>A叫openDialog，B叫dialogOpened<br>A叫selectOption，B叫optionSelected</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">//父组件引用</span><br><span class="line"><span class="tag">&lt;<span class="name">my-dialog</span> <span class="attr">:showDialog.sync</span>=<span class="string">&quot;showDialog&quot;</span> &gt;</span>&lt;/my-dialog &gt;</span><br></pre></td></tr></table></figure><p>子组件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"> <span class="attr">props</span>: &#123;</span><br><span class="line">            <span class="comment">// 是否展示弹窗</span></span><br><span class="line">            <span class="attr">showDialog</span>: <span class="title class_">Boolean</span>,     </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"><span class="comment">// 在代码中修改dialogShowed的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">            <span class="attr">dialogShowed</span>: &#123;</span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">showDialog</span>;</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:showDialog&quot;</span>, val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是目前所总结到的抽取子组件的小经验~熟悉了这种模式之后，实现起来还是挺容易的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程：大文件解析优化</title>
      <link href="/2020/04/10/Java%E5%A4%A7%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E4%BC%98%E5%8C%96/"/>
      <url>/2020/04/10/Java%E5%A4%A7%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><blockquote><p>在应用系统中，常常需要建立文件管理系统，对存储在存储组件（常用有文件存储&#x2F;数据库存储&#x2F;对象存储等）中的物理文件、目录结构在应用数据库中进行逻辑建模，从而方便查询、读取和管理。</p></blockquote><p><em>这种设计体现了松耦合的特性，不论文件采取什么方式进行底层存储，应用层提供相同的接口，即使更换存储组件，上层接口不会改变，不影响到与其他模块的交互。</em><br>应用系统为用户提供上传接口，该接口接收一个或多个压缩包（*.zip），返回文件存储路径。该接口为同步响应接口，响应时间不能太长，否则前端页面会失去响应，报超时异常。<br>当用户上传一个多目录结构、包含大批量文件的压缩包，处理速度会显著下降。对文件处理过程进行效率优化，能显著提高接口响应速度，带来更好的用户体验。</p><h1 id="性能瓶颈"><a href="#性能瓶颈" class="headerlink" title="性能瓶颈"></a>性能瓶颈</h1><p>当前系统采用Amazon S3对象存储组件存储物理文件，MySQL数据库存储文件信息。<br>经过测试，现有解析并存储近2万个小文件的多目录压缩包，需要5分钟。</p><p>文件存储过程需要经历如下主要步骤：<br><img src="https://upload-images.jianshu.io/upload_images/6810620-77b7bdc311fbcccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件上传后主要步骤"></p><p>文件存储步骤从上图可以看出，主要的时间开销为：</p><ul><li>向存储组件写入文件耗时</li><li>建立数据库实体，写入数据库</li></ul><p>分析业务逻辑代码，得到如下流程图：<br><img src="https://upload-images.jianshu.io/upload_images/6810620-a01fc3ba5d5573ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="业务逻辑中存储逻辑"></p><p>存储流程解决思路：将总任务拆解成独立、可重复执行的任务，多线程批量执行，减少与数据库交互次数。<br><strong>核心：改单线程为多线程，改单次操作为批量操作。</strong></p><h1 id="拆解任务"><a href="#拆解任务" class="headerlink" title="拆解任务"></a>拆解任务</h1><p>经过分析，可以将需要处理的文件分为两类：目录和文件。<br>对于目录，只需要存储MySQL数据库记录，不需要存储至S3。<br>拆解任务的主要难点在于减少任务之间的时序依赖关系，而文件存储过程中存在的时序为：</p><ul><li>目录层级<br>先向数据库写入父级目录，才能写入该目录下的子文件目录或子文件，以此类推。子文件实体的parentId字段记录父目录的id，存储路径为父目录地址 + 子文件名。<br><img src="https://upload-images.jianshu.io/upload_images/6810620-05a1024001494817.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件实体"></li></ul><p> 模型如上面类图所示，数据库中不仅记录文件的大小、存储路径、类型等信息，同时保留层级结构。层级为树形，每一层目录信息需要依赖上一级而产生</p><ul><li>去重<br>存储路径为唯一索引，在保存记录时需要先判重，再存储。</li></ul><h2 id="快速实现"><a href="#快速实现" class="headerlink" title="快速实现"></a>快速实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">递归解析文件夹</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleDir</span><span class="params">(Long parentId, String parentPath, String dirPath, List&lt;String&gt; uploadRes)</span> &#123;  </span><br><span class="line">File[] filesAndDirs = <span class="keyword">new</span> <span class="title class_">File</span>(folderPath).listFiles();    </span><br><span class="line"><span class="keyword">for</span> (File fileOrDir : filesAndDirs) &#123;        </span><br><span class="line"><span class="keyword">if</span> (fileOrDir.isFile()) &#123;   </span><br><span class="line"><span class="comment">//...向存储组件传输，并存储记录</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">   <span class="comment">//建立父目录的文件实体           </span></span><br><span class="line"><span class="type">FileEntity</span> <span class="variable">fileEntity</span> <span class="operator">=</span> FileEntity.builder().parentId(parentId)</span><br><span class="line">.path(parentPath + fileOrDir.getName()<span class="string">&quot;/&quot;</span>)                   </span><br><span class="line">.build();</span><br><span class="line">fileEntity = fileRepository.save(fileEntity);</span><br><span class="line">      <span class="comment">//递归调用            </span></span><br><span class="line"><span class="built_in">this</span>.handleDir(fileEntity.getId(), fileEntity.getPath(), fileEntity.getPath(), uploadRes);        </span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>递归解析为单线程，该方法每次都需要执行判断逻辑，判断当前处理的是文件还是文件夹，并对每个目录文件都执行入库，再进行递归。</p><h2 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a>改进方案</h2><p>将根目录下所有文件和目录一次性读取至内存中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;File&gt; files = FileUtils.listFilesAndDirs(<span class="keyword">new</span> </span><br><span class="line"><span class="title class_">File</span>(testPath), TrueFileFilter.INSTANCE, </span><br><span class="line">TrueFileFilter.INSTANCE);</span><br></pre></td></tr></table></figure><h3 id="处理目录"><a href="#处理目录" class="headerlink" title="处理目录"></a>处理目录</h3><p>目录层级按照深度归类，并按深度升序排列。在存储时，先存入父目录，再存子目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Integer, List&lt;File&gt;&gt; allDirs = </span><br><span class="line">dirs.stream().collect(Collectors.groupingBy(ParseTest::getFileDeep, TreeMap::<span class="keyword">new</span>, Collectors.toList()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">获取目录深度</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getFileDeep</span><span class="params">(File file)</span>&#123;    </span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> file.getAbsolutePath();    </span><br><span class="line">    String[] deep = path.split(<span class="string">&quot;\\\\&quot;</span>);    </span><br><span class="line">    <span class="keyword">return</span> deep.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java8特性：将List使用lambda表达式转化成TreeMap<br><em>为什么使用TreeMap？key值有序</em><br>逐层处理：<br>存储目录时，将该目录实体与源文件绝对路径的映射存入缓存HashMap中。<br>只要不是第一层，都从缓存absolutePathMap中获取信息。存储到数据库时保留文件目录信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据原文件的绝对路径，缓存该目录结构</span></span><br><span class="line"> HashMap&lt;String, FileEntity&gt; absolutePathMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> dirDeep : allDir.keySet()) &#123;</span><br><span class="line">     List&lt;File&gt; dirList = allDir.get(dirDeep);</span><br><span class="line">     <span class="keyword">for</span> (File dir : dirList) &#123;</span><br><span class="line">         <span class="comment">// 获取该文件的父级目录绝对地址</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">parentAbsolutePath</span> <span class="operator">=</span> dir.getAbsolutePath().substring(<span class="number">0</span>, dir.getAbsolutePath().lastIndexOf(<span class="string">&quot;\\&quot;</span>));</span><br><span class="line">         <span class="comment">// 若不是第一层级，从缓存map中取出保存好的父目录信息</span></span><br><span class="line">         <span class="keyword">if</span> (dirDeep != allDirs.firstKey()) &#123;</span><br><span class="line">             parentId = absolutePathMap.get(parentAbsolutePath).getId();</span><br><span class="line">             parentPath = absolutePathMap.get(parentAbsolutePath).getPath();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="type">FileEntity</span> <span class="variable">fileEntity</span> <span class="operator">=</span> FileEntity.builder().parentId(parentId).path(parentPath + dir.getName() + <span class="string">&quot;/&quot;</span>).build();</span><br><span class="line">     </span><br><span class="line">         fileEntity = fileRepository.save(fileEntity);</span><br><span class="line">         absolutePathMap.put(dir.getAbsolutePath(), fileEntity);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>遍历完成后，所有目录结构均已存入数据库中。</p><h3 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h3><p>剩余需要处理的是文件。文件所依赖的父目录信息已全部存入absolutePathMap中，文件和文件之间处理逻辑不存在时序依赖关系，可以引入多线程来进行分割处理。</p><h4 id="Callable类"><a href="#Callable类" class="headerlink" title="Callable类"></a>Callable类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileHandler</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;List&lt;String&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分给本线程处理的文件</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;File&gt; files;</span><br><span class="line">    <span class="comment">//存储父路径的地方</span></span><br><span class="line">    HashMap&lt;String, DentryDTO&gt; absolutePathMap;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileHandler</span><span class="params">(Collection&lt;File&gt; files,DentryDTO&gt; absolutePathMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.files = files；</span><br><span class="line">        <span class="built_in">this</span>.absolutePathMap = absolutePathMap;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 处理文件</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 将需要处理的文件和所用到的absolutePathMap通过构造方法的参数传入。</p><ul><li>若需要使用其他类，也通过构造参数传入。</li><li>使用Callable，该线程运行后会返回Future类型，是我们需要获取该线程的回调。</li></ul><h4 id="多线程执行"><a href="#多线程执行" class="headerlink" title="多线程执行"></a>多线程执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">List&lt;File&gt; subList;</span><br><span class="line"><span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">   <span class="comment">// 计算运行规模（需要多少个线程）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">runSize</span> <span class="operator">=</span> ((Double) (Math.ceil(singleFiles.size() * <span class="number">1d</span> / batchSize))).intValue();</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(runSize);</span><br><span class="line">    <span class="comment">// 使用阻塞容器记录结果</span></span><br><span class="line">BlockingQueue&lt;Future&lt;List&lt;String&gt;&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; runSize; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> ((i + <span class="number">1</span>) == runSize) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> i * batchSize;</span><br><span class="line">          subList = singleFiles.subList(startIndex, singleFiles.size());</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> i * batchSize;</span><br><span class="line">             <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> (i + <span class="number">1</span>) * batchSize;</span><br><span class="line">             subList = singleFiles.subList(startIndex, endIndex);</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="type">FileHandler</span> <span class="variable">fileHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileHandler</span>(subList,absolutePathMap);</span><br><span class="line">           Future&lt;List&lt;String&gt;&gt; res = executor.submit(fileHandler);</span><br><span class="line">           queue.add(res);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       List&lt;String&gt; resAll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="type">int</span> <span class="variable">queueSize</span> <span class="operator">=</span> queue.size();</span><br><span class="line">       <span class="comment">// 循环获取结果</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queueSize; i++) &#123;</span><br><span class="line">           resAll.addAll(queue.take().get());</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br></pre></td></tr></table></figure><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>在FileHandler中调用存储逻辑，也采用线程池方案。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>在linux环境下运行，需要注意路径分隔符与windows系统不同。应将代码中的“\”使用File.separator代替。<br>线程数量可读取当前系统的CPU内核数量，从而容易取得更好的效率。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在对任务进行恰当的逻辑分割后，很容易找到多线程的解决方案，充分利用CPU资源。<br>使用现有的线程池方案，避免创建过多空闲线程，能使效率更优。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记</title>
      <link href="/2018/09/10/Docker%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/10/Docker%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p><code>docker images</code> 列出本地 docker 镜像<br><code>docker ps -a</code> 列出所有正在运行的容器<br><code>docker stop containerID</code>停止容器<br><code>docker start containerID</code>开始容器<br><code>sudo docker exec -it containerID /bin/bash</code>  进入容器内<br><code>linux --mount</code>  挂载 Unix 文件系统（ Unix File System ）之外的文件，或使用 Volume 数据卷。</p><p>容器互联：</p><p>推荐将容器加入自定义的Docker网络，连接多个容器，或使用<code>--link</code> 指令。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>基于Linux内核和 LXC (Linux Container) 技术，对进程进行封装和隔离，属于操作系统层面的虚拟化技术，在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。</p><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><p>相较于传统的虚拟机技术，docker 具有更加轻量级、易于管理和并发的特点。</p><p><strong>与传统虚拟机比较</strong></p><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><h1 id="Docker-基本概念："><a href="#Docker-基本概念：" class="headerlink" title="Docker 基本概念："></a>Docker 基本概念：</h1><ul><li>镜像（ Image ）</li><li>容器 （ Container ）</li><li>仓库 （ Repository ）</li></ul><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>使用pull指令，可以拉取 DockerHub 中的开源镜像到本地使用。<br>docker pull mysql<br>docker images 列出本地的镜像</p><h3 id="定制镜像"><a href="#定制镜像" class="headerlink" title="定制镜像"></a>定制镜像</h3><p>使用 DockerFile</p><p>FROM scratch<br>FROM指令为以什么为基础镜像，若为scratch意味着不以任何镜像为基础。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器之于镜像，如同实例之于类，创建容器，意为给镜像生成了一个实例。</p><blockquote><p>docker –name mysql -p 3306:3306 -d mysql<br>若不使用-d，容器会将输出的结果（STDOUT）打印到宿主机上。<br>如果使用了-d参数运行容器，容器会在后台运行，并不会在前台输出结果。若要看输出，可使用docker logs containerID指令进行查看。</p></blockquote><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>在定制好个人的镜像后，可以搭建仓库进行存储。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2018/06/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/06/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>基本概念：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p><h1 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="comment">//持有私有的单例对象，防止被引用。赋值为null，目的是实现延迟加载</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//私有的构造方法，防止被实例化</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="comment">//1：懒汉式，静态工程方法，创建实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (intsatnce == <span class="literal">null</span>) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Singleton.getInstance().method();</span><br></pre></td></tr></table></figure><p>优点：延迟加载（需要的时候才去加载），适合单线程操作<br>缺点：线程不安全。在多线程中很容易出现不同步的情况（如在数据库对象进行频繁读写时）</p><h1 id="双重线程检查模式"><a href="#双重线程检查模式" class="headerlink" title="双重线程检查模式"></a>双重线程检查模式</h1><pre><code class="java">public class </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Head First 深入浅出HTML CSS</title>
      <link href="/2018/03/24/Head%20First%20%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAHTML%20CSS/"/>
      <url>/2018/03/24/Head%20First%20%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAHTML%20CSS/</url>
      
        <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>当浏览器阅读HTML时，它会解析包围文本的所有标记。标记使用尖括号括起来的字母或单词，标记告诉浏览器文本的结构和意义。<br>用包围文本的成对标记告诉浏览器网页的结构。<br>元素&#x3D;开始标记+内容+结束标记<br>元素可以拥有“属性”：<br>属性用来为一个元素提供附加信息。例如，如果有一个样式元素，属性允许你确切地描述这个元素——用来提供该元素的额外信息。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p><strong>HTML ：超文本标记语言</strong> <em>HyperText Markup Language</em><br><strong>CSS：级联样式表</strong> <em>Cascading Style Sheet</em><br>CSS是与HTML完全不同的语言。<br>分别使用两种语言，HTML用于创建结构，CSS用于创建样式，使用它们在各自的领域完成工作。</p><h2 id="深入理解超文本"><a href="#深入理解超文本" class="headerlink" title="深入理解超文本"></a>深入理解超文本</h2><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签，创建超文本链接到另外一个网页，”a”元素中的内容在网页中是可点击的，Href属性告诉浏览器链接的目的地。</p><h2 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h2><ol><li>步骤：先计划好网页的结构，再绘制略图，最后写HTML。</li><li>使用大的块元素来创建网页，然后用内联元素修饰。</li><li>通常使用最能匹配内容含义的元素。例如，当你需要列表时绝不用段落表示。</li></ol><p><strong>块元素</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>、<span class="tag">&lt;<span class="name">ol</span>&gt;</span>、<span class="tag">&lt;<span class="name">ul</span>&gt;</span>和<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>都是块元素，它们独立显示，文本前后有空行。<br><strong>内联元素</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>、<span class="tag">&lt;<span class="name">em</span>&gt;</span>、<span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是内联元素，这些元素的内容和其他内容一起跟随在文字流中。</p><h3 id="q与blockquote"><a href="#q与blockquote" class="headerlink" title="q与blockquote"></a>q与blockquote</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用标签：简短地“引用”现有文字的一部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><p>区块引用：引用一大段文字并独立显示<br>blockquote和q是两种不同类型的元素，blockquote元素是块（block）元素而q是内联（inline）元素。<br>br元素：显示换行</p><h3 id="li与ol元素"><a href="#li与ol元素" class="headerlink" title="li与ol元素"></a>li与ol元素</h3><p>用li把每个列表项封入，每个li元素将在列表中开始一个列表项。<br><strong>u</strong>nordered <strong>l</strong>ist &#x3D; <strong>ul</strong>** <strong>无序列表<br><strong>o</strong>rdered <strong>l</strong>ist &#x3D; <strong>ol</strong></strong> ** 有序列表<br><strong>l</strong>ist <strong>i</strong>tem &#x3D; <strong>li</strong> 列表项<br>ol和li必须一起使用<br>列表是一组项目：li元素用来确定每个项目，ol则是把它们组成一组。<br>自定义列表dl：列表中每个项目都有一个项限dt和一个描述dd。</p><h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><p>br是个“空元素”，它没有内容，且仅由一个标记组成。</p><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>当把一个元素放入到另一个元素中，叫做嵌套。组织网页中的嵌套元素相当于画家族树。<br>作用：防止标记不匹配。</p><h2 id="部署与扩展"><a href="#部署与扩展" class="headerlink" title="部署与扩展"></a>部署与扩展</h2><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>HTTP协议是超文本传输协议，当找不到对应超文本时，返回404</p><h3 id="a标签的扩展"><a href="#a标签的扩展" class="headerlink" title="a标签的扩展"></a>a标签的扩展</h3><ul><li>目标锚：给出目的标识： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;index.html\#chai&quot;</span>&gt;</span>See Chai Tea<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span> = <span class="string">&quot;chai&quot;</span>&gt;</span>目的<span class="tag">&lt;/<span class="name">ai</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用target（对象）打开一个新窗口： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span> = <span class="string">&quot;\_blank&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>target属性告诉浏览器在哪打开href属性</li></ul><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>浏览器遇到img标签时，需要进行特殊处理：浏览器必须先接收图像，然后才能在该页面上显示图像。<br>alt属性：一小段描述图像的文字，当图像不能显示时，用这一小段叙述代替原有的图像。</p><h2 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h2><p>使用选择符+内容来定义样式<br>若要使某类的元素拥有同一个样式，使用一个句点，并且接一个类名，则这个规则会适用于该类内的所有成员。<br>常用规则：<br><strong>font-family</strong> 定义网页中的字体<br><strong>font-size</strong> 控制字体的大小<br><strong>color</strong> 文本的颜色<br><strong>font-weight</strong> 设置字体</p><h3 id="盒模式"><a href="#盒模式" class="headerlink" title="盒模式"></a>盒模式</h3><p>Box-Model<br>padding（补白）——&gt;border（边框）——&gt;margin（边界）</p><h3 id="div与span"><a href="#div与span" class="headerlink" title="div与span"></a>div与span</h3><p>div：用于划分页面，并改变块区样式。借助div，将页面划分为几个合理逻辑结构，有助于网页结构的清晰和样式化。<br>块元素的默认宽度是auto，也就是说会延伸到所有空间。<br>可以定义块的事迹大小，也可以定义百分数。如果使用百分数，则是元素所在的容器（可以是body、div）</p><h3 id="根据状态样式化元素"><a href="#根据状态样式化元素" class="headerlink" title="根据状态样式化元素"></a>根据状态样式化元素</h3><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><p>使用流布局：<br>浏览器用<strong>流</strong>来布置页面上的HTML元素，它从HTML文件的开头开始，从头到尾跟着元素的流显示它遇到的每个元素。<br>当两个浏览器并排放置两个内联元素，且这些元素都有边界时，会将两个元素的边界加起来显示。<br>当浏览器并列放置两个块元素时，它把共同的边界重叠到一起，重叠边界的高度是最大边界的值。</p><h2 id="表格与表单"><a href="#表格与表单" class="headerlink" title="表格与表单"></a>表格与表单</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用tr创建表格中的行，th创建表头，td创建表格中的内容。</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>textarea：可以输入多行文字，并使用rows和cols定义文本区域的高度与宽度。<br>select：为网页创建菜单空间，菜单提供了在一组选项中选择的方式，select与option共同创建一个菜单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年10月阅读笔记</title>
      <link href="/2017/10/30/2017%E5%B9%B410%E6%9C%88%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/10/30/2017%E5%B9%B410%E6%9C%88%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="《奥斯维辛：一部历史》"><a href="#《奥斯维辛：一部历史》" class="headerlink" title="《奥斯维辛：一部历史》"></a>《奥斯维辛：一部历史》</h3><p>　　最初听说奥斯维辛是在语文教科书上的《奥斯维辛没有什么新闻》，此外对这段历史不过是远远一瞥——太过沉重，没办法毫无负担地阅读。对这个人类历史的丑陋伤疤，真的要看也是带着严肃的心态去看，本能生出些敬畏和尊重。<br>　　还是很值得一看，不过看的是埋在更深层原因。固然能看到惨像如斯：囚犯拿石碾子从活人身上轧过去，生生在卡车边缘摔死的孩子，一排排空荡荡的婴儿车……与此同时是被在通往死亡的铁轨末尾用鲜花装点得整洁漂亮的火车站，“劳动使人自由”的标语，是一个极端荒诞却又万分真实的近代讽刺。<br>　　埋在深层的是由来已久的反犹思想，对外战争失败矛盾的转移，用个体代替集体的仇恨积累，用书中的话说叫做“累积式激进”——所有纳粹和几乎所有非犹德国人都在为这场屠杀出谋划策，没有一片雪花是无辜的。<br>　　更让人触目惊心的是都发生在近现代，文明进化的产物被用来进行更高效无损的屠杀，所以有了毒气室，有了流水线一般的屠杀作业。当集体陷入某种狂热，连最起码的内疚都不会产生，思想倾向一旦形成，所有人都成了铁血集体的一部分，任何提出异议的不是被淹没，就是被毁灭。人性的自私，残忍，懦弱，无情，展露无遗。<br>　　在集中营中采用的某些做法，现在在某些集体主义的训练中也时有出现，比如实行丛林法则：从一群囚犯中选出一个头儿，示意他来监督所有其他的囚犯，并给他极大的权力。若他展现出稍微的仁慈和软弱，就将他降回到原先的地位去。这样的“捧杀”使善良没有任何容身之地了。此外还有连坐的做法等等，来来回回要约束人类，不过是用这几种手段，只是在集中营里惩罚更加残酷，威胁也更加明确——虐杀。<br>　　我印象最深的仍然是幸存者的待遇，被苏联红军解放的犹太女人很多又被俄国士兵强奸，回到家里，却发现自己的房屋早已被别人侵占，没有人欢迎犹太人。等他们终于熬过黑暗，发现等来的并不是黎明，即使是寥寥几个逃出去的幸存者，也往往在痛苦和惊恐中度过一生。<br>　　就好像去南京大屠杀纪念馆，看到各种惨绝人寰的虐杀手段都尚且可以忍耐，看到幸存者说自己每年都来看这些死者才痛哭失声。死者已矣，对生者的创痛更加隐蔽、绵长、酷烈，有时甚于死亡。</p><h3 id="《人间失格》（-日-太宰治）"><a href="#《人间失格》（-日-太宰治）" class="headerlink" title="《人间失格》（[日]太宰治）"></a>《人间失格》（[日]太宰治）</h3><p>　　听这个名字也有很久了。<br>　　日本小说含蓄细腻，“圆熟嫣丽”，有如屏风上的浮世绘。我不大能欣赏这种趣味。小说讲了一个少爷的潦倒，写的情感自然有动人之处，却未免觉得他们说话都太客气，带着颓丧，和腰封上粗体大字“** 日本文学巅峰人物、要读村上春树更要读太宰治，最具影响力小说 **”一比较，就对比尤为鲜明了。<br>　　近来看书功利，不带知识性不大愿读，可能便是辜负，但也不觉可惜。</p><h3 id="《局外人》（-法-加缪）"><a href="#《局外人》（-法-加缪）" class="headerlink" title="《局外人》（[法]加缪）"></a>《局外人》（[法]加缪）</h3><p>　　“一时，我突然产生了这么一个滑稽的印象：这些人似乎是专来审判我的。”<br>　　全书看完，还是觉得这句话最震撼，好像所有人类都并不能互相理解，他们可以互相问候、握手乃至性交，但都不过是物理的接触，真实的灵魂跃居于肉体之外，漠然审视。主角自然是“局外人”，当主角身处于被审判的“局”中，其他人亦身处局外。人类生而群居，在社会中生存必要有的社交和共情能力，正是进步的本源。孤僻的人类好像是进化树上生错的旁枝。心理描写非常经典，刻画细微，唯其真实才让人感同身受。</p><h3 id="《阴阳师（第1卷）》"><a href="#《阴阳师（第1卷）》" class="headerlink" title="《阴阳师（第1卷）》"></a>《阴阳师（第1卷）》</h3><p>　　<br>　　快Ａ掉游戏时才看的原著，意外的挺有意思，努力想从描写的故事中看出自己所养的式神的影子，结果当然是全然失败、难以找到，只有荒川和花鸟卷近可附会，然而人设和情节也截然不同。<br>　　两位主角晴明和博雅还是很有意思的。晴明近似全知全能的经典主角，而博雅则非常痴，常被晴明称赞为“好汉子”……连续三年的夜晚都去等待一位大师弹琵琶，或者对月吹笛到流泪，都是十分风雅而传奇的痴人形象啊。</p><h3 id="《仿生人会梦见电子羊吗？》（-美国-菲利普·K·狄克）"><a href="#《仿生人会梦见电子羊吗？》（-美国-菲利普·K·狄克）" class="headerlink" title="《仿生人会梦见电子羊吗？》（[美国]菲利普·K·狄克）"></a>《仿生人会梦见电子羊吗？》（[美国]菲利普·K·狄克）</h3><p>　　小说中的主人公里克生活的地方已被放射尘笼罩，动物大多灭绝，人类也大部分移民。地球已经成了一个巨大的垃圾场，而里克选择留下来，“说不定有哪一天尘埃会落定”，从一开始用情绪调节器将自己调节到适合工作的情绪，到巨大的寂寞攫住了他，吞噬他，使他终于感受到和妻子一样的绝望和抑郁。追杀仿生人时逐渐产生了对仿生人的移情，发现野生蛤蟆后的狂喜，最后又发现蛤蟆是电子的之后的麻木和空虚，结构流畅精悍，情绪非常有感染力。<br>　　这本书从书名到全书都透着一种冷峻的幽默，试图比附了一下，倒不是“含泪微笑”那样文艺优美，比较像一脸苦相地说笑话。一开始看就让我轻易联想起了《银河系漫游指南》里的情节：地球被随便炸毁，只留下了一行“基本上无害”的批语；深思算了无数年才算出来没头没脑的终极答案“42”，和此书中默瑟主义最后被发现只是一个跑龙套的演员在摄影棚里拍的片子意义相通——等号两端一边被放上沉重无比的生命、无穷多人的支柱和信仰、漫长无垠的岁月，另一边则轻飘飘地搁上一点破烂，一个敷衍的谎言，一个蹩脚滑稽的小丑，这其中的荒诞和讽刺，让人觉得心酸又好笑，比一般悲剧更加冷酷无情。</p><h3 id="《鱼丽之宴》-木心"><a href="#《鱼丽之宴》-木心" class="headerlink" title="《鱼丽之宴》(木心)"></a>《鱼丽之宴》(木心)</h3><p>　　木心作品，在没正式翻开之前就有接触。常常会想到画家写文另有优势，因其审美超越常人，能写得更加色彩浓艳、生机勃勃。   </p><p>　　</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年观影/剧杂记</title>
      <link href="/2017/08/23/2017%E5%B9%B4%E8%A7%82%E5%BD%B1%E5%89%A7%E6%9D%82%E8%AE%B0/"/>
      <url>/2017/08/23/2017%E5%B9%B4%E8%A7%82%E5%BD%B1%E5%89%A7%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="House-M-D"><a href="#House-M-D" class="headerlink" title="House.M.D"></a>House.M.D</h2><p>　　快要看完《豪斯医生》了。<br>　　八季电视剧几乎是连续在看，还剩几集，可能看完后过一阵子会重头再看一遍——内心非常惆怅：要再过多久，才能遇到这样一个极其丰富、极具魅力的男主角啊！<br>　　豪斯常说两句话，一句是人人都撒谎，一句是人永远也不会变。如果说前一句是他对人性的洞察，后一句则更像是一句宣言：豪斯永远是豪斯，以自己固有的自毁、自傲、玩世不恭、保存自我，不存心获得理解也不期待理解，交付给世界的，唯有一点轻蔑。<br>　　整整八季都在说他，他也一直都没有任何改变，变得更丰富的只是他的经历，像从不同角度去窥探他原本就复杂多元的灵魂。佐证除了他出狱时威尔逊说的那句“你一点也没变”，还有别人问起豪斯腿没有残疾时是什么样，得到的回答也是“和现在没有什么区别”。这是他的痛苦之源，亦是魅力所在。<br>　　我看剧太容易真情实感，一方面是因为一开始就很喜欢豪斯，另一方面则是因为编剧非常善于使用对比和转折手法——室内春光融融，人人欢聚喜气洋洋，室外是大雪纷飞，豪斯独自伫立观望，然后缓缓走开。聚会热闹非凡，豪斯独自在浴缸里喝酒。一边是欢庆圣诞，一边是豪斯独自弹着旧钢琴。——这种孤独当然魅力十足。<br>　　转折也来得冷酷锐利，让人猝不及防：豪斯恢复了双腿，小孩儿一样玩滑板，下一瞬就是他腿又痛了，从滑板上走下来，忧心忡忡地扶着膝盖。豪斯以为自己终于得遂所愿，获得了真爱，转眼却发现一切不过是幻梦，爱人的口红是自己的药瓶。他遇到了心爱的姑娘，弹钢琴时交换着深情脉脉的眼神，随即自己不慎害得重伤的病人躺在轮椅上被推进房间……一切温情欢乐的瞬间都短暂，而疼痛来势汹汹，阴魂不散，是人生缠绕不去的底色。<br>　　豪斯常常被称赞、被感谢——因其绝顶聪明的头脑、极其优秀的专业能力——甚至被称颂为神明。可是哪一种神明会这样毫不吝惜地展露狼狈与伤痛？他一直就满身尘埃，无需他人将他从云端推落。无神主义者该去憎恶哪一种天道？该去祈求哪一路神灵？当他能听出安慰的虚伪，洞穿社交虚伪的本质，又怎能期待从中获得安慰？<br>　　可能正是因为看得太透彻，才让豪斯面对感情时幼稚消极：一开始不去获得，就无所谓失去，像是看见熊熊的炉火，虽然想靠近被温暖，但怕被火灼伤，所以干脆不靠近，也不承认想靠近。他所处的很多困境从旁观者看来都并非死局，甚至很多不幸压根都是他自己亲手造成的，只需要稍作妥协，就可以顺利摆脱。<br>　　但豪斯决不妥协，决不改变。将怜悯加诸豪斯更像是一种轻蔑和侮辱，我只是一个动情而无助的观众，唯一的选择是看着他按照自己选择的道路走下去。<br>　　一直都喜欢移情和类比，但是豪斯世无其二。</p><h2 id="银翼杀手2049"><a href="#银翼杀手2049" class="headerlink" title="银翼杀手2049"></a>银翼杀手2049</h2><p>　　万圣节晚上去看的电影，本以为是一部爆米花，却没想到是非常晦涩压抑的科幻文艺片。没有了解过前作，不免觉得压抑无聊。<br> 　　因为才看完《电影批评》，所以看的时候特别留意画面与配乐，画面带着宏大的荒凉感，高度文明却毫无生机，漫无边际的滂沱雨幕，光怪陆离的巨大光影，重复单调的嘈杂广告从高空跌落，给人无处遁逃的压抑感。配乐则是间或击打声，轰隆隆非常响亮，使得不大能欣赏作品、昏昏欲睡的人突然警醒，好像在快睡着的数学课上忽遭点名。　</p>]]></content>
      
      
      
        <tags>
            
            <tag> 电视剧 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
